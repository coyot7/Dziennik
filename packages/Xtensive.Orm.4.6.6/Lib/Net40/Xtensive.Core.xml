<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Core</name>
    </assembly>
    <members>
        <member name="T:Xtensive.Arithmetic.Arithmetic`1">
            <summary>
            Provides delegates allowing to call <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> methods faster.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> generic argument.</typeparam>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="T:Xtensive.Core.MethodCacheBase`1">
            <summary>
            Base class for any method caching class.
            </summary>
            <typeparam name="TImplementation">The type of <see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/>.</typeparam>
        </member>
        <member name="F:Xtensive.Core.MethodCacheBase`1.Implementation">
            <summary>
            Gets underlying implementation object or interface.
            </summary>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="implementation"><see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/> property value.</param>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="M:Xtensive.Core.MethodCacheBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Provider">
            <summary>
            Gets the provider underlying arithmetic is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Add">
            <summary>
            Adds one value to another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Negation">
            <summary>
            Gets negation.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Multiply">
            <summary>
            Multiplies value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Divide">
            <summary>
            Divides value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.Subtract">
            <summary>
            Subtracts one value from another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Arithmetic`1.ApplyRules">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.Arithmetic`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.Arithmetic`1.#ctor(Xtensive.Arithmetic.IArithmetic{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="implementation"><see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/> property value.</param>
        </member>
        <member name="P:Xtensive.Arithmetic.Arithmetic`1.Default">
            <summary>
            Gets default arithmetic for type <typeparamref name="T"/>
            (uses <see cref="P:Xtensive.Arithmetic.ArithmeticProvider.Default"/> <see cref="T:Xtensive.Arithmetic.ArithmeticProvider"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticBase`1">
            <summary>
            Base class for <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> implementations.
            </summary>
            <typeparam name="T">Type to provide arithmetic operations for.</typeparam>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmetic`1">
            <summary>
            Provides arithmetic operations for specified type.
            </summary>
            <typeparam name="T">Type to provide arithmetic operations for.</typeparam>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmeticBase">
            <summary>
            Very base interface for any arithmetic implementation 
            supported by <see cref="T:Xtensive.Arithmetic.IArithmeticProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmeticBase.Provider">
            <summary>
            Gets the provider this arithmetic is associated with.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Add(`0,`0)">
            <summary>
            Adds one value to another.
            </summary>
            <param name="value1">First summand.</param>
            <param name="value2">Second summand.</param>
            <returns>Sum of <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Negation(`0)">
            <summary>
            Gets negation.
            </summary>
            <param name="value">Value to get negation for.</param>
            <returns>Negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Multiply(`0,System.Double)">
            <summary>
            Multiplies value by specified factor.
            </summary>
            <param name="value">Value to multiply.</param>
            <param name="factor">Factor.</param>
            <returns>Multiplication of <paramref name="value"/> by <paramref name="factor"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Divide(`0,System.Double)">
            <summary>
            Divides value by specified factor.
            </summary>
            <param name="value">Value to divide.</param>
            <param name="factor">Factor.</param>
            <returns>Quotient of <paramref name="value"/> by <paramref name="factor"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.Subtract(`0,`0)">
            <summary>
            Subtracts one value from another.
            </summary>
            <param name="value1">Value to subtract from.</param>
            <param name="value2">Deduction</param>
            <returns>Subtraction of <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmetic`1.ApplyRules(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> of this arithmetic).</param>
            <returns>New instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.IArithmetic`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.OverflowAllowed">
            <summary>
            Indicates whether overflow is allowed (doesn't lead to an exception)
            on arithmetic operations.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.NullIsZero">
            <summary>
            Indicates whether <see langword="null"/> value is threated as zero
            in arithmetic operations.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticBase`1.Rules">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> used by this arithmetic.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Add(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Subtract(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.ApplyRules(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/> of this arithmetic).</param>
            <returns>New instance of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            Creates new arithmetic of the same type, but using different arithmetic rules.
            </summary>
            <param name="rules">Arithmetic rules for the new arithmetic (relatively to this one).</param>
            <returns>New arithmetic of the same type, but using different arithmetic rules.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Negation(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Multiply(`0,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.Divide(`0,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">Arithmetic provider this arithmetic is bound to.</param>
            <param name="rules">Arithmetic rules.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticBase`1.OnDeserialization(System.Object)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.OnDeserialization(System.Object)"/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticBase`1.IsSigned">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticProvider">
            <summary>
            Default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> provider. 
            Provides default arithmetic for the specified type.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
            <assert>
            <summary>
            Default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> provider. 
            Provides default arithmetic for the specified type.
            </summary>
            <remarks>
            <para id="About">
            This class has default instance - use its <see cref="P:Xtensive.Arithmetic.ArithmeticProvider.Default"/>
            property to get it.
            </para>
            </remarks>
            </assert>
        </member>
        <member name="T:Xtensive.Core.AssociateProvider">
            <summary>
            Implements base functionality for associate provider.
            Creates and caches associates.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.AddHighPriorityLocation(System.Reflection.Assembly,System.String)">
            <summary>
            Adds high priority location for associate search.
            </summary>
            <param name="assembly">Assembly to search in.</param>
            <param name="nameSpace">Namespace to search in.</param>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.AddHighPriorityLocation(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Adds high priority location for associate search.
            </summary>
            <param name="assembly">Assembly to search in.</param>
            <param name="nameSpace">Namespace to search in.</param>
            <param name="overriding">Indicates whether specified location should 
            override all the others (i.e. be a first in the list of locations).</param>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociate``3">
            <summary>
            Gets associate instance for specified parameter and result types.
            All associate instances are cached and returned on the same calls further.
            </summary>
            <typeparam name="TKey">Type to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <returns>Associate instance, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociate``4">
            <summary>
            Gets associate instance for specified parameters and result types.
            All associate created instances are cached and returned on the same calls further.
            </summary>
            <typeparam name="TKey1">First type to try to provide the associate for.</typeparam>
            <typeparam name="TKey2">Second type to try to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <returns>Associate instance, if found;
            otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.PreferAssociate``3(``2,``2)">
            <summary>
            Chooses preferred associate instance from two associates.
            </summary>
            <param name="associate1">First choice option.</param>
            <param name="associate2">Second choice option.</param>
            <typeparam name="TKey1">First associate key type.</typeparam>
            <typeparam name="TKey2">Second associate key type.</typeparam>
            <typeparam name="TAssociate">Type of associate to choose.</typeparam>
            <returns>Preferred associate instance.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.GetAssociateLocationPosition``1(``0)">
            <summary>
            Gets the position of specified associate in <see cref="P:Xtensive.Core.AssociateProvider.HighPriorityLocations"/>
            list.
            </summary>
            <param name="associate">Associate to get the position for.</param>
            <typeparam name="TAssociate">Type of associate.</typeparam>
            <returns>Associate position. <see cref="F:System.Int32.MaxValue"/>, if its
            location isn't listed in <see cref="P:Xtensive.Core.AssociateProvider.HighPriorityLocations"/> list.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.CreateAssociate``2(System.Type@)">
            <summary>
            Creates associate instance for specified parameter and result types.
            </summary>
            <typeparam name="TKey">Type to create the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to create the associate for.</typeparam>
            <param name="foundFor">The type associate was found for.</param>
            <returns>Newly created instance of associate, if found;
            otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Recursive associate lookup.</exception>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.CreateCustomAssociate``3">
            <summary>
            Creates associate by some custom way if no standard associate is found. 
            Override it to create the associate manually.
            </summary>
            <typeparam name="TKey1">First type to try to provide the associate for.</typeparam>
            <typeparam name="TKey2">Second type to try to provide the associate for.</typeparam>
            <typeparam name="TAssociate">Type of result to provide the associate for.</typeparam>
            <returns>Associate instance or <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.ConvertAssociate``3(``1)">
            <summary>
            Converts <paramref name="associate"/> to <typeparamref name="TResult"/> object.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TAssociate">The type of associate.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="associate">Associate to convert to result.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.ConvertAssociate``4(``2)">
            <summary>
            Converts <paramref name="associate"/> to <typeparamref name="TResult"/> object.
            </summary>
            <typeparam name="TKey1">The type of key 1.</typeparam>
            <typeparam name="TKey2">The type of key 2.</typeparam>
            <typeparam name="TAssociate">The type of associate.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="associate">Associate to convert to result.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.AssociateProvider.OnDeserialization(System.Object)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.OnDeserialization(System.Object)"/>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.ConstructorParams">
            <summary>
            Gets associate constructor parameters.
            </summary>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.TypeSuffixes">
            <summary>
            Gets or sets associate type suffixes.
            </summary>
        </member>
        <member name="P:Xtensive.Core.AssociateProvider.HighPriorityLocations">
            <summary>
            Gets a list of high priority locations.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.IArithmeticProvider">
            <summary>
            Arithmetic provider.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.IArithmeticProvider.GetArithmetic``1">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the arithmetic for.</typeparam>
            <returns><see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.GetArithmetic``1">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the arithmetic for.</typeparam>
            <returns><see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for the specified type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.ConvertAssociate``3(``1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticProvider.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticProvider.Default">
            <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true"/>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticRules">
            <summary>
            Describes how to calculate arithmetics.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.Equals(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticRules.#ctor(Xtensive.Arithmetic.NullBehavior,Xtensive.Arithmetic.OverflowBehavior)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Arithmetic.ArithmeticRules"/>.
            </summary>
            <param name="nullBehavior">Null behavior.</param>
            <param name="overflowBehavior">Overflow behavior.</param>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticRules.OverflowBehavior">
            <summary>
            Gets overflow behavior.
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ArithmeticRules.NullBehavior">
            <summary>
            Gets null behavior.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.ArithmeticStruct`1">
            <summary>
            A struct providing faster access for key 
            <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> delegates.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Default">
            <summary>
            Gets <see cref="T:Xtensive.Arithmetic.ArithmeticStruct`1"/> for 
            <see cref="P:Xtensive.Arithmetic.Arithmetic`1.Default"/> arithmetic.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Arithmetic">
            <summary>
            Gets the underlying arithmetic for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Zero">
            <summary>
            Gets "<see langword="Zero"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.One">
            <summary>
            Gets "<see langword="One"/>" value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.MaxValue">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.MinValue">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.IsSigned">
            <summary>
            Gets the signed flag.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Add">
            <summary>
            Adds one value to another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Negation">
            <summary>
            Gets negation.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Multiply">
            <summary>
            Multiplies value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Divide">
            <summary>
            Divides value by specified factor.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.Subtract">
            <summary>
            Subtracts one value from another.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.ArithmeticStruct`1.ApplyRules">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> 
            with specified arithmetic rules applied.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.op_Implicit(Xtensive.Arithmetic.Arithmetic{`0})~Xtensive.Arithmetic.ArithmeticStruct{`0}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Arithmetic.Arithmetic`1"/> to 
            <see cref="T:Xtensive.Arithmetic.ArithmeticStruct`1"/>.
            </summary>
            <param name="arithmetic">Arithmetic to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.#ctor(Xtensive.Arithmetic.Arithmetic{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="arithmetic">Arithmetic to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.ArithmeticStruct`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Add(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Negation(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Subtract(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Multiply(System.Byte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.Divide(System.Byte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.ByteArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.ByteArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Add(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Negation(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Subtract(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Multiply(System.SByte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.Divide(System.SByte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SByteArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SByteArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Add(System.Char,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Negation(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Subtract(System.Char,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Multiply(System.Char,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.Divide(System.Char,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.CharArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.CharArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Add(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Negation(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Subtract(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Multiply(System.Int16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.Divide(System.Int16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int16Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int16Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Add(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Negation(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Subtract(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Multiply(System.UInt16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.Divide(System.UInt16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt16Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt16Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Add(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Negation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Subtract(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Multiply(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.Divide(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int32Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int32Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Add(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Negation(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Subtract(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Multiply(System.UInt32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.Divide(System.UInt32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt32Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt32Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Add(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Negation(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Subtract(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Multiply(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.Divide(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.Int64Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.Int64Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Add(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Negation(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Subtract(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Multiply(System.UInt64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.Divide(System.UInt64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.UInt64Arithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.UInt64Arithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Add(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Negation(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Subtract(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Multiply(System.Decimal,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.Divide(System.Decimal,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DecimalArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DecimalArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Add(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Negation(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Subtract(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Multiply(System.Single,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.Divide(System.Single,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.SingleArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.SingleArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Add(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Negation(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Subtract(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Multiply(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.Divide(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.DoubleArithmetic.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.One">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.DoubleArithmetic.IsSigned">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Arithmetic.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogTemplate`1">
            <summary>
            Log template - simplifies logging,
            provides support for <see cref="T:Xtensive.Diagnostics.LogCaptureScope"/>.
            </summary>
            <typeparam name="T">Should always be the type of descendant.</typeparam>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.IsLogged(Xtensive.Diagnostics.LogEventTypes)">
            <see cref="M:Xtensive.Diagnostics.ILogBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Debug(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Debug(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Debug(System.Exception,System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Debug(System.Exception,System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Debug(System.Exception)">
            <see cref="M:Xtensive.Diagnostics.ILog.Debug(System.Exception)" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.DebugRegion(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.DebugRegion(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Info(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Info(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Info(System.Exception,System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Info(System.Exception,System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Info(System.Exception)">
            <see cref="M:Xtensive.Diagnostics.ILog.Info(System.Exception)" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.InfoRegion(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.InfoRegion(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Warning(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Warning(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Warning(System.Exception,System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Warning(System.Exception,System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Warning(System.Exception)">
            <see cref="M:Xtensive.Diagnostics.ILog.Warning(System.Exception)" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Error(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Error(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Error(System.Exception,System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.Error(System.Exception,System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.Error(System.Exception)">
            <see cref="M:Xtensive.Diagnostics.ILog.Error(System.Exception)" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.FatalError(System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.FatalError(System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.FatalError(System.Exception,System.String,System.Object[])">
            <see cref="M:Xtensive.Diagnostics.ILog.FatalError(System.Exception,System.String,System.Object[])" copy="true"/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogTemplate`1.FatalError(System.Exception)">
            <see cref="M:Xtensive.Diagnostics.ILog.FatalError(System.Exception)" copy="true"/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogTemplate`1.Instance">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> this type logs to.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.NullBehavior">
            <summary>
            Describes how arithmetics treats <see langword="null"/> in operations.   
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.Default">
            <summary>
            Default <see langword="null"/> behavior.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.ThreatNullAsZero">
            <summary>
            Treats <see langword="null"/> as <see langword="zero"/> in additions and subtractions.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.NullBehavior.ThreatNullAsNull">
            <summary>
            Treats <see langword="null"/> as is in additions and subtractions. If one of parameters is null, the result will be always null.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.OverflowBehavior">
            <summary>
            Describes arithmetic overflow behavior.   
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.Default">
            <summary>
            Default overflow behaviour.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.DenyOverflow">
            <summary>
            Overflow is suppressed.
            </summary>
        </member>
        <member name="F:Xtensive.Arithmetic.OverflowBehavior.AllowOverflow">
            <summary>
            Overflow is allowed.
            </summary>
        </member>
        <member name="T:Xtensive.Arithmetic.WrappingArithmetic`2">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/>s.
            </summary>
            <typeparam name="T">The type to provide arithmetic operations for.</typeparam>
            <typeparam name="TBase">Base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Arithmetic.WrappingArithmetic`2.BaseArithmetic">
            <summary>
            Arithmetic delegates for <typeparamref name="TBase"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Arithmetic.WrappingArithmetic`2.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">Arithmetic provider this instance is bound to.</param>
            <param name="rules">Arithmetic rules.</param>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Add(System.Nullable{`0},System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Negation(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Subtract(System.Nullable{`0},System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Multiply(System.Nullable{`0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.Divide(System.Nullable{`0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.CreateNew(Xtensive.Arithmetic.ArithmeticRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Arithmetic.NullableArithmetic`1.#ctor(Xtensive.Arithmetic.IArithmeticProvider,Xtensive.Arithmetic.ArithmeticRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Arithmetic.NullableArithmetic`1.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Arithmetic.NullableArithmetic`1.One">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.ThreadSafeCache`2">
            <summary>
            A thread-safe wrapper for any <see cref="T:Xtensive.Caching.ICache`2"/> implementation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Caching.ICache`2">
            <summary>
            Cache contract.
            </summary>
            <typeparam name="TKey">The type of the cache key.</typeparam>
            <typeparam name="TItem">The type of the item to cached.</typeparam>
        </member>
        <member name="T:Xtensive.Caching.IInvalidatable">
            <summary>
            Invalidatable object contract.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.IInvalidatable.Invalidate">
            <summary>
            Invalidates the state of this object.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.TryGetItem(`0,System.Boolean,`1@)">
            <summary>
            Tries to get cached item by its <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item to get.</param>
            <param name="markAsHit">Indicates whether the item with specified key
            should be marked as hit.</param>
            <param name="item">The item, if found.</param>
            <returns>
            <see langword="true" />, if the item is found;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Contains(`1)">
            <summary>
            Determines whether cache contains the specified item.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="True"/> if cache contains the specified item; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.ContainsKey(`0)">
            <summary>
            Determines whether cache contains the item with specified key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="True"/> if cache contains the item with specified key; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Add(`1)">
            <summary>
            Adds a new item to the cache. If item with this key is already in cache - replaces is with new item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Add(`1,System.Boolean)">
            <summary>
            Adds a new item to the cache.
            </summary>
            <param name="item">The item to add.</param>
            <param name="replaceIfExists">Indicates whether existing item must be replaced or not.</param>
            <returns>An existing, or a newly added item.</returns>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Remove(`1)">
            <summary>
            Removes the specified <paramref name="item"/> from the cache.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.RemoveKey(`0)">
            <summary>
            Removes the item with specified <paramref name="key"/> from the cache.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Xtensive.Caching.ICache`2.Clear">
            <summary>
             Clears the cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.Count">
            <summary>
            Gets the count of cached items.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.KeyExtractor">
            <summary>
            Gets the item key extractor.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ICache`2.Item(`0,System.Boolean)">
            <summary>
            Gets cached item by its <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item to get.</param>
            <param name="markAsHit">Indicates whether the item with specified key 
            should be marked as hit.</param>
            <returns>Item, if found; 
            otherwise, <see langword="default(TItem)"/>.</returns>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.#ctor(Xtensive.Caching.ICache{`0,`1},System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="chainedCache">The chained cache.</param>
            <param name="syncRoot">The sync root.</param>
        </member>
        <member name="M:Xtensive.Caching.ThreadSafeCache`2.#ctor(Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="chainedCache">The chained cache.</param>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.SyncRoot">
            <summary>
            Gets sync root for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.ThreadSafeCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ChangeNotifierEventArgs">
            <summary>
            Represents a set of information describing <see cref="T:Xtensive.Collections.IChangeNotifier"/> change.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ChangeNotifierEventArgs.#ctor(System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="changeInfo">The info.</param>
        </member>
        <member name="M:Xtensive.Collections.ChangeNotifierEventArgs.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ChangeNotifierEventArgs.ChangeInfo">
            <summary>
            Gets the object representing some additional change information.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Xtensive.Collections.ClassifiedCollection`2">
            <summary>
            A collection classifying all the items by their classes.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.IClassifiedCollection`2">
            <summary>
            Contract for collection classifying all the items by their classes.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the range of items.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.GetItems(`0)">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <param name="class">The class of items to get.</param>
            <returns>A sequence of items of the specified class.</returns>
        </member>
        <member name="M:Xtensive.Collections.IClassifiedCollection`2.GetClasses">
            <summary>
            Gets the classes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.IsSet">
            <summary>
            Gets a value indicating whether this instance behaves like a set.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.ClassCount">
            <summary>
            Gets the count of classes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IClassifiedCollection`2.Classifier">
            <summary>
            Gets the classifier function.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.GetItems(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.GetClasses">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.#ctor(System.Func{`1,`0[]})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="classifier">The classifier function.</param>
        </member>
        <member name="M:Xtensive.Collections.ClassifiedCollection`2.#ctor(System.Func{`1,`0[]},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="classifier">The classifier function.</param>
            <param name="isSet">Indicates whether this instance behaves like a set.</param>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.IsSet">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.ClassCount">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ClassifiedCollection`2.Classifier">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.CollectionChangeNotifierEventArgs`1">
            <summary>
            Represents class that contains <see cref="T:Xtensive.Collections.ICollectionChangeNotifier`1"/> related event data.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.Index">
            <summary>
            Gets the item's index if any.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Xtensive.Collections.CollectionChangeNotifierEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Xtensive.Collections.IChangeNotifier">
            <summary>
            An object exposing change related events contract.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.IChangeNotifier.Changing">
            <summary>
            Occurs when this instance is about to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.IChangeNotifier.Changed">
            <summary>
            Occurs when this instance is changed.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ICollectionChangeNotifier`1">
            <summary>
            A collection exposing the collection change events contract.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Clearing">
            <summary>
            Occurs when collection is intended to be cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Cleared">
            <summary>
            Occurs when collection was cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Validate">
            <summary>
            Occurs when collection validates new item.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Inserting">
            <summary>
            Occurs when item is inserting into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Inserted">
            <summary>
            Occurs when item was inserted into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Removing">
            <summary>
            Occurs when item is removing from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.Removed">
            <summary>
            Occurs when item was removed from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.ItemChanging">
            <summary>
            Occurs when item is about to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.ICollectionChangeNotifier`1.ItemChanged">
            <summary>
            Occurs when item is changed.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.LazyDictionary`2">
            <summary>
            Lazy dictionary.
            A dictionary-like structure allocating internal <see cref="T:System.Collections.Generic.Dictionary`2"/> in lazy fashion.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.LinkedList`1">
            <summary>
            Single-linked immutable list.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.AppendHead(`0)">
            <summary>
            Appends the head value and returns new instance of <see cref="T:Xtensive.Collections.LinkedList`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>New instance of <see cref="T:Xtensive.Collections.LinkedList`1"/> with provided <paramref name="value"/> as a head node.</returns>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.#ctor(`0)">
            <summary>
             <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source elements.</param>
        </member>
        <member name="M:Xtensive.Collections.LinkedList`1.#cctor">
            <summary>
             <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.TypeInitializer" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Collections.LinkedList`1.Empty">
            <summary>
            Gets the empty <see cref="T:Xtensive.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.LinkedList`1.Head">
            <summary>
            Gets the value of the head node.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.LinkedList`1.Tail">
            <summary>
            Gets the tail of the current insttance.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.LinkedList`1.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.NativeTypeClassifier`1">
            <summary>
            Native type-based classifier.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.TypeClassifier`1">
            <summary>
            Type-based classifier.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.GetItems``1">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <typeparam name="TClass">The class of items to get.</typeparam>
            <returns>
            A sequence of items of the specified class.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.#ctor(System.Func{`0,System.Type[]})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeClassifier`1.#ctor(System.Func{`0,System.Type[]},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.GetItems``1">
            <summary>
            Gets all the items of the specified class.
            </summary>
            <typeparam name="TClass">The class of items to get.</typeparam>
            <returns>
            A sequence of items of the specified class.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.#ctor(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="exactType">If set to <see langword="true"/>, exact item type is used as classifier;
            otherwise all its base types and interfaces are used.</param>
        </member>
        <member name="M:Xtensive.Collections.NativeTypeClassifier`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="exactType">If set to <see langword="true"/>, exact item type is used as classifier;
            otherwise all its base types and interfaces are used.</param>
            <param name="isSet">Indicates whether this instance behaves like a set.</param>
        </member>
        <member name="T:Xtensive.Core.Disposable">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Disposable.op_BitwiseAnd(Xtensive.Core.Disposable,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable.#ctor(System.Action{System.Boolean})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable.Dispose(System.Boolean)">
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)" copy="true"/>
        </member>
        <member name="M:Xtensive.Core.Disposable.Dispose">
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true"/>
        </member>
        <member name="T:Xtensive.Core.DisposableSet">
            <summary>
            Ensures all the <see cref="T:System.IDisposable"/> objects added to it are disposed
            on disposal of <see cref="T:Xtensive.Core.DisposableSet"/> instance.
            </summary>
            <remarks>
            <note>
            <see cref="M:System.IDisposable.Dispose"/> methods are invoked in backward order.
            </note>
            </remarks>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.Add(System.IDisposable)">
            <summary>
            Adds an <see cref="T:System.IDisposable"/> object to the set.
            </summary>
            <param name="disposable">The object to add.</param>
            <returns><see langword="True"/>, if object is successfully added;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.op_BitwiseAnd(Xtensive.Core.DisposableSet,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.DisposableSet"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.#ctor(System.Collections.IEnumerable)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="initialContent">The initial content.</param>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.DisposableSet.System#IDisposable#Dispose">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose"/>
        </member>
        <member name="T:Xtensive.Core.Disposable`2">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            Allows to store and pass two parameters to this action.
            </summary>
            <typeparam name="T1">First parameter type.</typeparam>
            <typeparam name="T2">Second parameter type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.op_BitwiseAnd(Xtensive.Core.Disposable{`0,`1},System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable`2"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.#ctor(`0,`1,System.Action{System.Boolean,`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parameter1">First parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="parameter2">Second parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.Disposable`2.Dispose">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Core.Disposable`1">
            <summary>
            A disposable type allowing to execute custom
            <see cref="T:System.Action"/> on its disposal.
            Allows to store and pass one parameter to this action.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.op_BitwiseAnd(Xtensive.Core.Disposable{`0},System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.Disposable`1"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.#ctor(`0,System.Action{System.Boolean,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parameter">Parameter to pass to the <paramref name="onDispose"/> action.</param>
            <param name="onDispose">Action to execute on disposal.</param>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.Disposable`1.Dispose">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Core.JoiningDisposable">
            <summary>
            Disposes two <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.op_BitwiseAnd(Xtensive.Core.JoiningDisposable,System.IDisposable)">
            <summary>
            Joins the <see cref="T:Xtensive.Core.JoiningDisposable"/> and <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="first">The first disposable to join.</param>
            <param name="second">The second disposable to join.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.#ctor(System.IDisposable,System.IDisposable)">
            <summary>
              <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="disposable1">The first disposable.</param>
            <param name="disposable2">The second disposable.</param>
        </member>
        <member name="M:Xtensive.Core.JoiningDisposable.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Core.JoiningDisposable.First">
            <summary>
            Gets the first object to dispose.
            </summary>
        </member>
        <member name="P:Xtensive.Core.JoiningDisposable.Second">
            <summary>
            Gets the second object to dispose.
            </summary>
        </member>
        <member name="T:Xtensive.Core.SimpleXmlSerializer`1">
            <summary>
            Convenient wrapper for <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.SimpleXmlSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes value of <typeparamref name="T"/> from string.
            </summary>
            <param name="value">Serialized instance.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Xtensive.Core.SimpleXmlSerializer`1.Serialize(`0)">
            <summary>
            Serializes value of <typeparamref name="T"/> to string.
            </summary>
            <param name="value">Instance to serialize.</param>
            <returns>Serialized instance.</returns>
        </member>
        <member name="T:Xtensive.Diagnostics.DebugOnlyConsoleLog">
            <summary>
            "Debug only" console log implementation.
            This log writes out to console only when debugger is attached to the current process;
            otherwise is does nothing.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.TextualLogImplementationBase">
            <summary>
            Base class for logs producing textual output.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.RealLogImplementationBase">
            <summary>
            Base class for any <see cref="T:Xtensive.Diagnostics.IRealLog"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.IRealLog">
            <summary>
            Real log implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.ILogBase">
            <summary>
            Common <see cref="T:Xtensive.Diagnostics.ILog"/> and <see cref="T:Xtensive.Diagnostics.IRealLog"/> methods and properties.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.ILogBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)">
            <summary>
            Determines whether the specified event type is logged.
            </summary>
            <param name="eventType">Type of the event to check.</param>
            <returns><see langword="True"/> if the specified event type is logged; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.ILogBase.UpdateCachedProperties">
            <summary>
            Updates cached log properties.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.ILogBase.Name">
            <summary>
            Gets the name of the log.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.ILogBase.Text">
            <summary>
            Gets the logged text.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.ILogBase.LoggedEventTypes">
            <summary>
            Gets the event types this log logs.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.IRealLog.LogEvent(Xtensive.Diagnostics.LogEventTypes,System.Object,System.Exception,Xtensive.Diagnostics.IRealLog,Xtensive.Diagnostics.LogCaptureScope)">
            <summary>
            Logs the event.
            </summary>
            <param name="eventType">The type of event to log.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="sentTo">The original log, to which message was sent 
            (useful e.g. when <see cref="T:Xtensive.Diagnostics.LogCaptureScope"/> is used to capture the events sent to another log).</param>
            <param name="capturedBy">The scope that captured the event, if any.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.IRealLog.Log">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> object wrapping this <see cref="T:Xtensive.Diagnostics.IRealLog"/>.
            </summary>
        </member>
        <member name="E:Xtensive.Diagnostics.IRealLog.OnLogEvent">
            <summary>
            Raised on any <see cref="M:Xtensive.Diagnostics.IRealLog.LogEvent(Xtensive.Diagnostics.LogEventTypes,System.Object,System.Exception,Xtensive.Diagnostics.IRealLog,Xtensive.Diagnostics.LogCaptureScope)"/> call.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.RealLogImplementationBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.RealLogImplementationBase.LogEvent(Xtensive.Diagnostics.LogEventTypes,System.Object,System.Exception,Xtensive.Diagnostics.IRealLog,Xtensive.Diagnostics.LogCaptureScope)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.RealLogImplementationBase.UpdateCachedProperties">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.RealLogImplementationBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.RealLogImplementationBase.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.RealLogImplementationBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.RealLogImplementationBase.Text">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.RealLogImplementationBase.Log">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.RealLogImplementationBase.LoggedEventTypes">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Diagnostics.RealLogImplementationBase.OnLogEvent">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.TextualLogImplementationBase.LogEvent(Xtensive.Diagnostics.LogEventTypes,System.Object,System.Exception,Xtensive.Diagnostics.IRealLog,Xtensive.Diagnostics.LogCaptureScope)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.TextualLogImplementationBase.LogEventText(System.String)">
            <summary>
            Logs the formatted event text.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.TextualLogImplementationBase.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.TextualLogImplementationBase.LoggedEventTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.TextualLogImplementationBase.Format">
            <summary>
            Gets the log format.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.TextualLogImplementationBase.FormatString">
            <summary>
            Gets or sets the custom format string of logged messages.
            Setting value of this property sets <see cref="P:Xtensive.Diagnostics.TextualLogImplementationBase.Format"/>
            to <see cref="F:Xtensive.Diagnostics.LogFormat.Custom"/> as well.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.DebugOnlyConsoleLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.DebugOnlyConsoleLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Edge`1">
            <summary>
            A connection between two graph <see cref="T:Xtensive.Collections.Graphs.Node"/>s with value.
            </summary>
            <typeparam name="TValue">Edge value.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Edge">
            <summary>
            A connection between two graph <see cref="T:Xtensive.Collections.Graphs.Node"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.Attach">
            <summary>
            Attaches the edge to source and target nodes.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.Detach">
            <summary>
            Detaches the edge from source and target nodes.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.ToString">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge.#ctor(Xtensive.Collections.Graphs.Node,Xtensive.Collections.Graphs.Node)">
            <summary>
            Creates new graph edge instance and <see cref="M:Xtensive.Collections.Graphs.Edge.Attach"/>es it to nodes.
            </summary>
            <param name="source">Source node.</param>
            <param name="target">Target node.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.UntypedValue">
            <summary>
            Gets edge value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.Source">
            <summary>
            Gets or sets edge source.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.Target">
            <summary>
            Gets or sets edge target.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge.IsAttached">
            <summary>
            Indicates whether this edge is attached to its source and target nodes.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Edge value.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Edge`1.#ctor(Xtensive.Collections.Graphs.Node,Xtensive.Collections.Graphs.Node,`0)">
            <summary>
            Creates new graph edge instance and <see cref="M:Xtensive.Collections.Graphs.Edge.Attach"/>es it to nodes.
            </summary>
            <param name="source">Source node.</param>
            <param name="target">Target node.</param>
            <param name="value">Edge value.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge`1.Value">
            <summary>
            Gets or sets edge value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Edge`1.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Node`1">
            <summary>
            Graph node with value. 
            </summary>
            <typeparam name="TValue">Node value.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Node">
            <summary>
            Graph node. 
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node.ToString">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.HasIncomingEdges">
            <summary>
            Indicates whether this node has incoming edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.HasOutgoingEdges">
            <summary>
            Indicates whether this node has outgoing edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.IncomingEdges">
            <summary>
            Gets incoming edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.OutgoingEdges">
            <summary>
            Gets outgoing edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node.Edges">
            <summary>
            Gets all node edges.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Node`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Node value.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node`1.Value">
            <summary>
            Node value.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Node`1.UntypedValue">
            <summary>
            Gets node value.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.Graph`2">
            <summary>
            A graph.
            </summary>
            <typeparam name="TNode">Node type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.CreateMutableCopy">
            <summary>
            Creates a mutable copy of the graph.
            Mutable copy of the graph is a graph having identical structure (e.g. set of nodes and edges),
            but values of its nodes and edges points to appropriate original nodes and edges from the graph. 
            </summary>
            <returns>A mutable copy of the graph.</returns>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.AddEdges(System.Func{`0,`0,`1})">
            <summary>
            Creates and attaches outgoing (and consequently, incoming) edges in the graph using specified <paramref name="connector"/>.
            </summary>
            <param name="connector">Connector delegate. 
            Must return a new edge, is there is an edge pointing from its first argument to the second one.
            Otherwise is must return null.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="nodes">Graph nodes.</param>
        </member>
        <member name="M:Xtensive.Collections.Graphs.Graph`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="nodes">Graph nodes.</param>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Graph`2.Nodes">
            <summary>
            Get a list of graph nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.Graph`2.Edges">
            <summary>
            Gets a sequence of graph edges.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.TopologicalSortResult`2">
            <summary>
            Topological sorter result.
            </summary>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TNode">Node type.</typeparam>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.SortedNodes">
            <summary>
            Sorted nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.LoopNodes">
            <summary>
            Loop nodes.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.BrokenEdges">
            <summary>
            Broken edges.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.Graphs.TopologicalSortResult`2.HasLoops">
            <summary>
            Indicates whether result has loops.
            </summary>
        </member>
        <member name="T:Xtensive.Caching.InfiniteCache`2">
            <summary>
            An unlimited set of items.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.#ctor(System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.InfiniteCache`2.#ctor(System.Int32,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="capacity">The capacity of cache.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor"/> property value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>capacity</c> is out of range.</exception>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.InfiniteCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.LruCache`2">
            <summary>
            A set of items limited by the maximal amount of memory it can use, or by any other measure.
            Stores as many most frequently accessed items in memory as long as it is possible
            while maintaining the total size of cached items less or equal to <see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/>.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IHasSize">
            <summary>
            Describes an object that able to calculate its own size.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasSize.Size">
            <summary>
            Gets size of the instance in bytes.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},System.Func{`1,System.Int64})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="sizeExtractor"><see cref="P:Xtensive.Caching.LruCache`2.SizeExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`2.#ctor(System.Int64,System.Converter{`1,`0},System.Func{`1,System.Int64},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`2.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`2.KeyExtractor"/> property value.</param>
            <param name="sizeExtractor"><see cref="P:Xtensive.Caching.LruCache`2.SizeExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.SizeExtractor">
            <summary>
            Gets the size extractor delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Size">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.WeakestCache`2">
            <summary>
            A set of weekly referenced items identified by weekly referenced keys.
            Stores the references while the underlying keys or items aren't collected by GC.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="T:Xtensive.Core.IHasGarbage">
            <summary>
            Describes a class that might have some "garbage" inside it during the operation.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IHasGarbage.CollectGarbage">
            <summary>
            Collects the garbage.
            </summary>
            <remarks>
            <note type="caution" id="Caution">This method usually takes the time proportional to the size of the object it is invoked on.</note>
            </remarks>
        </member>
        <member name="F:Xtensive.Caching.WeakestCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.WeakestCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.WeakestCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.#ctor(System.Boolean,System.Boolean,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="trackKeyResurrection">The <see cref="P:Xtensive.Caching.WeakestCache`2.TrackKeyResurrection"/> property value.</param>
            <param name="trackItemResurrection">The <see cref="P:Xtensive.Caching.WeakestCache`2.TrackItemResurrection"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.WeakestCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Dispose">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakestCache`2.Finalize">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dtor" copy="true"/>
            /// </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.TrackKeyResurrection">
            <summary>
            Gets a value indicating whether this cache tracks key resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.TrackItemResurrection">
            <summary>
            Gets a value indicating whether this cache tracks item resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakestCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Caching.WeakCache`2">
            <summary>
            A set of weekly referenced items.
            Stores the references while the underlying items aren't collected by GC.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="F:Xtensive.Caching.WeakCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.WeakCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.WeakCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.#ctor(System.Boolean,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="trackResurrection">The <see cref="P:Xtensive.Caching.WeakCache`2.TrackResurrection"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.WeakCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Dispose">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Caching.WeakCache`2.Finalize">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dtor" copy="true"/>
            /// </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.TrackResurrection">
            <summary>
            Gets a value indicating whether this cache tracks resurrection.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.WeakCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.IOperationSequence">
            <summary>
            General operation sequence contract.
            Allows to replay the operations contained in it later.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IOperationSequence.Replay(System.Object)">
            <summary>
            Replays the operations contained in sequence on <paramref name="target"/> object.
            </summary>
            <param name="target">The target object to replay the sequence at.</param>
            <returns>The result of execution.</returns>
        </member>
        <member name="P:Xtensive.Core.IOperationSequence.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.ServiceConstructorAttribute">
            <summary>
            An attribute tagging default service constructor to use.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionHandler">
            <summary>
            An abstract base class for any <see cref="T:Xtensive.Modelling.Actions.IActionHandler"/> implementor.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.IActionHandler">
            <summary>
            Action handler contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Xtensive.Core.IContext`1">
            <summary>
            Context contract.
            </summary>
            <typeparam name="TScope">The type of <see cref="T:Xtensive.Core.Scope`1"/> of the context.</typeparam>
            <seealso cref="T:Xtensive.Core.Scope`1"/>
        </member>
        <member name="T:Xtensive.Core.IContext">
            <summary>
            Base interface for any <see cref="T:Xtensive.Core.IContext`1"/> contract.
            </summary>
            <seealso cref="T:Xtensive.Core.IContext`1"/>
            <seealso cref="T:Xtensive.Core.Scope`1"/>
        </member>
        <member name="M:Xtensive.Core.IContext.Activate">
            <summary>
            Activates the current context.
            </summary>
            <returns><see cref="T:System.IDisposable"/> object (normally - <see cref="T:Xtensive.Core.Scope`1"/> descendant)
            that can be used to deactivate the context by disposing it.</returns>
            <seealso cref="P:Xtensive.Core.IContext.IsActive"/>
        </member>
        <member name="P:Xtensive.Core.IContext.IsActive">
            <summary>
            Indicates whether current context is active.
            </summary>
            <seealso cref="M:Xtensive.Core.IContext.Activate"/>
        </member>
        <member name="M:Xtensive.Core.IContext`1.Activate">
            <summary>
            Activates the current context.
            </summary>
            <returns><typeparamref name="TScope"/> object (normally - <see cref="T:Xtensive.Core.Scope`1"/> descendant)
            that can be used to deactivate the context by disposing it.</returns>
            <seealso cref="P:Xtensive.Core.IContext.IsActive"/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandler.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandler.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandler.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionHandlerScope">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/> activation scope.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Scope`1">
            <summary>
            Provides access to the thread-bound stack of contextual information 
            (<typeparamref name="TContext"/>).
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Activate(`0)">
            <summary>
            Initializes the scope.
            </summary>
            <param name="newContext">The new context.</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:Xtensive.Core.Scope`1.Context"/> is already initialized.</exception>
        </member>
        <member name="M:Xtensive.Core.Scope`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="service">The context of this scope.</param>
        </member>
        <member name="M:Xtensive.Core.Scope`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            Does not invoke <see cref="M:Xtensive.Core.Scope`1.Activate(`0)"/> method.
            </summary>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xtensive.Core.Scope`1.Dispose">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Current scope differs from this one.</exception>
        </member>
        <member name="P:Xtensive.Core.Scope`1.CurrentContext">
            <summary>
            Gets the current context of this type of scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.CurrentScope">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.Context">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.OuterScope">
            <summary>
            Gets the outer <see cref="T:Xtensive.Core.Scope`1"/> of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Scope`1.IsNested">
            <summary>
            Gets a value indicating whether this scope is nested to another one.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionHandlerScope.#ctor(Xtensive.Modelling.Actions.ActionHandler)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandlerScope.CurrentHandler">
            <summary>
            Gets the current <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionHandlerScope.Handler">
            <summary>
            Gets the associated <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionScope">
            <summary>
            Defines the scope for the single action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.Commit">
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Actions.ActionScope.Action"/> is not initialized.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.IsCommitted">
            <summary>
            Gets or sets a value indicating whether this instance is committed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.IsCommittable">
            <summary>
            Gets a value indicating whether this scope is committable (i.e. its 
            <see cref="P:Xtensive.Modelling.Actions.ActionScope.Action"/> will be added to <see cref="P:Xtensive.Modelling.Actions.ActionScope.Sequence"/> after
            <see cref="M:Xtensive.Modelling.Actions.ActionScope.Commit"/> and <see cref="M:Xtensive.Modelling.Actions.ActionScope.Dispose"/> calls).
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.Sequence">
            <summary>
            Gets the sequence this instance is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionScope.Action">
            <summary>
            Gets or sets the action this instance commits.
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="M:Xtensive.Modelling.Actions.ActionScope.Commit"/> method is already called.</exception>
        </member>
        <member name="T:Xtensive.Modelling.Actions.ActionSequence">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> sequence implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Core.LockableBase">
            <summary>
            Base class for <see cref="T:Xtensive.Core.ILockable"/> implementors.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ILockable">
            <summary>
            Lockable contract.
            Should be implemented by classes, that can
            became immutable at some point of time.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ILockable.Lock">
            <summary>
            Locks the instance (non-recursively).
            </summary>
        </member>
        <member name="M:Xtensive.Core.ILockable.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked as well.</param>
        </member>
        <member name="P:Xtensive.Core.ILockable.IsLocked">
            <summary>
            Determines whether the instance of class implementing this interface
            is immutable (locked).
            </summary>
            <remarks>
            The implementor of setter of this property should consider, that this
            property should not change its value from <see langword="true"/> to 
            <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Lock">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.LockableBase.Unlock">
            <summary>
            Unlocks the object.
            Sets <see cref="P:Xtensive.Core.LockableBase.IsLocked"/> to <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableBase.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableBase.#ctor(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isLocked">Initial <see cref="P:Xtensive.Core.LockableBase.IsLocked"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.LockableBase.IsLocked">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Actions.IActionSequence">
            <summary>
            <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> sequence contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.LogAction">
            <summary>
            Appends a new action to this sequence.
            </summary>
            <returns>An <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to append it.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Add(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Adds the specified action to the sequence.
            </summary>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Add(System.Collections.Generic.IEnumerable{Xtensive.Modelling.Actions.NodeAction})">
            <summary>
            Adds the specified action sequence to the sequence.
            </summary>
            <param name="actions">The sequence of actions to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Apply(Xtensive.Modelling.IModel)">
            <summary>
            Applies all the actions from the sequence to specified model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.IActionSequence.Flatten">
            <summary>
            Flattens all the <see cref="T:Xtensive.Modelling.Actions.GroupingNodeAction"/>s from this instance.
            </summary>
            <returns>Flattened action sequence.</returns>
        </member>
        <member name="P:Xtensive.Modelling.Actions.IActionSequence.CurrentScope">
            <summary>
            Gets the current action scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.LogAction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Add(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Add(System.Collections.Generic.IEnumerable{Xtensive.Modelling.Actions.NodeAction})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Apply(Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.Flatten">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.ActionSequence.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.ActionSequence.CurrentScope">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Actions.CreateNodeAction">
            <summary>
            Describes node creation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.NodeAction">
            <summary>
            Abstract base class for any node action.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.INodeAction">
            <summary>
            Node action contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.INodeAction.Execute(Xtensive.Modelling.IModel)">
            <summary>
            Applies the action to the specified model.
            </summary>
            <param name="model">The model to apply the action to.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.INodeAction.Path">
            <summary>
            Gets or sets the path of the node this action is applied to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.INodeAction.Difference">
            <summary>
            Gets or sets the difference this action is created for.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.Execute(Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <summary>
            Actually executed <see cref="M:Xtensive.Modelling.Actions.NodeAction.Execute(Xtensive.Modelling.IModel)"/> method call.
            </summary>
            <param name="model">The model.</param>
            <param name="item"><see cref="P:Xtensive.Modelling.Actions.NodeAction.Path"/> resolution result.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.EscapeName(System.String)">
            <summary>
            Escapes the name in path.
            </summary>
            <param name="name">The name to escape.</param>
            <returns>Escaped name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetActionName">
            <summary>
            Gets the name of the action for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting.
            </summary>
            <returns>The name of the action.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <summary>
            Gets the parameters for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting.
            </summary>
            <returns>The sequence of parameters.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.GetNestedActions">
            <summary>
            Gets the sequence of nested actions for <see cref="M:Xtensive.Modelling.Actions.NodeAction.ToString"/> formatting, if any.
            </summary>
            <returns>The sequence of nested actions.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NodeAction.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NodeAction.Path">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NodeAction.Difference">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.TryConstructor(Xtensive.Modelling.IModel,System.Object[])">
            <summary>
            Tries to invoke node constructor with the specified set of arguments.
            </summary>
            <param name="model">The model to pass as the first argument.</param>
            <param name="arguments">The other arguments.</param>
            <returns>Created node, if the constructor was successfully bound;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.CreateNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Type">
            <summary>
            Gets or sets the node type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Name">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Index">
            <summary>
            Gets or sets the node index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Xtensive.Modelling.Actions.CreateNodeAction.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.DataAction">
            <summary>
            Change data action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.DataAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.DataAction.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.DataAction.DataHint">
            <summary>
            Gets or sets the data hint described data operation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.GroupingNodeAction">
            <summary>
            A grouping node action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Add(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Adds the specified action to the <see cref="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions"/> sequence.
            </summary>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Flatten">
            <summary>
            Flattens all the <see cref="T:Xtensive.Modelling.Actions.GroupingNodeAction"/>s from <see cref="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions"/> sequence.
            </summary>
            <returns>Flattened sequence of nested actions.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.GetNestedActions">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.GroupingNodeAction.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.GroupingNodeAction.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.GroupingNodeAction.Actions">
            <summary>
            Gets the list of nested actions.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.MoveNodeAction">
            <summary>
            Any kinds of node movement (parent changed, name changed or index changed).
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.MoveNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Actions.MoveNodeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Parent">
            <summary>
            Gets or sets the node parent path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Name">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.Index">
            <summary>
            Gets or sets the node index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Actions.MoveNodeAction.NewPath">
            <summary>
            Gets or sets the new node path.
            </summary>
            <value>The new path.</value>
        </member>
        <member name="T:Xtensive.Modelling.Actions.NullActionHandler">
            <summary>
            An <see cref="T:Xtensive.Modelling.Actions.ActionHandler"/> that does nothing.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.NullActionHandler.Execute(Xtensive.Modelling.Actions.NodeAction)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.NullActionHandler.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.PathNodeReference">
            <summary>
            Path node reference.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Get(System.Object)">
            <summary>
            Gets the <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> to the specified source,
            if the source is <see cref="T:Xtensive.Modelling.IPathNode"/>;
            otherwise, returns <paramref name="source"/>.
            </summary>
            <param name="source">The source.</param>
            <returns><see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> to the specified source,
            if the source is <see cref="T:Xtensive.Modelling.IPathNode"/>;
            otherwise, returns <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Resolve(Xtensive.Modelling.IModel,System.Object)">
            <summary>
            Resolves the specified object (possibly <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/>).
            Reverts the effect of <see cref="M:Xtensive.Modelling.Actions.PathNodeReference.Get(System.Object)"/> method.
            </summary>
            <param name="model">The model.</param>
            <param name="source">The object to resolve.</param>
            <returns>Either original object, or
            resolved <see cref="T:Xtensive.Modelling.Actions.PathNodeReference"/> (<see cref="T:Xtensive.Modelling.IPathNode"/>)</returns>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Equals(Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.op_Equality(Xtensive.Modelling.Actions.PathNodeReference,Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.op_Inequality(Xtensive.Modelling.Actions.PathNodeReference,Xtensive.Modelling.Actions.PathNodeReference)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PathNodeReference.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="path">The <see cref="P:Xtensive.Modelling.Actions.PathNodeReference.Path"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Actions.PathNodeReference.Path">
            <summary>
            Gets the path to the node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.PropertyChangeAction">
            <summary>
            Property change action.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.GetParameters(System.Collections.Generic.List{Xtensive.Core.Pair{System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Actions.PropertyChangeAction.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Actions.PropertyChangeAction.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Actions.RemoveNodeAction">
            <summary>
            Describes node removal.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Actions.RemoveNodeAction.PerformExecute(Xtensive.Modelling.IModel,Xtensive.Modelling.IPathNode)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.DataDependentAttribute">
            <summary>
            Data dependent node marker.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.PropertyAttribute">
            <summary>
            Node property marker.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.Priority">
            <summary>
            Gets or sets the comparison \ modification priority.
            The lower priority the less dependent property is.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IgnoreInComparison">
            <summary>
            Gets or sets a value indicating whether underlying property must be ignored in comparison.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.CaseInsensitiveComparison">
            <summary>
            Gets or sets a value indicating whether property values are compared case insensitively.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IsImmutable">
            <summary>
            Gets or sets a value indicating whether underlying property value must be re-created
            rather than created &amp; processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.IsVolatile">
            <summary>
            Gets or sets a value indicating whether underlying property must be 
            ignored during recreation of parent atomic property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.RecreateParent">
            <summary>
            Gets or sets a value indicating whether property owner should be recreated on property value change.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Attributes.PropertyAttribute.DependencyRootType">
            <summary>
            Gets or sets the dependency root type.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Attributes.SystemPropertyAttribute">
            <summary>
            System property marker.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Attributes.SystemPropertyAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.CloningContext">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> cloning context.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.AddFixup(System.Action)">
            <summary>
            Adds the new fixup to fixups sequence.
            </summary>
            <param name="fixup">The fixup to add.</param>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.ClearFixups">
            <summary>
            Clears all the fixups.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.ApplyFixups">
            <summary>
            Applies all the fixups.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.CloningContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.Fixups">
            <summary>
            Gets all the added fixups.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.Current">
            <summary>
            Gets the current validation context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.CloningScope">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> cloning scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.Open">
            <summary>
            Opens a cloning context and scope.
            </summary>
            <returns>A new <see cref="T:Xtensive.Modelling.CloningScope"/>, if there is no 
            <see cref="P:Xtensive.Modelling.CloningContext.Current"/> cloning context;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.#ctor(Xtensive.Modelling.CloningContext)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Modelling.CloningScope.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.CloningScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.CloningScope.Context">
            <summary>
            Gets the associated cloning context.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Comparer">
            <summary>
            Implementation of <see cref="T:Xtensive.Modelling.Comparison.IComparer"/> for <see cref="T:Xtensive.Modelling.Node"/> comparison.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IComparer">
            <summary>
            Compares two models.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IComparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <summary>
            Gets the difference between <paramref name="source"/> 
            and <paramref name="target"/> models.
            </summary>
            <param name="source">The source model.</param>
            <param name="target">The target model.</param>
            <param name="hints">The comparison hints.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> models;
            <see langword="null" />, if none.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IComparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <summary>
            Gets the difference between <paramref name="source"/> 
            and <paramref name="target"/> models.
            </summary>
            <param name="source">The source model.</param>
            <param name="target">The target model.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> models;
            <see langword="null" />, if none.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Compare(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Visit(System.Object,System.Object)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.Visit(System.Type,System.Object,System.Object)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitNode(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            Visits specified <see cref="T:Xtensive.Modelling.Node"/> objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            Difference between <paramref name="source"/>
            and <paramref name="target"/> objects.
            <see langword="null"/>, if they're equal.
            </returns>
            <exception cref="T:System.InvalidOperationException">Both source and target are <see langword="null"/>.</exception>
            <exception cref="T:System.NullReferenceException">Current difference is not <see cref="T:Xtensive.Modelling.Comparison.NodeDifference"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.BuildMovementInfo(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            Builds the <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> by specific source and target nodes.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Movement info.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.CompareProperties(Xtensive.Modelling.Node,Xtensive.Modelling.Node,Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Compares source and target node properties.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetReferencedPropertyDifference(System.Object,System.Object,Xtensive.Modelling.Node,System.String)">
            <summary>
            Gets the referenced property difference.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetValue">The target value.</param>
            <param name="target">The target.</param>
            <param name="property">The property.</param>
            <returns>Difference.</returns>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetPropertyDifferences(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Gets the property differences for each property of type <see cref="T:Xtensive.Modelling.Node"/> or <see cref="T:Xtensive.Modelling.NodeCollection"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>Property differences set.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitNodeCollection(Xtensive.Modelling.NodeCollection,Xtensive.Modelling.NodeCollection)">
            <summary>
            Visits specified <see cref="T:Xtensive.Modelling.NodeCollection"/> objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null"/>, if they're equal.</returns>
            <exception cref="T:System.InvalidOperationException">Both source and target are <see langword="null"/>.</exception>
            <exception cref="T:System.NullReferenceException">Current difference is not <see cref="T:Xtensive.Modelling.Comparison.NodeCollectionDifference"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.VisitObject(System.Object,System.Object)">
            <summary>
            Visits specified objects.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Difference between <paramref name="source"/> 
            and <paramref name="target"/> objects.
            <see langword="null" />, if they're equal.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsReference(System.Object,System.Object)">
            <summary>
            Determines whether the specified source is reference.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            <see langword="true"/> if the specified source is reference; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsRelocated(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Determines whether the specified difference is relocated.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
             <see langword="true"/> if the specified difference is relocated; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasChangedNodeProperties(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Determines whether difference contains node property 
            with <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> equals to <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if difference contains changed node properties; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasChanges(Xtensive.Modelling.Comparison.Difference,System.Boolean,System.Boolean)">
            <summary>
            Determines whether difference contains node property 
            with <see cref="T:Xtensive.Modelling.Comparison.MovementInfo"/> equals to <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
            <param name="difference">The difference.</param>
            <param name="isDataDependent"></param>
            <param name="propertyOwnerIsImmutable"></param>
            <returns>
            <see langword="true"/> if difference contains changed node properties; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsDependOnData(Xtensive.Modelling.Node)">
            <summary>
            Determines whether specified node is depend on data changing.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <see langword="true"/> if node is depend on data changing; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsImmutable(Xtensive.Modelling.Node)">
            <summary>
            Determines whether specified node is immutable.
            </summary>
            <returns><see langword="true"/> if the specified node is immutable; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetNodeComparisonKey(Xtensive.Modelling.Node)">
            <summary>
            Extracts the comparison key, that used to find associations 
            between old and new <see cref="T:Xtensive.Modelling.NodeCollection"/> items.
            </summary>
            <param name="node">The node to get the comparison key for.</param>
            <returns>Comparison key for the specified node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasDependencies(Xtensive.Modelling.Node)">
            <summary>
            Determines whether the specified node has dependencies 
            and must be removed on <see cref="F:Xtensive.Modelling.Comparison.UpgradeStage.Cleanup"/>.
            </summary>
            <param name="source">The source node.</param>
            <returns>
            <see langword="true"/> if the specified source has dependencies; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.HasDataChangeHint(Xtensive.Modelling.Node)">
            <summary>
            Determines whether <see cref="P:Xtensive.Modelling.Comparison.Comparer.Hints"/> contains data change hints.
            </summary>
            <param name="source">The source node.</param>
            <returns>
            <see langword="true"/> if data change hints exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.IsIgnored(System.Object)">
            <summary>
            Determines whether the specified value must be ignored in comparison.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if the specified value must be ignored; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.TryActivate``1(``0,``0,System.Func{``0,``0,Xtensive.Modelling.Comparison.Difference})">
            <summary>
            Tries to create the new <see cref="T:Xtensive.Modelling.Comparison.ComparisonContext"/> 
            for the specified <paramref name="source"/>
            and <paramref name="target"/> objects and activate it.
            </summary>
            <typeparam name="T">The type of <paramref name="source"/> and <paramref name="target"/> objects.</typeparam>
            <param name="source">The source object to compare.</param>
            <param name="target">The target object to compare.</param>
            <param name="differenceGenerator">The difference generator.</param>
            <returns>A disposable object deactivating the context, if it was activated;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.CreateContext">
            <summary>
            Creates new comparison context.
            </summary>
            <returns>Newly created <see cref="T:Xtensive.Modelling.Comparison.ComparisonContext"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetTargetPath(Xtensive.Modelling.Node)">
            <summary>
            Gets the path of the target node.
            </summary>
            <param name="source">The source node.</param>
            <returns>The path of the target node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetTargetName(Xtensive.Modelling.Node)">
            <summary>
            Gets the name of the target node.
            </summary>
            <param name="source">The source node.</param>
            <returns>The name of the target node.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Comparer.GetCommonBase(System.Object,System.Object)">
            <summary>
            Gets the highest common base type.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The highest common base type.</returns>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Current">
            <summary>
            Gets the current comparer.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Context">
            <summary>
            Gets the current comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Source">
            <summary>
            Gets the source model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Target">
            <summary>
            Gets the target model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Hints">
            <summary>
            Gets the comparison hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Results">
            <summary>
            Gets the dictionary of all already found differences of objects
            from <see cref="P:Xtensive.Modelling.Comparison.Comparer.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.Comparer.Target"/> models.
            Maps objects from both <see cref="P:Xtensive.Modelling.Comparison.Comparer.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.Comparer.Target"/>
            to their <see cref="T:Xtensive.Modelling.Comparison.Difference"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Comparer.Stage">
            <summary>
            Gets the current comparison stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ComparisonContext">
            <summary>
            Holds current state of the <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Comparer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.GetParentDifferenceContext``1">
            <summary>
            Gets the nearest <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.ParentDifferenceContext"/> where
            <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference"/> is of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference"/> to search for.</typeparam>
            <returns>
            The nearest <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent"/> of type <typeparamref name="T"/>, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.Activate">
            <summary>
            Activates this instance.
            </summary>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.Activate(System.Boolean)">
            <summary>
            Activates this instance.
            </summary>
            <param name="safely">If <see langword="true"/>,
            a check that <see cref="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent"/> is active must be performed.</param>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ComparisonContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">No current Comparer.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Comparer">
            <summary>
            Gets the comparer this context is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Parent">
            <summary>
            Gets the parent comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.ParentDifferenceContext">
            <summary>
            Gets the parent difference comparison context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.Difference">
            <summary>
            Gets or sets the currently processed difference.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ComparisonContext.PropertyAccessor">
            <summary>
            Gets or sets the currently processed property accessor.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ComparisonStage">
            <summary>
            Enumeration of possible comparison stages.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ComparisonStage.BaseComparison">
            <summary>
            Base properties comparison stage.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ComparisonStage.ReferenceComparison">
            <summary>
            reference properties comparison stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Difference">
            <summary>
            Base comparison result.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference">
            <summary>
            Difference contract.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Source">
            <summary>
            Gets the source object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.Parent">
            <summary>
            Gets the parent difference.
            <see langword="null" />, if none.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference.HasChanges">
            <summary>
            Gets a value indicating whether this difference has changes.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Difference.ToString_IndentSize">
            <summary>
            Indent size in <see cref="M:Xtensive.Modelling.Comparison.Difference.ToString"/> method.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.ParametersToString">
            <summary>
            Converts parameters to string.
            </summary>
            <returns>String representation of difference parameters.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Difference.#ctor(System.Object,System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.Difference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.Difference.Target"/> value.</param>
            <exception cref="T:System.InvalidOperationException">Both <paramref name="source"/> and 
            <paramref name="target"/> are <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Difference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.CopyDataHint">
            <summary>
            Hint for copy data operation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.DataHint">
            <summary>
            An abstract base class for all data hints.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.Hint">
            <summary>
            An abstract base for comparison hint implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IHint">
            <summary>
            Comparison hint contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHint.GetTargets">
            <summary>
            Gets the targets of this hint - paths to the nodes affected by it directly.
            </summary>
            <returns>A sequence of hint targets.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.Hint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DataHint.SourceTablePath">
            <summary>
            Gets the source table path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DataHint.Identities">
            <summary>
            Gets the identities for data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.CopyDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Collections.Generic.IList{Xtensive.Core.Pair{System.String}})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.CopyDataHint.CopiedColumns">
            <summary>
            Gets copied columns. The first value is source column path, 
            the second value is destination column path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.DeleteDataHint">
            <summary>
            Hint for delete data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="postCopy"><see cref="P:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.PostCopy"/> property value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.DeleteDataHint.PostCopy">
            <summary>
            Gets or sets a value indicating whether deletion must be performed after completion of copy data hint processing.
            Normally this flag is used to remove records related to types moved to other hierarchies -
            these records are still necessary during upgrade to be copied, but must be removed on its
            completion.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.HintSet">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.Hints.Hint"/> set.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IHintSet">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.Hints.Hint"/> collection contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.Add(Xtensive.Modelling.Comparison.Hints.Hint)">
            <summary>
            Adds the specified hint to the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.GetHint``1(Xtensive.Modelling.Node)">
            <summary>
            Gets the hint of type <typeparamref name="THint"/> for the specified node.
            </summary>
            <typeparam name="THint">The type of the hint.</typeparam>
            <param name="node">The node hint is applicable to.</param>
            <returns>
            Found hint, if any;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IHintSet.GetHints``1(Xtensive.Modelling.Node)">
            <summary>
            Gets hints of type <typeparamref name="THint"/> for the specified node.
            </summary>
            <typeparam name="THint">The type of the hint.</typeparam>
            <param name="node">The node hints are applicable to.</param>
            <returns>
            Found hints, if any;
            otherwise, an empty array.
            </returns>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.Count">
            <summary>
            Gets the count of contained hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.SourceModel">
            <summary>
            Gets or sets the source model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IHintSet.TargetModel">
            <summary>
            Gets or sets the target model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Add(Xtensive.Modelling.Comparison.Hints.Hint)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">One of paths returned by
            <see cref="M:Xtensive.Modelling.Comparison.Hints.Hint.GetTargets"/> method isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetHint``1(Xtensive.Modelling.Node)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Multiple hints found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetHints``1(Xtensive.Modelling.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.HasHints(Xtensive.Modelling.Node)">
            <summary>
            Determines whether there are any hints associated with the specified.
            </summary>
            <param name="node">The node to check.</param>
            <returns>
            <see langword="true"/> if the specified node has associated hints; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintSet.#ctor(Xtensive.Modelling.IModel,Xtensive.Modelling.IModel)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="sourceModel">The source model.</param>
            <param name="targetModel">The target model.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.Empty">
            <summary>
            Gets the empty <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.SourceModel">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintSet.TargetModel">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.HintTarget">
            <summary>
            Hint target reference.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.Equals(Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.op_Equality(Xtensive.Modelling.Comparison.Hints.HintTarget,Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.op_Inequality(Xtensive.Modelling.Comparison.Hints.HintTarget,Xtensive.Modelling.Comparison.Hints.HintTarget)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.HintTarget.#ctor(Xtensive.Modelling.Comparison.ModelType,System.String)">
            <summary>
              <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="model">The model.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintTarget.Model">
            <summary>
            Gets the model this hint target points to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.HintTarget.Path">
            <summary>
            Gets the node path this hint target points to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IdentityPair">
            <summary>
            Pair of node paths or node path and constant.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IdentityPair.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IdentityPair.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source node path.</param>
            <param name="target">The target node path.</param>
            <param name="isIdentifiedByConstant">if set to <see langword="true"/> the target value is constant.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Source">
            <summary>
            Gets the source node path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Target">
            <summary>
            Gets the target node path or constant.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.IsIdentifiedByConstant">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.Hints.IdentityPair.Target"/> value is constant.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.IgnoreHint">
            <summary>
            Ignore node hint. 
            Add possibilities to ignore specified node in comparison.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.IgnoreHint.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="path">The ignored node path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.IgnoreHint.Path">
            <summary>
            Gets ignored node path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.RenameHint">
            <summary>
            Rename hint.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.RenameHint.#ctor(System.String,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.RenameHint.SourcePath">
            <summary>
            Gets the source node path.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.RenameHint.TargetPath">
            <summary>
            Gets the target node path.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Hints.UpdateDataHint">
            <summary>
            Hint for update data operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.GetTargets">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.#ctor(System.String,System.Collections.Generic.IList{Xtensive.Modelling.Comparison.Hints.IdentityPair},System.Collections.Generic.IList{Xtensive.Core.Pair{System.String,System.Object}})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Hints.UpdateDataHint.UpdateParameter">
            <summary>
            Gets the update parameter. The first is updated column path, 
            the second is new value or null (default value).
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference`2">
            <summary>
            <see cref="P:Xtensive.Modelling.Comparison.IDifference`2.Parent"/>-typed <see cref="T:Xtensive.Modelling.Comparison.IDifference`1"/> contract.
            </summary>
            <typeparam name="T">The type of source and target objects.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IDifference`1">
            <summary>
            Typed <see cref="T:Xtensive.Modelling.Comparison.IDifference"/> contract.
            </summary>
            <typeparam name="T">The type of <see cref="P:Xtensive.Modelling.Comparison.IDifference`1.Source"/> and <see cref="P:Xtensive.Modelling.Comparison.IDifference`1.Target"/> objects.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`1.Source">
            <summary>
            Gets the source object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`1.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IDifference`2.Parent">
            <summary>
            Gets the parent difference.
            <see langword="null" />, if none.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IHasPropertyChanges">
            <summary>
            A contract of describing property change set.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.IHasPropertyChanges.PropertyChanges">
            <summary>
            Gets list of property changes.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.IUpgrader">
            <summary>
            Produces upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IUpgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.IComparer)">
            <summary>
            Gets the upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            If <paramref name="comparer"/> is provided, it is used to validate
            the result of upgrade script.
            </summary>
            <param name="difference">The difference.</param>
            <param name="hints">The upgrade hints.</param>
            <param name="comparer">The comparer to use to validate
            the result of upgrade script.</param>
            <returns>
            Sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s describing the upgrade.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.IUpgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <summary>
            Gets the upgrade script (sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s)
            for the specified <see cref="T:Xtensive.Modelling.Comparison.Difference"/> and <see cref="T:Xtensive.Modelling.Comparison.Hints.HintSet"/>.
            </summary>
            <param name="difference">The difference.</param>
            <param name="hints">The upgrade hints.</param>
            <returns>
            Sequence of <see cref="T:Xtensive.Modelling.Actions.NodeAction"/>s describing the upgrade.
            </returns>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ModelType">
            <summary>
            Model type.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ModelType.Source">
            <summary>
            Source model.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.ModelType.Target">
            <summary>
            Target model.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.MovementInfo">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> movement information.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Unknown">
            <summary>
            The source node is not changed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Changed">
            <summary>
            The source node is changed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Relocated">
            <summary>
            The source node is relocated.
            Implies any action leading to update references to it.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Created">
            <summary>
            The target node is newly created.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Removed">
            <summary>
            The source node is removed.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.Copied">
            <summary>
            The source node is copied.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.NameChanged">
            <summary>
            Source node <see cref="P:Xtensive.Modelling.Node.Name"/> is changed.
            Always <see langword="false"/> for <see cref="T:Xtensive.Modelling.IUnnamedNode"/>s.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.IndexChanged">
            <summary>
            Source node <see cref="P:Xtensive.Modelling.Node.Index"/> is changed.
            Always <see langword="false"/> for nodes nested into
            <see cref="T:Xtensive.Modelling.IUnorderedNodeCollection"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.ParentChanged">
            <summary>
            Direct source node <see cref="P:Xtensive.Modelling.Node.Parent"/> is changed,
            i.e. the node was moved to a different parent node.
            Parent's renaming isn't considered as parent change.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.MovementInfo.ParentRelocated">
            <summary>
            Direct or indirect source node <see cref="P:Xtensive.Modelling.Node.Parent"/> is <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Relocated"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.NodeCollectionDifference">
            <summary>
            <see cref="T:Xtensive.Modelling.NodeCollection"/> comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeCollectionDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeCollectionDifference.#ctor(Xtensive.Modelling.NodeCollection,Xtensive.Modelling.NodeCollection)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Target"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.ItemChanges">
            <summary>
            Gets the item changes.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeCollectionDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.NodeDifference">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.NodeDifference.#ctor(Xtensive.Modelling.Node,Xtensive.Modelling.Node)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.Source"/> value.</param>
            <param name="target">The <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.Target"/> value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.Source">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.Target">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo">
            <summary>
            Gets or sets the movement info.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsRemoveOnCleanup">
            <summary>
            Gets or set a value indicating whether source node 
            must be removed on cleanup stage.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsDependentOnParent">
            <summary>
            Gets or sets a value indicating whether source node 
            must be removed before his parent.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsDataChanged">
            <summary>
            Gets or sets a value indicating whether data is changed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsRemoved">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Removed"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsCreated">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Created"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsChanged">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.Changed"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.IsNameChanged">
            <summary>
            Gets a value indicating whether this <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/> contain flag 
            <see cref="F:Xtensive.Modelling.Comparison.MovementInfo.NameChanged"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.PropertyChanges">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.NodeDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeActionType">
            <summary>
            Enumerates possible upgrade action types.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.PreCondition">
            <summary>
            The action is precondition, so it should be added to appropriate preconditions chain.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.Regular">
            <summary>
            Regular action.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.Rename">
            <summary>
            The action is a rename of temporarily named node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeActionType.PostCondition">
            <summary>
            The action is postcondition, so it should be added to appropriate postconditions chain.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeContext">
            <summary>
            Holds current state of the <see cref="T:Xtensive.Modelling.Comparison.Upgrader"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.Activate">
            <summary>
            Activates this instance.
            </summary>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.GetMergeActions">
            <summary>
            Merges the sequence of 
            <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.PreConditions"/>, <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.Actions"/> and <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.PostConditions"/>
            and returns the result.
            Sets all these properties to <see langword="null"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.Activate(System.Boolean)">
            <summary>
            Activates this instance.
            </summary>
            <param name="safely">If <see langword="true"/>,
            a check that <see cref="P:Xtensive.Modelling.Comparison.UpgradeContext.Parent"/> is active must be performed.</param>
            <returns>A disposable object deactivating it.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid context activation sequence.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.UpgradeContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">No current Comparer.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Upgrader">
            <summary>
            Gets the upgrader this context is created for.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Parent">
            <summary>
            Gets the parent upgrade context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Difference">
            <summary>
            Gets or sets the currently processed difference.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.PreConditions">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.PreCondition"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Actions">
            <summary>
            Gets or sets the current action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Renames">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.Rename"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.PostConditions">
            <summary>
            Gets or sets the current <see cref="F:Xtensive.Modelling.Comparison.UpgradeActionType.PostCondition"/> action sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.Property">
            <summary>
            Gets or sets the currently processed property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.IsImmutable">
            <summary>
            Indicates whether node must be copied rather than processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.IsRemoved">
            <summary>
            Indicates whether node must be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.UpgradeContext.DependencyRootType">
            <summary>
            Gets or sets the type of the dependency root.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.Upgrader">
            <summary>
            <see cref="T:Xtensive.Modelling.Comparison.IUpgrader"/> implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.NodeGroupComment">
            <summary>
            Node group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.NodeCollectionGroupComment">
            <summary>
            Node collection group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.PreConditionsGroupComment">
            <summary>
            Preconditions group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.RenamesGroupComment">
            <summary>
            Renames group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.PostConditionsGroupComment">
            <summary>
            Postconditions group comment (in action sequence).
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.Upgrader.TemporaryNameFormat">
            <summary>
            Temporary name format string.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetUpgradeSequence(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.IComparer)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>hints.SourceModel</c> or <c>hints.TargetModel</c>
            is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">Upgrade sequence validation has failed.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessStage(Xtensive.Modelling.Comparison.UpgradeStage,Xtensive.Modelling.Actions.GroupingNodeAction)">
            <summary>
            Generate actions for specific <see cref="T:Xtensive.Modelling.Comparison.UpgradeStage"/>.
            </summary>
            <param name="stage">The stage.</param>
            <param name="action">The parent action.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.Visit(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Visitor dispatcher.
            </summary>
            <param name="difference">The difference to visit.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitNodeDifference(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Visits the node difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessMovement(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Generates <see cref="T:Xtensive.Modelling.Actions.NodeAction"/> according to <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.MovementInfo"/>.
            </summary>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.RegisterTemporaryRename(Xtensive.Modelling.Node)">
            <summary>
            Registers the temporary rename.
            </summary>
            <param name="source">The renamed node.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.ProcessProperties(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Process <see cref="P:Xtensive.Modelling.Comparison.NodeDifference.PropertyChanges"/> for specific <see cref="T:Xtensive.Modelling.Comparison.NodeDifference"/>.
            </summary>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitNodeCollectionDifference(Xtensive.Modelling.Comparison.NodeCollectionDifference)">
            <summary>
            Visits the node collection difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitValueDifference(Xtensive.Modelling.Comparison.ValueDifference)">
            <summary>
            Visits the value difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.VisitUnknownDifference(Xtensive.Modelling.Comparison.Difference)">
            <summary>
            Visits the unknown difference.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            A sequence of actions that must be performed to upgrade
            from <see cref="P:Xtensive.Modelling.Comparison.IDifference.Source"/> of the specified
            difference to its <see cref="P:Xtensive.Modelling.Comparison.IDifference.Target"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsAllowedForCurrentStage(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Determines whether the specified difference allowed for current <see cref="P:Xtensive.Modelling.Comparison.Upgrader.Stage"/>.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if the specified difference allowed
            for current <see cref="P:Xtensive.Modelling.Comparison.Upgrader.Stage"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsCyclicRename(Xtensive.Modelling.Comparison.NodeDifference)">
            <summary>
            Determines whether is cycle rename detected.
            </summary>
            <param name="difference">The difference.</param>
            <returns>
            <see langword="true"/> if is cycle rename exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsImmutable(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Determines whether specified property is immutable.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns><see langword="true"/> if th specified property is immutable; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.IsImmutable"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.IsVolatile(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Determines whether specified property is mutable.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns><see langword="true"/> if th specified property is mutable; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.IsVolatile"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetDependencyRootType(Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Gets the type of the dependency root object for the specified property.
            </summary>
            <param name="difference">The difference.</param>
            <param name="accessor">The property accessor.</param>
            <returns>The type of the dependency root object for the specified property;
            <see langword="null"/>, if none.</returns>
            <remarks>
            Returns <paramref name="accessor"/>.<see cref="P:Xtensive.Modelling.PropertyAccessor.DependencyRootType"/>
            by default.
            </remarks>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetTemporaryName(Xtensive.Modelling.Node)">
            <summary>
            Gets the name of the temporary for the renaming node in case of conflict
            (mutual rename).
            </summary>
            <returns>Temporary node name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.GetPathWithoutName(Xtensive.Modelling.Node)">
            <summary>
            Gets the node path without node name.
            </summary>
            <param name="node">The node.</param>
            <returns>Path.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.CreateContext">
            <summary>
            Creates new upgrade context.
            </summary>
            <returns>Newly created <see cref="T:Xtensive.Modelling.Comparison.UpgradeContext"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.OpenActionGroup(System.String)">
            <summary>
            Creates the new action group.
            </summary>
            <param name="comment">The action group comment.</param>
            <returns>A disposable deactivating the group.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.Upgrader.AddAction(Xtensive.Modelling.Comparison.UpgradeActionType,Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Appends the specified action to the action sequence that is building now.
            </summary>
            <param name="actionType">Type of the action.</param>
            <param name="action">The action to append.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>actionType</c> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid <c>Context.DependencyRootType</c>.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Current">
            <summary>
            Gets the current comparer.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Context">
            <summary>
            Gets the current upgrade context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Difference">
            <summary>
            Gets the difference that is currently processed.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Hints">
            <summary>
            Gets the comparison and upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Stage">
            <summary>
            Gets the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.TemporaryRenames">
            <summary>
            Gets the temporary renames.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.SourceModel">
            <summary>
            Gets the source model to compare.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.TargetModel">
            <summary>
            Gets the target model to compare.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.CurrentModel">
            <summary>
            Gets the current model.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.Upgrader.Comparer">
            <summary>
            Gets the comparer.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.UpgradeStage">
            <summary>
            Enumeration of possible upgrade stages.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.CleanupData">
            <summary>
            Record-level cleanup.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Prepare">
            <summary>
            Remove unnecesery structures.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.TemporaryRename">
            <summary>
            Rename cycle participants.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Upgrade">
            <summary>
            Create and rename structures, change property values.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.CopyData">
            <summary>
            Copy data.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.PostCopyData">
            <summary>
            Post copy data.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Comparison.UpgradeStage.Cleanup">
            <summary>
            Remove structures thats have not been 
            removed on <see cref="F:Xtensive.Modelling.Comparison.UpgradeStage.Prepare"/> stage.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Comparison.ValueDifference">
            <summary>
            Simple value comparison result.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ValueDifference.ParametersToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Comparison.ValueDifference.#ctor(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Comparison.ValueDifference.HasChanges">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.IModel">
            <summary>
            Tagging interface for root model types.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INode">
            <summary>
            Node interface.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode">
            <summary>
            Base class for any model node or node collection (path node).
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Validation.IValidatable">
            <summary>
            "Validatable object" contract.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.IValidatable.Validate">
            <summary>
            Validates the instance state.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.IPathNode.Resolve(System.String)">
            <summary>
            Gets the child node by its path.
            </summary>
            <param name="path">Path to the node to get.</param>
            <returns>Path node, if found;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.IPathNode.Dump">
            <summary>
            Dumps this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Name">
            <summary>
            Gets or sets the name of this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.EscapedName">
            <summary>
            Gets escaped <see cref="P:Xtensive.Modelling.IPathNode.Name"/> of this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Parent">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode.Path">
            <summary>
            Gets the path to this node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetProperty(System.String)">
            <summary>
            Gets the value of the property with specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of the property with specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetNestedProperty(System.String)">
            <summary>
            Tries the get nested property value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Nested property value;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.GetPathNodes(System.Boolean)">
            <summary>
            Gets all non-<see langword="null"/> property values of <see cref="T:Xtensive.Modelling.IPathNode"/> type.
            </summary>
            <param name="nestedOnly">If set to <see langword="true"/>, only nested nodes will be returned;
            otherwise, <see langword="false"/>.</param>
            <returns>Non-<see langword="null"/> property values of <see cref="T:Xtensive.Modelling.IPathNode"/> type.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INode.Move(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Moves the node.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Xtensive.Modelling.INode.Remove">
            <summary>
            Removes the node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode.Clone(Xtensive.Modelling.Node,System.String)">
            <summary>
            Copies the whole node to the specified location.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <returns>Created copy of the node.</returns>
        </member>
        <member name="P:Xtensive.Modelling.INode.State">
            <summary>
            Gets the state of the node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.Index">
            <summary>
            Gets or sets the index of the node in the parent collection, if applicable;
            otherwise, <see langword="0" />.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.Nesting">
            <summary>
            Gets the node nesting information.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INode.PropertyAccessors">
            <summary>
            Gets the property accessors for this node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.IModel.Actions">
            <summary>
            Gets or sets the sequence of actions to log.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INesting">
            <summary>
            Node nesting information.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.Node">
            <summary>
            Gets the node this object belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyName">
            <summary>
            Gets the name of the parent property, to which the node can be nested.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.EscapedPropertyName">
            <summary>
            Gets the escaped <see cref="P:Xtensive.Modelling.INesting.PropertyName"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.IsNestedToCollection">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property is a collection property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyInfo">
            <summary>
            Gets the property info for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyGetter">
            <summary>
            Gets the property getter for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INesting.PropertyValue">
            <summary>
            Gets the property value for <see cref="P:Xtensive.Modelling.INesting.PropertyName"/> property.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeCollection">
            <summary>
            <see cref="T:Xtensive.Modelling.Node"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <summary>
            Gets the item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to get.</param>
            <param name="value">Item, if it is found; otherwise <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if item is found by specified <paramref name="name"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.Contains(System.String)">
            <summary>
            Determines whether collection contains
            an item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to find.</param>
            <returns>
            <see langword="true"/> if this collection contains
            an item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.GetTemporaryName">
            <summary>
            Gets the temporary name (it isn't used in this collection).
            </summary>
            <returns>Temporary name.</returns>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeCollection`1">
            <summary>
            Typed <see cref="T:Xtensive.Modelling.Node"/> collection.
            </summary>
            <typeparam name="TNode">The type of the collection item.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.INodeCollection`1.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <summary>
            Gets the item with the specified <see cref="P:Xtensive.Modelling.Node.Name"/>.
            </summary>
            <param name="name">The <see cref="P:Xtensive.Modelling.Node.Name"/> of the item to get.</param>
            <param name="value">Item, if it is found; otherwise <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if item is found by specified <paramref name="name"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection`1.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their index.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeCollection`1.Item(System.String)">
            <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null"/> if there is no such item.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INodeReference">
            <summary>
            Node reference contract.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.INodeReference.Value">
            <summary>
            Gets or sets the target node this reference points to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.INode`1">
            <summary>
            Node with specified <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> type.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode`1">
            <summary>
            Path node with specified <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> type.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode`1.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.INode`1.Move(`0,System.String,System.Int32)">
            <summary>
            Moves the node.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="P:Xtensive.Modelling.INode`1.Parent">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IPathNode`2">
            <summary>
            Path node with specified <see cref="P:Xtensive.Modelling.IPathNode.Model"/> 
            and <see cref="P:Xtensive.Modelling.IPathNode.Parent"/> types.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="P:Xtensive.Modelling.IPathNode`2.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IUnnamedNode">
            <summary>
            A tagging interface for any unnamed node.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.IUnorderedNodeCollection">
            <summary>
            A tagging interface for any unordered node collection.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Log.Name">
            <summary>
            The name of the log.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Nesting">
            <summary>
            Abstract base <see cref="T:Xtensive.Modelling.INesting"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Nesting.Initialize">
            <exception cref="T:System.InvalidOperationException">Invalid property type.</exception>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.EscapedPropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.Node">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.IsNestedToCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyGetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertySetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting.PropertyValue">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Nesting`3">
            <summary>
            <see cref="T:Xtensive.Modelling.INesting"/> implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.Initialize">
            <exception cref="T:System.InvalidOperationException">Invalid property type.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.#ctor(`0,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="node"><see cref="T:Xtensive.Modelling.Node"/> property value.</param>
            <param name="propertyName"><see cref="P:Xtensive.Modelling.Nesting.PropertyName"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.Nesting`3.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="node"><see cref="T:Xtensive.Modelling.Node"/> property value.</param>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.IsNestedToCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertyGetter">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Nesting`3.PropertySetter">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Node">
            <summary>
            An abstract base class for model node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Node.PathDelimiter">
            <summary>
            Path delimiter character.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.Node.PathEscape">
            <summary>
            Path escape character.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.SetProperty(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetNestedProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.GetPathNodes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid node state.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Remove">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid node state.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Resolve(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.Clone(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Required constructor isn't found.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.CopyPropertyValue(Xtensive.Modelling.Node,Xtensive.Modelling.PropertyAccessor)">
            <summary>
            Copies the property value.
            </summary>
            <param name="target">The target node.</param>
            <param name="accessor">The accessor of the property to copy value of.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateMove(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Validates the <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> method arguments.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.ArgumentException">Item already exists.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is out of range, 
            or <paramref name="newParent"/> belongs to a different <see cref="P:Xtensive.Modelling.Node.Model"/>.</exception>
            <exception cref="T:System.InvalidOperationException">newName!=newIndex for <see cref="T:Xtensive.Modelling.IUnnamedNode"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateRemove">
            <summary>
            Validates the <see cref="M:Xtensive.Modelling.Node.Remove"/> method call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Model object cannot be removed.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.ValidateState">
            <summary>
            Validates the state (i.e. checks everything except nested properties).
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformCreate">
            <summary>
            Actually performs construction operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Target object already exists.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformMove(Xtensive.Modelling.Node,System.String,System.Int32)">
            <summary>
            Actually performs <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> operation.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="newName">The new name.</param>
            <param name="newIndex">The new index.</param>
            <exception cref="T:System.InvalidOperationException">Target object already exists.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformShift(System.Int32)">
            <summary>
            Performs "shift" operation 
            (induced by <see cref="M:Xtensive.Modelling.Node.Move(Xtensive.Modelling.Node,System.String,System.Int32)"/> operation of another node).
            </summary>
            <param name="offset">Shift offset.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.PerformRemove(Xtensive.Modelling.Node)">
            <summary>
            Actually performs <see cref="M:Xtensive.Modelling.Node.Remove"/> operation.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogPropertyChange(System.String,System.Object)">
            <summary>
            Logs the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogAction(Xtensive.Modelling.Actions.NodeAction)">
            <summary>
            Begins registration of a new action.
            </summary>
            <param name="action">The action to register.</param>
            <returns>
            <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to describe it.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.LogAction">
            <summary>
            Begins registration of a new action.
            </summary>
            <returns>
            <see cref="T:Xtensive.Modelling.Actions.ActionScope"/> object allowing to describe it.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.EnsureIsLive">
            <summary>
            Ensures the node <see cref="P:Xtensive.Modelling.Node.State"/> is <see cref="F:Xtensive.Modelling.NodeState.Live"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Node.State"/> is invalid.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.EnsureIsEditable">
            <summary>
            Ensures the node <see cref="P:Xtensive.Modelling.Node.State"/> is <see cref="F:Xtensive.Modelling.NodeState.Live"/> and
            node isn't <see cref="M:Xtensive.Modelling.Node.Lock(System.Boolean)"/>ed.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.Node.State"/> is invalid.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:Xtensive.Modelling.Node.PropertyChanged"/> event.
            </summary>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.ChangeProperty``1(System.String,``0,System.Action{Xtensive.Modelling.Node,``0})">
            <summary>
            Does all the dirty job to change the property of this node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <param name="setter">Property setter delegate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> belongs to a different <see cref="P:Xtensive.Modelling.Node.Model"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.CreateNesting">
            <summary>
            Creates <see cref="P:Xtensive.Modelling.Node.Nesting"/> object describing how this node is nested.
            </summary>
            <returns>New <see cref="P:Xtensive.Modelling.Node.Nesting"/> object.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Node.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xtensive.Modelling.Node.CreateNesting"/> has returned <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Modelling.Node.Dump">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node.#ctor(Xtensive.Modelling.Node,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Modelling.Node"/> class.
            </summary>
            <param name="parent"><see cref="P:Xtensive.Modelling.Node.Parent"/> property value.</param>
            <param name="name">Initial <see cref="P:Xtensive.Modelling.Node.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.Node.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.EscapedName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.State">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Index">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Nesting">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.PropertyAccessors">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node.Path">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Modelling.Node.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeCollection">
            <summary>
            An abstract base class for collection of nodes in model.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.TryGetValue(System.String,Xtensive.Modelling.Node@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.GetTemporaryName">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Resolve(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Xtensive.Modelling.NodeCollection.CollectionChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Add(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Remove(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.RemoveName(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.AddName(Xtensive.Modelling.Node)">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.CheckIntegrity">
            <exception cref="T:System.InvalidOperationException">Internal error.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Dump">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Modelling.NodeCollection.Name"/> is not initialized yet.</exception>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.#ctor(Xtensive.Modelling.Node,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parent"><see cref="P:Xtensive.Modelling.NodeCollection.Parent"/> property value.</param>
            <param name="name"><see cref="P:Xtensive.Modelling.NodeCollection.Name"/> property value.</param>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Name">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.EscapedName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Parent">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Path">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection.Item(System.String)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Item is not found.</exception>
        </member>
        <member name="E:Xtensive.Modelling.NodeCollection.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeCollection`3">
            <summary>
            Typed node collection implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.NodeCollection`3.#ctor(Xtensive.Modelling.Node,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.NodeCollection`3.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.NodeState">
            <summary>
            Enumerates possible states of the node.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Default">
            <summary>
            Default node state: <see cref="F:Xtensive.Modelling.NodeState.Initializing"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Initializing">
            <summary>
            Node isn't fully initialized yet.
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Live">
            <summary>
            Node is "live".
            </summary>
        </member>
        <member name="F:Xtensive.Modelling.NodeState.Removed">
            <summary>
            Node is removed.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.Node`2">
            <summary>
            Abstract base class for node with specified <see cref="P:Xtensive.Modelling.Node.Model"/> 
            and <see cref="P:Xtensive.Modelling.Node.Parent"/> types.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Xtensive.Modelling.Node`2.Move(`0,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Node`2.#ctor(`0,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Modelling.Node`2.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Node`2.Model">
            <summary>
            Gets the model this node belongs to.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.PathNodeExtensions">
            <summary>
            Extension methods to <see cref="T:Xtensive.Modelling.IPathNode"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PathNodeExtensions.Resolve(Xtensive.Modelling.IPathNode,System.String,System.Boolean)">
            <summary>
            Gets the child node by its path.
            </summary>
            <param name="path">Path to the node to get.</param>
            <param name="throwIfNone">Indicates whether an exception 
            must be thrown if there is no node with the specified path, or not.</param>
            <returns>
            Path node, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Modelling.PropertyAccessor">
            <summary>
            Property accessor.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessor.GetDependencyRoot(Xtensive.Modelling.IPathNode)">
            <summary>
            Gets the dependency root object.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="propertyInfo">The property info this accessor is bound to.</param>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.PropertyInfo">
            <summary>
            Gets <see cref="T:System.Reflection.PropertyInfo"/> of property 
            this accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsSystem">
            <summary>
            Gets a value indicating whether underlying property is system.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Priority">
            <summary>
            Gets the <see cref="P:Xtensive.Modelling.Attributes.PropertyAttribute.Priority"/> of the property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IgnoreInComparison">
            <summary>
            Gets a value indicating whether underlying property must be ignored in comparison.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.CaseInsensitiveComparison">
            <summary>
            Gets a value indicating whether property values are compared case insensitively.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsImmutable">
            <summary>
            Gets a value indicating whether underlying property value must be re-created
            rather than created &amp; processed as usual.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.IsVolatile">
            <summary>
            Gets a value indicating whether underlying property must be 
            ignored during recreation of parent atomic property.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.RecreateParent">
            <summary>
            Gets or sets a value indicating whether property owner should be recreated on property value change.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.DependencyRootType">
            <summary>
            Gets the dependency root type.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Getter">
            <summary>
            Gets the property getter delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.HasGetter">
            <summary>
            Gets a value indicating whether this instance has getter.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Setter">
            <summary>
            Gets the property setter delegate.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.Default">
            <summary>
            Gets or sets the default property value.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.PropertyAccessor.HasSetter">
            <summary>
            Gets a value indicating whether this instance has setter.
            </summary>
        </member>
        <member name="T:Xtensive.Modelling.PropertyAccessorDictionary">
            <summary>
            Read-only <see cref="T:Xtensive.Modelling.PropertyAccessor"/> dictionary.
            Items returned by its enumerator are ordered by item <see cref="P:Xtensive.Modelling.PropertyAccessor.Priority"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyDictionary`2">
            <summary>
            Read-only generic dictionary (<see cref="T:System.Collections.Generic.IDictionary`2"/>) wrapper.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IReadOnly">
            <summary>
            Marks that implementing type is read-only analogue of 
            base type.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Remove(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="dictionary">The dictionary to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="dictionary"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Item(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Item(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary> 
            Always returns <see langword="true"/>.
            </summary>
            <returns><see langword="True"/>. </returns>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyDictionary`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.System#Collections#Generic#IEnumerable{Xtensive#Modelling#PropertyAccessor}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,Xtensive.Modelling.PropertyAccessor})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.PropertyAccessorDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,Xtensive.Modelling.PropertyAccessor},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Validation.ValidationContext">
            <summary>
            Model validation context.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.IsValidated(System.Object)">
            <summary>
            Determines whether the specified target is validated.
            </summary>
            <param name="target">The target to check.</param>
            <returns>
            <see langword="true"/> if the specified target is validated; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.IsValidated(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified target is validated.
            </summary>
            <param name="target">The target to check.</param>
            <param name="markAsValidated">If set to <see langword="true"/>, target will be marked as validated.</param>
            <returns>
            <see langword="true"/> if the specified target is validated; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationContext.Current">
            <summary>
            Gets the current validation context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Modelling.Validation.ValidationScope">
            <summary>
            Model validation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationScope.Open">
            <summary>
            Opens a validation context and scope.
            </summary>
            <returns>A new <see cref="T:Xtensive.Modelling.Validation.ValidationScope"/>, if there is no 
            <see cref="P:Xtensive.Modelling.Validation.ValidationContext.Current"/> validation context;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Modelling.Validation.ValidationScope.#ctor(Xtensive.Modelling.Validation.ValidationContext)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Modelling.Validation.ValidationScope.Context">
            <summary>
            Gets the associated validation context.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.MappingDescription">
            <summary>
            Description of a mapping.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.GetMappedTargetType(System.Type)">
            <summary>
            Gets the target type corresponding to <paramref name="sourceType"/>.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>The description of the target type.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.GetMappedSourceType(System.Type)">
            <summary>
            Gets the source type corresponding to <paramref name="targetType"/>.
            </summary>
            <param name="targetType">The source type.</param>
            <returns>The description of the source type.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.GetTargetType(System.Type)">
            <summary>
            Gets the description of the target type.
            </summary>
            <param name="targetType">The target system type.</param>
            <returns>The description of the target type.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.GetSourceType(System.Type)">
            <summary>
            Gets the description of the source type.
            </summary>
            <param name="sourceType">The source system type.</param>
            <returns>The description of the source type.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.ExtractTargetKey(System.Object)">
            <summary>
            Extracts a key from an object of a target type.
            </summary>
            <param name="target">The object of the target type.</param>
            <returns>The extracted key.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.MappingDescription.ExtractSourceKey(System.Object)">
            <summary>
            Extracts a key from an object of a source type.
            </summary>
            <param name="source">The object of the source type.</param>
            <returns>The extracted key.</returns>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.MappingDescription.TargetTypes">
            <summary>
            Gets the target types.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.MappingDescription.SourceTypes">
            <summary>
            Gets the source types.
            </summary>
        </member>
        <member name="T:Xtensive.Caching.LruCache`3">
            <summary>
            A set of items limited by the maximal amount of memory it can use, or by any other measure.
            Stores as many most frequently accessed items in memory as long as it is possible
            while maintaining the total size of cached items less or equal to <see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/>.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
            <typeparam name="TCached">The type of cached representation of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Conversion.Biconverter{`1,`2})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="cacheConverter"><see cref="P:Xtensive.Caching.LruCache`3.CacheConverter"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`3.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.LruCache`3.#ctor(System.Int64,System.Converter{`1,`0},Xtensive.Conversion.Biconverter{`1,`2},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxSize"><see cref="P:Xtensive.Caching.LruCache`3.MaxSize"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.LruCache`3.KeyExtractor"/> property value.</param>
            <param name="cacheConverter"><see cref="P:Xtensive.Caching.LruCache`3.CacheConverter"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.LruCache`3.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.CacheConverter">
            <summary>
            Gets the cache converter.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.MaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Size">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.LruCache`3.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistrationElement">
            <summary>
            Type registration element within a configuration file.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ConfigurationCollectionElementBase">
            <summary>
            Abstract base class for a configuration element within a configuration file
            that is nested to a collection of similar ones.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IIdentified">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IIdentified.Identifier"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IIdentified.Identifier">
            <summary>
            Gets object identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ConfigurationCollectionElementBase.Identifier">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Collections.TypeRegistration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Type">
            <summary>
            Gets or sets the name of the type to register.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Assembly">
            <summary>
            Gets or sets the assembly where types to register are located.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationElement.Namespace">
            <summary>
            Gets or sets the namespace withing the <see cref="P:Xtensive.Collections.TypeRegistrationElement.Assembly"/>, 
            where types to register are located.
            If <see langword="null"/> or <see cref="F:System.String.Empty"/>, 
            all the persistent types from the <see cref="P:Xtensive.Collections.TypeRegistrationElement.Assembly"/> will be registered.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyHashSet`1">
            <summary>
            Read-only set (<see cref="T:Xtensive.Collections.ISet`1"/>) wrapper.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ISet`1">
            <summary>
            Generic set of items.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ISet`1.Add(`0)">
            <summary>
            Adds the specified element to the <see cref="T:Xtensive.Collections.ISet`1"/>.
            </summary>
            <param name="item">Item to add to the set.</param>
            <returns><see langword="True"/> if the element is added to the <see cref="T:Xtensive.Collections.ISet`1"/> object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ISet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:Xtensive.Collections.ISet`1"/> collection.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements that were removed from the <see cref="T:Xtensive.Collections.ISet`1"/> collection.</returns>
        </member>
        <member name="P:Xtensive.Collections.ISet`1.Item(`0)">
            <summary>
            Gets the specified item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Xtensive.Collections.ISet`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object 
            that is used to determine equality for the values in this instance.
            </summary>
            <value>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object 
            that is used to determine equality for the values in this instance.</value>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.RemoveWhere(System.Predicate{`0})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.#ctor(System.Collections.Generic.HashSet{`0},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="set">The set to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="set"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyHashSet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="set">The set to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyHashSet`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.DifferentialDictionary`2">
            <summary>
            The dictionary storing its content as difference to its <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/>.
            <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/> must not be modified during 
            <see cref="T:Xtensive.Collections.DifferentialDictionary`2"/> lifetime (usage period).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.ApplyChanges">
            <summary>
            Commits the changes (<see cref="P:Xtensive.Collections.DifferentialDictionary`2.Difference"/>) to the <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/> dictionary.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.CancelChanges">
            <summary>
            Cancels (cleans up) all the changes (<see cref="P:Xtensive.Collections.DifferentialDictionary`2.Difference"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="origin">The original dictionary.</param>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Origin">
            <summary>
            Gets the origin.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Difference">
            <summary>
            Gets the difference of the current state with <see cref="P:Xtensive.Collections.DifferentialDictionary`2.Origin"/>.
            This method requires constant time 
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Item(`0)">
            <summary>
            Gets the <typeparamref name="TValue"/> with the specified key.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Keys">
            <summary>
            <inheritdoc/>
            This property requires <see langword="O(Count)" /> time to return the result.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionary`2.Values">
            <summary>
            <inheritdoc/>
            This property requires <see langword="O(Count)" /> time to return the result.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.DifferentialDictionaryDifference`2">
            <summary>
            Describes complete <see cref="T:Xtensive.Collections.DifferentialDictionary`2"/> change set.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.DifferentialDictionaryDifference`2.#ctor(Xtensive.Collections.ReadOnlyDictionary{`0,`1},Xtensive.Collections.ReadOnlyDictionary{`0,`1},Xtensive.Collections.ReadOnlyHashSet{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
            <param name="changedItems">The changed items.</param>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.AddedItems">
            <summary>
            Gets added items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.RemovedItems">
            <summary>
            Gets removed items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.DifferentialDictionaryDifference`2.ChangedItems">
            <summary>
            Gets the keys of all changed items, including keys of added, removed or changed items.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ArrayExtensions">
            <summary>
            <see cref="T:System.Array"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Copy``1(``0[])">
            <summary>
            Clones the array.
            </summary>
            <typeparam name="TItem">The type of array items.</typeparam>
            <param name="source">Array to clone.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Copy``1(``0[],``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> array
            to <paramref name="target"/> starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source array to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetIndex"/> is out of range.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Cast``2(``0[])">
            <summary>
            Clones <paramref name="source"/> array with type case.
            </summary>
            <typeparam name="TItem">The type of source array items.</typeparam>
            <typeparam name="TNewItem">The type of result array items.</typeparam>
            <param name="source">Collection to convert.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Convert``2(``0[],System.Converter{``0,``1})">
            <summary>
            Clones <paramref name="source"/> array with element conversion.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <typeparam name="TNewItem">The type of item to convert to.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="converter">A delegate that converts each element.</param>
            <returns>An array of converted elements.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Gets the index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise returns <see langword="-1"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Array to search for the item.</param>
            <param name="item">Item to locate in the array.</param>
            <returns>
            Index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise, <see langword="-1"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Segment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Enumerates segment of an array.
            </summary>
            <typeparam name="TItem">The type of the array item.</typeparam>
            <param name="items">The array to enumerate the segment of.</param>
            <param name="offset">Segment offset.</param>
            <param name="length">Segment length.</param>
            <returns>An enumerable iterating through the segment.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.IndexOf``1(``0[],``0,System.Boolean)">
            <summary>
            Gets the index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise returns <see langword="-1"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Array to search for the item.</param>
            <param name="item">Item to locate in the array.</param>
            <param name="byReference">Indicates whether just references
            should be compared.</param>
            <returns>
            Index of first occurrence of the <paramref name="item"/>
            in the <paramref name="items"/> array, if found;
            otherwise, <see langword="-1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Value type is passed instead of class.</exception>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Select``1(``0[],System.Func{``0,``0,System.Int32},System.Int32)">
            <summary>
            Selects the specified item from the ordered sequence of items
            produced by ordering the <paramref name="items"/>.
            The original sequence will be partially reordered!
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items to select from.</param>
            <param name="index">The offset of the item to select from the ordered sequence.</param>
            <returns>The specified item from the ordered sequence of items.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Prepend``1(``0[],``0)">
            <summary>
            Creates new array consisting of <paramref name="items"/>
            and <paramref name="item"/> added before array elements.
            If <paramref name="items"/> is <see langword="null"/>
            returns array that contains just <paramref name="item"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The prefix item.</param>
            <returns>Result array.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Append``1(``0[],``0)">
            <summary>
            Creates new array consisting of <paramref name="items"/>
            and <paramref name="item"/> added after array elements.
            If <paramref name="items"/> is <see langword="null"/>
            returns array that contains just <paramref name="item"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The prefix item.</param>
            <returns>Result array.</returns>
        </member>
        <member name="M:Xtensive.Core.ArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            Combines the specified source and target arrays into new one.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Collections.ITypeRegistrationProcessor">
            <summary>
            Processes <see cref="T:Xtensive.Collections.TypeRegistration"/>s in <see cref="T:Xtensive.Collections.TypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITypeRegistrationProcessor.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration)">
            <summary>
            Processes the specified type registration.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The action to process.</param>
        </member>
        <member name="T:Xtensive.Collections.Deque`1">
            <summary>
            Double-ended queue.
            </summary>
            <typeparam name="T">The type of queued elements.</typeparam>
            <remarks>
            <para>
            <see cref="T:Xtensive.Collections.Deque`1"/> it is a sequence that supports random access to its elements, 
            constant time of insertion and removal of elements at the both ends of the sequence, 
            and linear time of insertion and removal of elements in the middle.
            </para>
            <para>
            The capacity of a <see cref="T:Xtensive.Collections.Deque`1"/> is the number of elements the <see cref="T:Xtensive.Collections.Deque`1"/> can hold.
            In this implementation, the default initial capacity for a <see cref="T:Xtensive.Collections.Deque`1"/> is 16;
            however, that default might change in future versions.
            </para>
            <para>
            As elements are added to a <see cref="T:Xtensive.Collections.Deque`1"/>, the capacity is automatically increased as required
            by reallocating the internal array. The capacity can be decreased by calling <see cref="M:Xtensive.Collections.Deque`1.TrimExcess"/>.
            </para>
            <para>
            The growth factor is the number by which the current capacity is multiplied when a greater capacity
            is required. The growth factor is determined when the <see langword="Deque"/> is constructed.
            </para>
            <para>
            <see cref="T:Xtensive.Collections.Deque`1"/> accepts a <see langword="null"/>
            as a valid value for reference types and allows duplicate elements.
            </para>
            </remarks>
        </member>
        <member name="T:Xtensive.Collections.IDeque`1">
            <summary>
            Double-ended queue contract.
            </summary>
            <typeparam name="T">The type of queued elements.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Xtensive.Collections.IDeque`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
            <remarks>
            This method can be used to minimize a collection's memory overhead 
            if no new elements will be added to the collection. 
            <para>
            The cost of reallocating and copying a large <see cref="T:Xtensive.Collections.IDeque`1"/> can be considerable, however,
            so the <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/> method does nothing if the deque is at more than 90 percent of capacity.
            This avoids incurring a large reallocation cost for a relatively small gain.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            To reset a <see cref="T:Xtensive.Collections.IDeque`1"/> to its initial state, call the <see cref="M:System.Collections.IList.Clear"/> method
            before calling <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/> method. 
            Trimming an empty <see cref="T:Xtensive.Collections.IDeque`1"/> sets the capacity of the <see cref="T:Xtensive.Collections.IDeque`1"/>
            to the default capacity.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.AddHead(`0)">
            <summary>
            Adds <paramref name="element"/> to the <see cref="T:Xtensive.Collections.IDeque`1"/> head.
            </summary>
            <param name="element">
            The element to add to the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            The value can be a <see langword="null"/> for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> already equals the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/>,
            the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the <see cref="T:Xtensive.Collections.IDeque`1"/> is increased by 
            automatically reallocating the internal array, and the existing elements 
            are copied to the new array before the new element is added.
            </para>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> is less than the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the internal array,
            this method is an O(1) operation. 
            If the internal array needs to be reallocated to accommodate the new element,
            this method becomes an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.AddTail(`0)">
            <summary>
            Adds <paramref name="element"/> to the <see cref="T:Xtensive.Collections.IDeque`1"/> tail.
            </summary>
            <param name="element">
            The element to add to the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            The value can be a <see langword="null"/> for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> already equals the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/>,
            the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the <see cref="T:Xtensive.Collections.IDeque`1"/> is increased by 
            automatically reallocating the internal array, and the existing elements 
            are copied to the new array before the new element is added.
            </para>
            <para>
            If <see cref="P:System.Collections.Generic.ICollection`1.Count"/> is less than the <see cref="P:Xtensive.Collections.IDeque`1.Capacity"/> of the internal array,
            this method is an O(1) operation. 
            If the internal array needs to be reallocated to accommodate the new element,
            this method becomes an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.ExtractHead">
            <summary>
            Removes and returns the element at the head of the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
            <returns>The element that is removed from the head of the <see cref="T:Xtensive.Collections.IDeque`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Xtensive.Collections.IDeque`1"/> is empty.</exception>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.ExtractTail">
            <summary>
            Removes and returns the element at the tail of the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
            <returns>The element that is removed from the tail of the <see cref="T:Xtensive.Collections.IDeque`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Xtensive.Collections.IDeque`1"/> is empty.</exception>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IDeque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items at the given index in the Deque. All items at indexes 
            greater than <paramref name="index"/> move down <paramref name="count"/> indices
            in the Deque.
            </summary>
            <param name="index">The index in the list to remove the range at. The
            first item in the list has index 0.</param>
            <param name="count">The number of items to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count, or <paramref name="count"/> is less than zero
            or too large.</exception>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Capacity">
            <summary>
            Gets or sets the size of an internal array.
            </summary>
            <value>
            Indicates the size of an internal array.
            The minimally allowed value which is also the default one is 16.
            </value>
            <remarks>
            As elements are added to a <see cref="T:Xtensive.Collections.IDeque`1"/>, the capacity is automatically increased as required
            by reallocating the internal array. The capacity can be decreased by calling <see cref="M:Xtensive.Collections.IDeque`1.TrimExcess"/>.
            </remarks>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Head">
            <summary>
            Gets head element in the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.HeadOrDefault">
            <summary>
            Gets head element in the <see cref="T:Xtensive.Collections.IDeque`1"/>, or <see langword="default(T)"/>, if deque is empty.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.Tail">
            <summary>
            Gets tail element in the <see cref="T:Xtensive.Collections.IDeque`1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IDeque`1.TailOrDefault">
            <summary>
            Gets tail element in the <see cref="T:Xtensive.Collections.IDeque`1"/>, or <see langword="default(T)"/>, if deque is empty.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.AddHead(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.AddTail(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.ExtractHead">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.ExtractTail">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Xtensive.Collections.Deque`1"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:Xtensive.Collections.Deque`1"/>.</returns>
            <remarks>
            <para>
            A shallow copy of a collection copies only the elements of the collection,
            whether they are reference types or value types, but it does not copy 
            the objects that the references refer to. The references in the new collection 
            point to the same objects that the references in the original collection point to.
            </para>
            <para>
            In contrast, a deep copy of a collection copies the elements and 
            everything directly or indirectly referenced by the elements.
            </para>
            <para>
            This method is an O(n) operation, where n is <see langword="Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="initialCapacity">The initial <see cref="P:Xtensive.Collections.Deque`1.Capacity"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Int32,System.Single)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="initialCapacity">The initial <see cref="P:Xtensive.Collections.Deque`1.Capacity"/> property value.</param>
            <param name="growFactor">The factor by which the capacity of the <see cref="T:Xtensive.Collections.Deque`1"/> is expanded.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The initial contents of the <see cref="T:Xtensive.Collections.Deque`1"/>.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Single)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The initial contents of the <see cref="T:Xtensive.Collections.Deque`1"/>.</param>
            <param name="growFactor">The factor by which the capacity of the <see cref="T:Xtensive.Collections.Deque`1"/> is expanded.</param>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="M:Xtensive.Collections.Deque`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Head">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.HeadOrDefault">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.Tail">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.TailOrDefault">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.EnumerableExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether enumerable is empty or not 
            by attempting to cast it to <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Linq.IQueryable`1"/>.
            May return false negative response.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to check.</param>
            <returns><see langword="True"/> if collection is definitely <see langword="null"/> or empty;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.TryGetLongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the count of items (as <see cref="T:System.Int64"/>) of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if it is actually
            <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Linq.IQueryable`1"/>.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to get count of.</param>
            <returns>The count of items, if it's possible to get it;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the count of items of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if it is actually
            <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Linq.IQueryable`1"/>.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">Items to get count of.</param>
            <returns>The count of items, if it's possible to get it;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Run``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            "Runs" the specified <paramref name="sequence"/> by enumerating it.
            </summary>
            <typeparam name="T">Type of the sequence item.</typeparam>
            <param name="sequence">The sequence to run.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Applies the specified <paramref name="action"/> to all the items 
            from the <paramref name="items"/> sequence.
            </summary>
            <typeparam name="T">Type of the sequence item.</typeparam>
            <param name="items">The sequence to apply the <paramref name="action"/> to.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified <paramref name="action"/> to all the items 
            from the <paramref name="items"/> sequence.
            </summary>
            <typeparam name="T">Type of the sequence item.</typeparam>
            <param name="items">The sequence to apply the <paramref name="action"/> to.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the sequence to the <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of sequence item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <returns>A new <see cref="T:System.Collections.Generic.HashSet`1"/> instance containing 
            all the unique items from the <paramref name="source"/> sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Converts the sequence to the <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of sequence item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="ensureNoDuplicates">If set to <see langword="true"/>, an exception 
            will be thrown if there are duplicates;
            otherwise result will contain only unique items.</param>
            <returns>A new <see cref="T:System.Collections.Generic.HashSet`1"/> instance containing 
            all the unique items from the <paramref name="source"/> sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts the elements of <paramref name="source"/> sequence 
            using specified <paramref name="converter"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <typeparam name="TNewItem">The type of item to convert to.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="converter">A delegate that converts each element.</param>
            <returns>A sequence of converted elements.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.CalculateHashCode``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Calculates hash code of <see cref="T:System.Collections.Generic.IEnumerable`1"/> by XOR hash codes of it's items.
             </summary>
            <param name="items">Enumerable to calculate hash for.</param>
             <typeparam name="TItem">The type of item.</typeparam>
            <returns>Hash code, calculated by enumerable items. If enumerable is null or empty returns 0.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToCommaDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <paramref name="source"/> to comma-delimited string.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <returns>Comma-delimited string containing string representation 
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToCommaDelimitedString(System.Collections.IEnumerable)">
            <summary>
            Converts the <paramref name="source"/> to comma-delimited string.
            </summary>
            <param name="source">The sequence to convert.</param>
            <returns>Comma delimited string combining string representations
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the <paramref name="source"/> to a delimited string.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">The sequence to convert.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>A delimited string combining string representations
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToDelimitedString(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts the <paramref name="source"/> to delimited string.
            </summary>
            <param name="source">The sequence to convert.</param>
            <param name="separator">The delimiter.</param>
            <returns>Delimited string containing string representation 
            of all the items from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.EqualsTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.IEnumerable`1"/> equals to another, 
            i.e. contains the same items in the same order.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="items">This <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare with.</param>
            <returns>
            <see langword="true"/> if this <see cref="T:System.Collections.Generic.IEnumerable`1"/> equals to the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Constructs <see cref="T:System.Collections.Generic.IEnumerable`1"/> from
            this <see cref="T:System.Collections.Generic.IEnumerable`1"/> and specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            by creating a <see cref="T:Xtensive.Core.Pair`2"/> from each pair of items.
            If one input <see cref="T:System.Collections.Generic.IEnumerable`1"/> is short,
            excess elements of the longer <see cref="T:System.Collections.Generic.IEnumerable`1"/> are discarded.
            </summary>
            <typeparam name="TLeft">Type of first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TRight">Type of second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="leftSequence">First <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rightSequence">Second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Zip result.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ZipExtend``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Constructs <see cref="T:System.Collections.Generic.IEnumerable`1"/> from
            this <see cref="T:System.Collections.Generic.IEnumerable`1"/> and specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            by applying <paramref name="projector"/> for each pair of items.
            If one input <see cref="T:System.Collections.Generic.IEnumerable`1"/> is short, it is extended with default values.
            </summary>
            <typeparam name="TLeft">Type of first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TRight">Type of second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="leftSequence">First <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rightSequence">Second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="projector">A delegate constructing <typeparamref name="TResult"/> from 
            <typeparamref name="TLeft"/> and <typeparamref name="TRight"/> values.</param>
            <returns>Result of applying <paramref name="projector"/> for each pair of items.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ZipExtend``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Constructs <see cref="T:System.Collections.Generic.IEnumerable`1"/> from
            this <see cref="T:System.Collections.Generic.IEnumerable`1"/> and specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            by creating a <see cref="T:Xtensive.Core.Pair`2"/> from each pair of items.
            If one input <see cref="T:System.Collections.Generic.IEnumerable`1"/> is short, it is extended with default values.
            </summary>
            <typeparam name="TLeft">Type of first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TRight">Type of second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="leftSequence">First <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rightSequence">Second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Zip result.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ToArraySafely``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If <paramref name="sequence"/> is not <see langword="null"/>, creates an array from <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Otherwise, returns empty array.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>Array of elements of <paramref name="sequence"/>
            or empty array, if <paramref name="sequence"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.GetItems(Xtensive.Core.Segment{System.Int32})">
            <summary>
            Gets the items from the segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.GetItems(Xtensive.Core.Segment{System.Int64})">
            <summary>
            Gets the items from the segment.
            </summary>
            <param name="segment">The segment.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.GetItems(Xtensive.Core.Segment{System.Int16})">
            <summary>
            Gets the items from the segment.
            </summary>
            <param name="segment">The segment.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AddOne``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Safely adds one value to sequence.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="value">Value to add to sequence.</param>
            <returns>New sequence with both <paramref name="source"/> and <paramref name="value"/> items inside without duplicates.</returns>
            <remarks>If source sequence is null, it's equals to empty sequence. If value is null, it will not added to result sequence.</remarks>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="firstFastCount">The count of the source sequence's items 
            which will be returned without batching.</param>
            <param name="initialBatchSize">The initial size of a batch.</param>
            <param name="maximalBatchSize">The maximal sized of a batch.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into batches.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="firstFastCount">The count of the source sequence's items 
            which will be returned without batching.</param>
            <returns>The source sequence split into batches.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ApplyBefore``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action)">
            <summary>
            Invokes the specified delegate before the enumeration of each batch.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The delegate that will be invoked before 
            the enumeration of each batch.</param>
            <returns>The source sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ApplyAfter``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action)">
            <summary>
            Invokes the specified delegate after the enumeration of each batch.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The delegate that will be invoked after 
            the enumeration of each batch.</param>
            <returns>The source sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.ApplyBeforeAndAfter``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action,System.Action)">
            <summary>
            Invokes specified delegates before and after the enumeration of each batch.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="beforeAction">The delegate that will be invoked before 
            the enumeration of each batch. Set this parameter to <see langword="null" /> to omit 
            the invocation.</param>
            <param name="afterAction">The delegate that will be invoked after 
            the enumeration of each batch. Set this parameter to <see langword="null" /> to omit 
            the invocation.</param>
            <returns>The source sequence.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Boolean)">
            <summary>
            Flattens the item's hierarchy.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="root">The root of the hierarchy.</param>
            <param name="childrenExtractor">The children extractor. It's always executed 
            before a root item will be returned.</param>
            <param name="exitAction">This action is always executed after a root item 
            was returned.</param>
            <param name="rootFirst">If set to <see langword="true"/> then a root item 
            will be returned before its children.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all items in the 
            specified hierarchy.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whenever specified sequence contains at least <paramref name="numberOfElements"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="numberOfElements">The number of elements.</param>
            <returns><see langword="true"/> if <paramref name="sequence"/> contains at least <paramref name="numberOfElements"/>;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whenever specified sequence contains at most <paramref name="numberOfElements"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="numberOfElements">The number of elements.</param>
            <returns><see langword="true"/> if <paramref name="sequence"/> contains at most <paramref name="numberOfElements"/>;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xtensive.Core.EnumerableExtensions.SortTopologically``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Sorts <paramref name="values"/> in topological order according to <paramref name="edgeTester"/>.
            </summary>
            <typeparam name="TValue">Type of a value to sort.</typeparam>
            <param name="values">Values to sort.</param>
            <param name="edgeTester">A predicate for testing edge presence.</param>
            <returns>Topologically sorted <paramref name="values"/> if no cycles exist, otherwise null.</returns>
        </member>
        <member name="T:Xtensive.Collections.EnumerableUtils">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> related utilities.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.One``1(``0)">
            <summary>
            Gets the enumerable with one element.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <returns>Sequence with value inside.</returns>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.Unfold``1(``0,System.Func{``0,``0})">
            <summary>
            Unfolds the whole sequence from its <paramref name="first"/> item.
            If <paramref name="first"/> is <see langword="null" />,
            an empty sequence is returned.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <param name="first">The first item.</param>
            <param name="next">The delegate returning the next item by the current one.
            The enumeration continues until it returns <see langword="null" />.</param>
            <returns>Unfolded sequence of items 
            starting from the <paramref name="first"/> one.</returns>
        </member>
        <member name="M:Xtensive.Collections.EnumerableUtils.Unfold``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Unfolds the whole sequence from its <paramref name="first"/> item.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
            <param name="first">The first item.</param>
            <param name="include">The delegate indicating whether to include the current item
            into the sequence or not. Enumeration continues until this method returns
            <see langword="false" />.</param>
            <param name="next">The delegate returning the next item by the current one.</param>
            <returns>
            Unfolded sequence of items
            starting from the <paramref name="first"/> one.
            </returns>
        </member>
        <member name="T:Xtensive.Collections.EnumerableUtils`1">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> related utilities.
            </summary>
            <typeparam name="TItem">The type of enumerated item.</typeparam>
        </member>
        <member name="P:Xtensive.Collections.EnumerableUtils`1.Empty">
            <summary>
            Gets the empty sequence.
            </summary>
            <returns>Empty sequence.</returns>
        </member>
        <member name="P:Xtensive.Collections.EnumerableUtils`1.EmptyEnumerator">
            <summary>
            Gets the enumerator of empty sequence.
            </summary>
            <returns>The enumerator of empty sequence.</returns>
        </member>
        <member name="T:Xtensive.Collections.ExtensionCollection">
            <summary>
            Default <see cref="T:Xtensive.Collections.IExtensionCollection"/> implementation (<see cref="T:Xtensive.Core.ILockable">lockable</see>).
            </summary>
        </member>
        <member name="T:Xtensive.Collections.IExtensionCollection">
            <summary>
            A collection of type-based extensions.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Get``1">
            <summary>
            Gets the extension of type <typeparamref name="T"/> from the collection.
            </summary>
            <typeparam name="T">The type of extension to get.</typeparam>
            <returns>The extension of type <typeparamref name="T"/>, if exists;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Get(System.Type)">
            <summary>
            Gets the extension of type <paramref name="extensionType"/> from the collection.
            </summary>
            <param name="extensionType">The type of extension to get.</param>
            <returns>The extension of type <paramref name="extensionType"/>, if exists;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Set``1(``0)">
            <summary>
            Adds \ replaces the extension of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The type of extension to add \ replace.</typeparam>
            <param name="value">The extension to add \ replace.</param>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Set(System.Type,System.Object)">
            <summary>
            Adds \ replaces the extension of type <paramref name="extensionType"/> in the collection.
            </summary>
            <param name="extensionType">The type of extension to add \ replace.</param>
            <param name="value">The extension to add \ replace.</param>
        </member>
        <member name="M:Xtensive.Collections.IExtensionCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IExtensionCollection.Count">
            <summary>
            Gets the number of elements contained in a collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Set``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Set(System.Type,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ExtensionCollection.#ctor(Xtensive.Collections.IExtensionCollection)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source to copy into this collection.</param>
        </member>
        <member name="P:Xtensive.Collections.ExtensionCollection.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.FlagRegistry`2">
            <summary>
            Flag registry. An item could be registered multiple times with the different flags. 
            Flags usually is an <see cref="T:System.Enum"/> descendant.
            </summary>
            <typeparam name="TFlag">The type of the flag.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.Register(`1)">
            <summary>
            Registers the specified item in this instance.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.GetFlags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.GetItems(`0)">
            <summary>
            Gets the items by specified flag.
            </summary>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagRegistry`2.#ctor(System.Func{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="flagExtractor">The flag extractor.</param>
        </member>
        <member name="P:Xtensive.Collections.FlagRegistry`2.Count">
            <summary>
            Gets the total count of items registered in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ITopDeque`2">
            <summary>
            "Top deque" contract - a combination of double-ended queue and dictionary.
            This class is normally used to build LRU caches.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the to get the value by its key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/>, if operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryGetValue(`0,System.Boolean,`1@)">
            <summary>
            Tries the to get the value by its key.
            </summary>
            <param name="key">The key.</param>
            <param name="moveToTop">Indicates whether item must be moved to the top, if found.</param>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/>, if operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.TryChangeValue(`0,`1,System.Boolean,System.Boolean,`1@)">
            <summary>
            Tries to the change value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="moveToTop">Indicates whether item must be moved to the top, if found.</param>
            <param name="replaceIfExists">Indicates whether value must be replaced, if specified key is found.</param>
            <param name="oldValue">The old value.</param>
            <returns>
            <see langword="true"/>, if change occurred;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Contains(`0)">
            <summary>
            Determines whether collection contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/>, if specified key is found;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.PopTop">
            <summary>
            Gets the top item and removes it from the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.PopBottom">
            <summary>
            Gets the top item and removes it from the collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.MoveToTop(`0)">
            <summary>
            Moves the item with the specified key to top.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.MoveToBottom(`0)">
            <summary>
            Moves the item with the specified key to bottom.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.AddToTop(`0,`1)">
            <summary>
            Adds the new item to top.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.AddToBottom(`0,`1)">
            <summary>
            Adds the new item to bottom.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Remove(`0)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Xtensive.Collections.ITopDeque`2.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value>The item with the specified key.</value>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Top">
            <summary>
            Gets the top item without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.Bottom">
            <summary>
            Gets the bottom item without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.TopKey">
            <summary>
            Gets the top key without removing it from the collection.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ITopDeque`2.BottomKey">
            <summary>
            Gets the bottom key without removing it from the collection.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Copy``1(System.Collections.Generic.IList{``0},``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Copy``1(System.Collections.Generic.IList{``0},System.Array,System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small or multidimensional.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns an enumerable enumerating specified <paramref name="list"/> in backward direction.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="list">The list to enumerate in backward direction.</param>
            <returns>Enumerable enumerating specified <paramref name="list"/> in backward direction.</returns>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.Segment``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Enumerates segment of a list.
            </summary>
            <typeparam name="TItem">The type of the list item.</typeparam>
            <param name="items">The list to enumerate the segment of.</param>
            <param name="offset">Segment offset.</param>
            <param name="length">Segment length.</param>
            <returns>An enumerable iterating through the segment.</returns>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.EnsureIndexIsValid``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensures <paramref name="index"/> is in range of <paramref name="list"/> indexes.
            </summary>
            <param name="list">List to use the index range of.</param>
            <param name="index">Index value to check.</param>
            <exception cref="T:System.IndexOutOfRangeException">Specified index is not valid for the specified list.</exception>
        </member>
        <member name="M:Xtensive.Core.ListExtensions.EnsureIndexIsValid(System.Collections.IList,System.Int32)">
            <summary>
            Ensures <paramref name="index"/> is in range of <paramref name="list"/> indexes.
            </summary>
            <param name="list">List to use the index range of.</param>
            <param name="index">Index value to check.</param>
            <exception cref="T:System.IndexOutOfRangeException">Specified index is not valid for the specified list.</exception>
        </member>
        <member name="T:Xtensive.Collections.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Collections.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlySet`1">
            <summary>
            Read-only set (<see cref="T:Xtensive.Collections.ISet`1"/>) wrapper.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.RemoveWhere(System.Predicate{`0})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.#ctor(Xtensive.Collections.ISet{`0},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="set">The set to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="set"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlySet`1.#ctor(Xtensive.Collections.ISet{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="set">The set to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlySet`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistration">
            <summary>
            Describes a single type registration call to <see cref="T:Xtensive.Collections.TypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.Equals(Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.op_Equality(Xtensive.Collections.TypeRegistration,Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.op_Inequality(Xtensive.Collections.TypeRegistration,Xtensive.Collections.TypeRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Reflection.Assembly)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="assembly">The assembly to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistration.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="assembly">The assembly to register.</param>
            <param name="namespace">The namespace to register.</param>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Type">
            <summary>
            Gets the type registered by this action.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Assembly">
            <summary>
            Gets the assembly registered by this action.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistration.Namespace">
            <summary>
            Gets the namespace registered by this action.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistrationProcessorBase">
            <summary>
            Abstract base class for <see cref="T:Xtensive.Collections.ITypeRegistrationProcessor"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration)">
            <summary>
            Processes the specified registration in the specified registration context.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The action.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration,System.Type)">
            <summary>
            Processes the single type registration.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The registration.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistrationProcessorBase.IsAcceptable(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration,System.Type)">
            <summary>
            Determines whether the specified type is acceptable for registration.
            </summary>
            <param name="registry">The type registry.</param>
            <param name="registration">The currently processed registration.</param>
            <param name="type">The type to check.</param>
            <returns>
              <see langword="true"/> if the specified type is acceptable for registration;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistrationProcessorBase.BaseType">
            <summary>
            Gets base type.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.TypeRegistry">
            <summary>
            <see cref="T:System.Type"/> registration endpoint.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Contains(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is contained in this instance.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to search for.</param>
            <returns><see langword="True"/> if the <see cref="T:System.Type"/> is found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Type)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Reflection.Assembly)">
            <summary>
            Invoke this method to register types from the specified <see cref="T:System.Reflection.Assembly"/>.
            Search is restricted by assembly only.
            </summary>
            <param name="assembly">Assembly to search for types.</param>
            <exception cref="T:System.InvalidOperationException">When <see cref="M:System.Reflection.Assembly.GetTypes"/> 
            method call has thrown an exception or if no suitable types were found.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="assembly"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(System.Reflection.Assembly,System.String)">
            <summary>
            Invoke this method to register types from the specified <see cref="T:System.Reflection.Assembly"/>.
            Search is restricted by assembly and namespace.
            </summary>
            <param name="assembly">Assembly to search for types.</param>
            <param name="namespace">Namespace to search for types.</param>
            <exception cref="T:System.InvalidOperationException">When <see cref="M:System.Reflection.Assembly.GetTypes"/> 
            method call has thrown an exception or if no suitable types were found.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="assembly"/> is null 
            or <paramref name="namespace"/> is empty string.</exception>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Register(Xtensive.Collections.TypeRegistration)">
            <summary>
            Registers the specified <see cref="T:Xtensive.Collections.TypeRegistration"/> for delayed processing.
            </summary>
            <param name="action">The type registration to register.</param>
            <returns><see langword="true"/> if specified registration was successfully added;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.#ctor(Xtensive.Collections.ITypeRegistrationProcessor)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="processor">The registry action processor.</param>
        </member>
        <member name="M:Xtensive.Collections.TypeRegistry.#ctor(Xtensive.Collections.TypeRegistry)">
            <summary>
            This constructor is used to clone the instance.
            </summary>
            <param name="source">The type registry to clone the state of.</param>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistry.Assemblies">
            <summary>
            Gets assemblies containing registered types.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.TypeRegistry.Count">
            <summary>
            Gets the number of types registered in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.CastingComparer`2">
            <summary>
            Casting comparer - wraps some other comparer for type <typeparamref name="TTarget"/>
            </summary>
            <typeparam name="TSource">The type to compare.</typeparam>
            <typeparam name="TTarget">The base type of <typeparamref name="TSource"/> to provide a comparer for.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparerBase`1">
            <summary>
            Base class for <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> implementations.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.IAdvancedComparer`1">
            <summary>
            Interface for any comparer supported by <see cref="T:Xtensive.Comparison.ComparerProvider"/>.
            </summary>
            <typeparam name="T">The type of values this comparer can compare.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.IAdvancedComparerBase">
            <summary>
            Very base interface for any comparer supported by <see cref="T:Xtensive.Comparison.IComparerProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.IAdvancedComparerBase.Provider">
            <summary>
            Gets the provider this comparer is associated with.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.IAdvancedComparerBase.ComparisonRules">
            <summary>
            Gets comparison rules used by this comparer.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.IHasRangeInfo`1">
            <summary>
            "An object providing <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/>" contract.
            </summary>
            <typeparam name="T">Type of the value range boundaries.</typeparam>
        </member>
        <member name="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo">
            <summary>
            Gets the <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> object describing the range of type <typeparamref name="T"/>.
            </summary>
            <value>The <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> object.</value>
        </member>
        <member name="T:Xtensive.Comparison.INearestValueProvider`1">
            <summary>
            Provides nearest values for the specified value of specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)">
            <summary>
            Gets the nearest value in the specified direction.
            </summary>
            <param name="value">The initial value for which nearest value should be provided.</param>
            <param name="direction">The direction of the nearest value relative to <paramref name="value"/>.</param>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.ApplyRules(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Creates a new instance of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> 
            with specified comparison rules applied.
            </summary>
            <param name="rules">Rules to apply (relatively to <see cref="T:Xtensive.Comparison.ComparisonRules"/> of this comparer).</param>
            <returns>New instance of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.GetAsymmetric``1">
            <summary>
            Gets the instance of <see cref="T:Xtensive.Comparison.IComparer`2"/> (asymmetric comparer)
            for <typeparamref name="T"/>-<typeparamref name="TSecond"/> pair, if supported.
            </summary>
            <typeparam name="TSecond">Type of the second argument to compare.</typeparam>
            <exception cref="T:System.InvalidOperationException">Complex comparer could not be 
            created for <typeparamref name="T"/>-<typeparamref name="TSecond"/> pair.</exception>
            <returns><see cref="T:Xtensive.Comparison.IComparer`2"/> asymmetric comparer.</returns>
        </member>
        <member name="M:Xtensive.Comparison.IAdvancedComparer`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerBase`1.ComparisonRules">
            <summary>
            Gets comparison rules used by this comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerBase`1.DefaultDirectionMultiplier">
            <summary>
            Multiplier for default direction in <see cref="F:Xtensive.Comparison.AdvancedComparerBase`1.ComparisonRules"/>
            (either <see langword="1"/> or <see langword="-1"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.ApplyRules(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetAsymmetric``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetNearestValue(`0,Xtensive.Core.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.GetArithmetic">
            <summary>
            Gets default <see cref="T:Xtensive.Arithmetic.IArithmetic`1"/> for type <typeparamref name="T"/>.
            </summary>
            <returns>Default arithmetic.</returns>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Creates new comparer of the same type, but using different comparison rules.
            </summary>
            <param name="rules">Comparison rules for the new comparer (relatively to this one).</param>
            <returns>New comparer of the same type, but using different comparison rules.</returns>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerBase`1.OnDeserialization(System.Object)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.OnDeserialization(System.Object)" copy="true"/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.Xtensive#Comparison#IAdvancedComparerBase#ComparisonRules">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparerBase`1.ValueRangeInfo">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.Compare(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.Equals(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetHashCode(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetNearestValue(`1,Xtensive.Core.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.GetAsymmetric``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.CastingComparer`2.#ctor(Xtensive.Comparison.AdvancedComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.IComparer`2">
            <summary>
            Coompares type <typeparamref name="TX"/> with <typeparamref name="TY"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.IComparer`2.Compare(`0,`1)">
            <summary>
            Compares <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <param name="x">First value to compare.</param>
            <param name="y">Second value to compare.</param>
            <returns><see langword="-1"/> if <c>x &lt; y</c>, <see langword="1"/> if <c>x &gt; y</c>; 
            otherwise, <see langword="0"/>.</returns>
        </member>
        <member name="T:Xtensive.Comparison.ISystemComparer`1">
            <summary>
            Tagging interface specifying that comparer overrides
            <see cref="T:Xtensive.Comparison.SystemComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to override the system comparer for.</typeparam>
        </member>
        <member name="T:Xtensive.Comparison.WrappingComparer`2">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>s.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
            <typeparam name="TBase">Base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`2.BaseComparer">
            <summary>
            Comparer delegates for <typeparamref name="TBase"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.WrappingComparer`2.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparerStruct`1">
            <summary>
            A struct providing faster access for key <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> delegates.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> generic argument.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Default">
            <summary>
            Gets <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/> for <see cref="P:Xtensive.Comparison.AdvancedComparer`1.Default"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.System">
            <summary>
            Gets <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/> for <see cref="P:Xtensive.Comparison.AdvancedComparer`1.System"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Comparer">
            <summary>
            Gets the underlying comparer for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Compare">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.Equals">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.GetHashCode">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.GetNearestValue">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparerStruct`1.ValueRangeInfo">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> value used by the underlying comparer.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.op_Implicit(Xtensive.Comparison.AdvancedComparer{`0})~Xtensive.Comparison.AdvancedComparerStruct{`0}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> to <see cref="T:Xtensive.Comparison.AdvancedComparerStruct`1"/>.
            </summary>
            <param name="comparer">Comparer to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.#ctor(Xtensive.Comparison.AdvancedComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparerStruct`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.CompareTo(`0)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.Equals(`0)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Comparison.NoSystemComparerHandler`1.GetHashCode">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="T:Xtensive.Comparison.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ReferenceEqualityComparer`1">
            <summary>
            Compares two objects by their reference values.
            </summary>
            <typeparam name="T">Type of the object to compare.</typeparam>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.SingletonDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="F:Xtensive.Comparison.ReferenceEqualityComparer`1.Instance">
            <see cref="P:Xtensive.Internals.DocTemplates.SingletonDocTemplate.Instance" copy="true"/>
        </member>
        <member name="M:Xtensive.Comparison.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.SystemComparer`1">
            <summary>
            <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> wrapper for system comparers.
            </summary>
            <typeparam name="T">Type to compare.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.SystemComparer`1.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.CreateNew(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.SystemComparerProvider">
            <summary>
            Provides <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> wrappers for system comparers.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ComparerProvider">
            <summary>
            Default <see cref="T:System.Collections.Generic.IComparer`1"/> provider. 
            Provides default comparer for the specified type.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="T:Xtensive.Comparison.IComparerProvider">
            <summary>
            Provides <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> comparers.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.IComparerProvider.GetComparer``1">
            <summary>
            Gets comparer for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to get the comparer for.</typeparam>
            <returns>Comparer for <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.GetComparer``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.CreateAssociate``2(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.ConvertAssociate``3(``1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparerProvider.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparerProvider.Default">
            <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true"/>
        </member>
        <member name="P:Xtensive.Comparison.ComparerProvider.System">
            <summary>
            Gets system comparer provider.
            A shortcut to <see cref="P:Xtensive.Comparison.SystemComparerProvider.Instance"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.SystemComparerProvider.CreateAssociate``2(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.SystemComparerProvider.Instance">
            <summary>
            Gets the only instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WellKnown.OrdinalMaxChar">
            <summary>
            Returns <see cref="F:System.Char.MaxValue"/>
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WellKnown.CultureSensitiveMaxChar">
            <summary>
            Returns "\uDBFF\uDFFF"
            </summary>
        </member>
        <member name="T:Xtensive.Core.ConfigurationCollection`1">
            <summary>
            A typed version of <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <typeparam name="T">The type of the collection item.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.CreateNewElement">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ConfigurationCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Xtensive.Core.ConfigurationCollection`1.Item(System.String)">
            <summary>
            Gets the element by specified identifier.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IBiconverter`2">
            <summary>
            Provides bidirectional conversion support.
            </summary>
            <typeparam name="TFrom">The 1st type to convert.</typeparam>
            <typeparam name="TTo">The 2nd type to convert.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IBiconverter`2.ConvertForward(`0)">
            <summary>
            Converts the value forward.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Conversion.IBiconverter`2.ConvertBackward(`1)">
            <summary>
            Converts the value backward.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterBase">
            <summary>
            Base class for any advanced converter.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterBase">
            <summary>
            Tagging interface for any converter supported by
            <see cref="T:Xtensive.Conversion.AdvancedConverterProvider"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverterBase.Provider">
            <summary>
            Gets the provider this converter is associated with.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterBase.#ctor(Xtensive.Conversion.IAdvancedConverterProvider)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">The provider this advanced converter is bound to.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterBase.OnDeserialization(System.Object)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.OnDeserialization(System.Object)"/>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterBase.Provider">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverter`2">
            <summary>
            Converts values or instances of type <typeparamref name="TFrom"/> to 
            values or instances of type <typeparamref name="TTo"/>.
            </summary>
            <typeparam name="TFrom">The type of value to convert.</typeparam>
            <typeparam name="TTo">The type of converted value.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)">
            <summary>
             Converts specified value of <typeparamref name="TFrom"/> type
             to <typeparamref name="TTo"/> type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.StrictAdvancedConverterBase`1.Convert(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Conversion.StrictAdvancedConverterBase`1.IsRough">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Conversion.RoughAdvancedConverterBase.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterFactory`1">
            <summary>
            A factory class creating complex <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/>.
            Usually implemented instead of converter for some complex type, e.g.
            <see cref="T:System.Nullable`1"/> to handle requests for its converters.
            </summary>
            <typeparam name="TFrom">The source type (the type to convert from).</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterFactory`1.CreateForwardConverter``1">
            <summary>
            Creates forward-converting converter.
            </summary>
            <typeparam name="TTo">The destination type (the type to convert to).</typeparam>
            <returns>Forward-converting converter.</returns>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterFactory`1.CreateBackwardConverter``1">
            <summary>
            Creates backward-converting converter.
            </summary>
            <typeparam name="TTo">The destination type (the type to convert to).</typeparam>
            <returns>Backward-converting converter.</returns>
        </member>
        <member name="T:Xtensive.Conversion.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.Configuration.ConfigurationSection">
            <summary>
            A root element of diagnostics configuration section within a configuration file.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.Configuration.ConfigurationSection.DefaultSectionName">
            <summary>
            Gets default section name for diagnostics configuration.
            Value is "Xtensive.Diagnostics".
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.ConfigurationSection.Logs">
            <summary>
            Gets the collection of domain configurations.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.Configuration.LogElement">
            <summary>
            Log configuration element.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.Name">
            <summary>
            Gets or sets the name of the log.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.Provider">
            <summary>
            Gets or sets log provider name.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.Format">
            <summary>
            Gets or sets log format kind.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.Events">
            <summary>
            Gets or sets logged event types.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.FileName">
            <summary>
            Gets or sets the name of the log file, if underlying <see cref="P:Xtensive.Diagnostics.Configuration.LogElement.Provider"/> requires this.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.Configuration.LogElement.FormatString">
            <summary>
            Gets or sets the format string to use.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.ConsoleLog">
            <summary>
            Console log implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.ConsoleLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.ConsoleLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.FileLog">
            <summary>
            Console log implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.FileLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.FileLog.#ctor(System.String,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.ErrorLog">
            <summary>
            Error log implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.ErrorLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.ErrorLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.DebugLog">
            <summary>
            Debug log implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.DebugLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.DebugLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.LogProviderType">
            <summary>
            Enumerates supported log providers.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.Null">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.NullLog"/> provider.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.Console">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.ConsoleLog"/> provider.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.Debug">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.DebugLog"/> provider.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.Error">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.DebugLog"/> provider.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.File">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.FileLog"/> provider.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogProviderType.DebugOnlyConsole">
            <summary>
            Refers to <see cref="T:Xtensive.Diagnostics.DebugOnlyConsoleLog"/> provider.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.ILogProvider">
            <summary>
            Log provider contract.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.ILogProvider.GetLog(System.String)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> object by its <paramref name="key"/>.
            </summary>
            <param name="key">The key to get the log for.</param>
            <returns>The <see cref="T:Xtensive.Diagnostics.ILog"/> object.</returns>
        </member>
        <member name="T:Xtensive.Diagnostics.LogEventTypesExtensions">
            <summary>
            <see cref="T:Xtensive.Diagnostics.LogEventTypes"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogEventTypesExtensions.ToShortString(Xtensive.Diagnostics.LogEventTypes)">
            <summary>
            Converts <see cref="T:Xtensive.Diagnostics.LogEventTypes"/> to short string.
            </summary>
            <param name="logEventType">Type of event to convert.</param>
            <returns>Short representation of <paramref name="logEventType"/>.</returns>
        </member>
        <member name="T:Xtensive.Diagnostics.LogFormat">
            <summary>
            Log format.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogFormat.Default">
            <summary>
            Default log format.
            The same as <see cref="F:Xtensive.Diagnostics.LogFormat.Comprehensive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogFormat.Comprehensive">
            <summary>
            Comprehensive log format.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogFormat.Release">
            <summary>
            Release log format.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogFormat.Simple">
            <summary>
            Simple log format.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogFormat.Custom">
            <summary>
            Custom log format.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogProvider">
            <summary>
            Provides (creates or resolves) <see cref="T:Xtensive.Diagnostics.ILog"/> instances by their name.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.SingletonDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProvider.GetLog(System.String)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> object by its <paramref name="key"/>.
            </summary>
            <param name="key">The key to get the log for.</param>
            <returns>The <see cref="T:Xtensive.Diagnostics.ILog"/> object.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProvider.GetLog(System.Type)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> object for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the log for.</param>
            <returns>The <see cref="T:Xtensive.Diagnostics.ILog"/> object.</returns>
        </member>
        <member name="P:Xtensive.Diagnostics.LogProvider.Instance">
            <see cref="P:Xtensive.Internals.DocTemplates.SingletonDocTemplate.Instance" copy="true"/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogProvider.NullLog">
            <summary>
            Gets <see cref="T:Xtensive.Diagnostics.ILog"/> object forwarding logging messages to nothing.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogProvider.ConsoleLog">
            <summary>
            Gets <see cref="T:Xtensive.Diagnostics.ILog"/> object forwarding logging messages to console.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogProvider.DebugLog">
            <summary>
            Gets <see cref="T:Xtensive.Diagnostics.ILog"/> object forwarding logging messages to debug output.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogProvider.ErrorLog">
            <summary>
            Gets <see cref="T:Xtensive.Diagnostics.ILog"/> object forwarding logging messages to error output.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogProviderImplementation">
            <summary>
            Default <see cref="T:Xtensive.Diagnostics.ILogProvider"/> implementation.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogProviderImplementationBase">
            <summary>
            Base type for log providers.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementationBase.GetLog(System.String)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> object by its <paramref name="key"/>.
            </summary>
            <param name="key">The key to get the log for.</param>
            <returns>The <see cref="T:Xtensive.Diagnostics.ILog"/> object.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementationBase.CreateLog(System.String)">
            <summary>
            Creates the log.
            </summary>
            <param name="key">The key.</param>
            <returns><see cref="T:Xtensive.Diagnostics.ILog"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementationBase.GetLogImplementation(Xtensive.Diagnostics.IRealLog)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.ILog"/> instance.
            </summary>
            <param name="realLog">The real log.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementationBase.GetRealLog(System.String)">
            <summary>
            Gets the <see cref="T:Xtensive.Diagnostics.IRealLog"/> instance.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementation.GetLogImplementation(Xtensive.Diagnostics.IRealLog)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogProviderImplementation.GetRealLog(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Diagnostics.LogImplementation">
            <summary>
            Default log implementation (see <see cref="T:Xtensive.Diagnostics.LogImplementationBase"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogImplementationBase">
            <summary>
            Actual <see cref="T:Xtensive.Diagnostics.ILog"/> implementation
            forwarding all the events to its <see cref="P:Xtensive.Diagnostics.LogImplementationBase.RealLog"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.ILog">
            <summary>
            Log implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Debug(System.String,System.Object[])">
            <summary>
            Writes debug message to log.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes debug message to log.
            </summary>
            <param name="exception">The internal exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Debug(System.Exception)">
            <summary>
            Writes debug message to log.
            </summary>
            <param name="exception">The internal exception.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.DebugRegion(System.String,System.Object[])">
            <summary>
            Creates an indented and titled region in log.
            The region boundaries are logged as debug messages.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>An <see cref="T:System.IDisposable"/>, which disposal will
            "close" the region.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Info(System.String,System.Object[])">
            <summary>
            Writes info message to log.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes info message to log.
            </summary>
            <param name="exception">The internal exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Info(System.Exception)">
            <summary>
            Writes info message to log.
            </summary>
            <param name="exception">The internal exception.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.InfoRegion(System.String,System.Object[])">
            <summary>
            Creates an indented and titled region in log.
            The region boundaries are logged as info messages.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>
            An <see cref="T:System.IDisposable"/>, which disposal will "close" the region.
            </returns>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Warning(System.String,System.Object[])">
            <summary>
            Writes warning message to log.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Writes warning message to log.
            </summary>
            <param name="exception">The internal exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Warning(System.Exception)">
            <summary>
            Writes warning message to log.
            </summary>
            <param name="exception">The internal exception.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Error(System.String,System.Object[])">
            <summary>
            Writes error message to log.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes error message to log.
            </summary>
            <param name="exception">The internal exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.Error(System.Exception)">
            <summary>
            Writes error message to log.
            </summary>
            <param name="exception">The internal exception.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.FatalError(System.String,System.Object[])">
            <summary>
            Writes fatal error message to log.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.FatalError(System.Exception,System.String,System.Object[])">
            <summary>
            Writes fatal error message to log.
            </summary>
            <param name="exception">The internal exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.ILog.FatalError(System.Exception)">
            <summary>
            Writes fatal error message to log.
            </summary>
            <param name="exception">The internal exception.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.ILog.RealLog">
            <summary>
            Gets <see cref="T:Xtensive.Diagnostics.IRealLog"/> object that finally processes all the calls 
            to this <see cref="T:Xtensive.Diagnostics.ILog"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.UpdateCachedProperties">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.GetFormattedMessage(System.String,System.Object[])">
            <summary>
            Gets the formatted message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Debug(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Debug(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Debug(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.DebugRegion(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Info(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Info(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Info(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.InfoRegion(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Warning(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Warning(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Error(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Error(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.FatalError(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.FatalError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.Xtensive#Core#IContext{Xtensive#Diagnostics#LogCaptureScope}#Activate">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementationBase.#ctor(Xtensive.Diagnostics.IRealLog)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="realLog">Real log to wrap.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.LogImplementationBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogImplementationBase.Text">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogImplementationBase.RealLog">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogImplementationBase.LoggedEventTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogImplementationBase.Xtensive#Core#IContext#IsActive">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogImplementation.#ctor(Xtensive.Diagnostics.IRealLog)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="realLog">Real log to wrap.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.NullLog">
            <summary>
            Null log implementation. Does nothing.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.NullLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="T:Xtensive.Core.ActivationException">
            <summary>
            Thrown by <see cref="T:Xtensive.IoC.ServiceContainerBase"/> on activation errors.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Core.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Core.Cloner">
            <summary>
            Object cloning helper.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Cloner.Clone``1(``0)">
            <summary>
            Clones the <paramref name="source"/> using 
            provided <see cref="F:Xtensive.Core.Cloner.Formatter"/>.
            </summary>
            <param name="source">The source to clone.</param>
        </member>
        <member name="T:Xtensive.Core.DelegateBindExtensions">
            <summary>
            Extension methods for binding delegates to parameters.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``2(System.Func{``0,``1},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``3(System.Func{``0,``1,``2},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``6(System.Func{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``1(System.Action{``0},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``2(System.Action{``0,``1},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``3(System.Action{``0,``1,``2},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``5(System.Action{``0,``1,``2,``3,``4},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``6(System.Action{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="M:Xtensive.Core.DelegateBindExtensions.Bind``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>Binds first argument to specified delegate.</summary>
            <returns> A delegate that takes the rest of arguments of original delegate.</returns>
        </member>
        <member name="T:Xtensive.Core.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToString(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Formats the <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to format.</param>
            <param name="inCSharpNotation">If set to <see langword="true"/>, 
            the result will be returned in C# notation 
            (<see cref="T:Xtensive.Linq.ExpressionWriter"/> will be used).</param>
            <returns>A string containing formatted expression.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.IsNull(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is <see cref="T:System.Linq.Expressions.ConstantExpression"/> 
            with <see langword="null"/> <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <see langword="true"/> if the specified expression is null; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.BindParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])">
            <summary>
            Bind parameter expressions to <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="lambdaExpression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to bind parameters.</param>
            <param name="parameters"><see cref="T:System.Linq.Expressions.Expression"/>s to bind to <paramref name="lambdaExpression"/></param>
            <returns>Body of <paramref name="lambdaExpression"/> with lambda's parameters replaced 
            with corresponding expression from <paramref name="parameters"/></returns>
            <exception cref="T:System.InvalidOperationException">Something went wrong :(.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToSerializableExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts specified <see cref="T:System.Linq.Expressions.Expression"/> to <see cref="T:Xtensive.Linq.SerializableExpressions.SerializableExpression"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>Serializable expression that represents <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.ToExpression(Xtensive.Linq.SerializableExpressions.SerializableExpression)">
            <summary>
            Converts specified <see cref="T:Xtensive.Linq.SerializableExpressions.SerializableExpression"/> to <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetReturnType(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets return type of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            This method is used to write code that is compilable on .NET 3.5,
            which do not have corresponding property.
            </summary>
            <param name="lambda">Expression to get return type for.</param>
            <returns>Return type of <paramref name="lambda"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">The root node of expression isn't of <see cref="T:System.Linq.Expressions.MemberExpression"/> type.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetField(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference field.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetProperty(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference property.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetIndexer(System.Linq.Expressions.Expression)">
            <summary>
            Gets the index <see cref="T:System.Reflection.PropertyInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.IndexExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.GetConstructor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo"/> from passed <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns><see cref="T:System.Reflection.ConstructorInfo"/> the expression references by its root <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Expression must reference event.</exception>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Strips <see cref="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)"/> expressions.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripCasts(System.Linq.Expressions.Expression)">
            <summary>
            Strips <see cref="F:System.Linq.Expressions.ExpressionType.Convert"/> and <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs"/>.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripLambda(System.Linq.Expressions.Expression)">
            <summary>
            Strips the lambda.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionExtensions.StripMemberAccessChain(System.Linq.Expressions.Expression)">
            <summary>
            Strips the chain of <see cref="T:System.Linq.Expressions.MemberExpression"/>s
            </summary>
            <param name="expression">Expression to process.</param>
            <returns><paramref name="expression"/> with chain of <see cref="T:System.Linq.Expressions.MemberExpression"/>s removed (if any).</returns>
        </member>
        <member name="T:Xtensive.IoC.ServiceAttribute">
            <summary>
            An attribute describing mapping of service implementation to service.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceAttribute.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceAttribute.#ctor(System.Type,System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Type">
            <summary>
            Gets or sets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Singleton">
            <summary>
            Gets or sets a value indicating whether this service is singleton.
            Default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceAttribute.Default">
            <summary>
            Gets or sets a value indicating whether this is default service implementation or not.
            Default value is <see langword="false" />.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ConfigurationSection">
            <summary>
            A root element of diagnostics configuration section within a configuration file.
            </summary>
        </member>
        <member name="F:Xtensive.IoC.Configuration.ConfigurationSection.DefaultSectionName">
            <summary>
            Gets default section name for IoC configuration.
            Value is "Xtensive.IoC".
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ConfigurationSection.Containers">
            <summary>
            Gets the collection of container configurations.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ContainerElement">
            <summary>
            IoC container configuration element.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Name">
            <summary>
            Gets or sets the name of the container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Type">
            <summary>
            Gets or sets the type of the container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Parent">
            <summary>
            Gets or sets the name of the parent container. 
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Explicit">
            <summary>
            Gets the collection of service configurations.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ContainerElement.Auto">
            <summary>
            Gets the automatic .
            </summary>
            <value>The types.</value>
        </member>
        <member name="T:Xtensive.IoC.Configuration.ServiceRegistrationElement">
            <summary>
            Service mapping configuration element.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.Configuration.ServiceRegistrationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.IoC.ServiceRegistration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Type">
            <summary>
            Gets or sets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.MapTo">
            <summary>
            Gets or sets the type to map the service to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.Configuration.ServiceRegistrationElement.Singleton">
            <summary>
            Indicates whether instance of service is container-level singleton or not.
            </summary>
        </member>
        <member name="T:Xtensive.Core.InheritableScope`2">
            <summary>
            Inheritable <see cref="T:Xtensive.Core.Scope`1"/> version.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TBaseAncestor">The type of the very base ancestor.</typeparam>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#ctor">
            <inheritdoc/>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.InheritableScope`2.#cctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.TypeInitializer" copy="true"/>
            </summary>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance
            of this generic type is allowed.</exception>
        </member>
        <member name="T:Xtensive.IoC.IServiceContainer">
            <summary>
            Inversion of control container contract.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IHasServices">
            <summary>
            Service provider contract.
            </summary>
        </member>
        <member name="M:Xtensive.Core.IHasServices.GetService``1">
            <summary>
            Gets the service of the specified type <typeparamref name="T"/>.
            Returns <see langword="null" />, if there is no such service.
            </summary>
            <typeparam name="T">The type of the service to get.</typeparam>
            <returns>The service of specified type.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.GetAll``1">
            <summary>
            Gets all the instances of type <typeparamref name="TService"/>
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
            A sequence of all the requested instances.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.GetAll(System.Type)">
            <summary>
            Gets all the instances of type <paramref name="serviceType"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            A sequence of all the requested instances.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get``1">
            <summary>
            Gets the instance of <typeparamref name="TService"/> type
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get``1(System.String)">
            <summary>
            Gets the instance of <typeparamref name="TService"/> type
            identified by the specified <paramref name="name"/>
            from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The identifier of the service to get.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get(System.Type)">
            <summary>
            Gets the instance of <paramref name="serviceType"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:Xtensive.IoC.IServiceContainer.Get(System.Type,System.String)">
            <summary>
            Gets the instance of <paramref name="serviceType"/>
            identified by the specified <paramref name="name"/>
            from the container.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The identifier of the service to get.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="P:Xtensive.IoC.IServiceContainer.Parent">
            <summary>
            Gets the parent service container.
            Parent service container usually resolves services that 
            can't be resolved by the current container.
            </summary>
        </member>
        <member name="T:Xtensive.IoC.ServiceContainerBase">
            <summary>
            Abstract base class for <see cref="T:Xtensive.IoC.IServiceContainer"/>
            implementation.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetAll``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetAll(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get``1(System.String)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetService(System.Type)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type,System.String)">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.GetService``1">
            <inheritdoc/>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s).</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.HandleGetAll(System.Type)">
            <summary>
            Actual implementation of <see cref="M:Xtensive.IoC.ServiceContainerBase.GetAll(System.Type)"/> method.
            </summary>
            <param name="serviceType">Type of the services to get.</param>
            <returns>The sequence of requested services.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.HandleGet(System.Type,System.String)">
            <summary>
            Actual implementation of <see cref="M:Xtensive.IoC.ServiceContainerBase.Get(System.Type,System.String)"/> method.
            </summary>
            <param name="serviceType">Type of the service to get.</param>
            <param name="name">The name of the service. <see langword="null"/>, if name is not specified.</param>
            <returns>The requested service.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.FormatActivationErrorMessage(System.Exception,System.Type)">
            <summary>
            Formats the activation error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>Formatted error message.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.FormatActivationErrorMessage(System.Exception,System.Type,System.String)">
            <summary>
            Formats the activation error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The service name.</param>
            <returns>Formatted error message.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.#ctor(Xtensive.IoC.IServiceContainer)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parent"><see cref="P:Xtensive.IoC.ServiceContainerBase.Parent"/> property value.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainerBase.Dispose">
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose"/>
        </member>
        <member name="P:Xtensive.IoC.ServiceContainerBase.Parent">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.IoC.ServiceContainer">
            <summary>
            Default IoC (inversion of control) container implementation.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.HandleGet(System.Type,System.String)">
            <inheritdoc/>
            <exception cref="T:System.Reflection.AmbiguousMatchException">Multiple services match to the specified arguments.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.HandleGetAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.CreateInstance(Xtensive.IoC.ServiceRegistration)">
            <summary>
            Creates the service instance for the specified <paramref name="serviceInfo"/>.
            </summary>
            <param name="serviceInfo">The service info.</param>
            <returns>Specified service instance.</returns>
            <exception cref="T:Xtensive.Core.ActivationException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            and with the specified <see cref="P:Xtensive.IoC.IServiceContainer.Parent"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="parent">The parent container.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,System.Object)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            with specified <paramref name="configuration"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="configuration">The container's configuration.</param>
            <returns>Created service container.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.Type,System.Object,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> of the specified type
            with the specified <see cref="P:Xtensive.IoC.IServiceContainer.Parent"/>
            and <paramref name="configuration"/>.
            </summary>
            <param name="containerType">Type of the container to create.</param>
            <param name="configuration">The container's configuration.</param>
            <param name="parent">The parent container.</param>
            <returns>Created service container.</returns>
            <exception cref="T:System.ArgumentException">Wrong container type.</exception>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by default configuration.
            </summary>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the default configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.String)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="name">The name of container configuration to create container for.</param>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(System.String,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="name">The name of container configuration to create container for.</param>
            <param name="parent">The parent container.</param>
            <returns><see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.</returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(Xtensive.IoC.Configuration.ConfigurationSection,System.String)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="section">IoC configuration section.</param>
            <param name="name">The name of container configuration to create container for.</param>
            <returns>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.Create(Xtensive.IoC.Configuration.ConfigurationSection,System.String,Xtensive.IoC.IServiceContainer)">
            <summary>
            Creates <see cref="T:Xtensive.IoC.IServiceContainer"/> by its configuration.
            </summary>
            <param name="section">IoC configuration section.</param>
            <param name="name">The name of container configuration to create container for.</param>
            <param name="parent">The parent container.</param>
            <returns>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> for the specified named configuration.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor(System.Collections.Generic.IEnumerable{Xtensive.IoC.ServiceRegistration})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceContainer.#ctor(System.Collections.Generic.IEnumerable{Xtensive.IoC.ServiceRegistration},Xtensive.IoC.IServiceContainer)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="parent">The parent container.</param>
        </member>
        <member name="T:Xtensive.Core.ServiceContainerExtensions">
            <summary>
            <see cref="T:Xtensive.IoC.IServiceContainer"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand``1(Xtensive.IoC.IServiceContainer)">
            <summary>
            Demands the specified service 
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get``1"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container to demand the service on.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand``1(Xtensive.IoC.IServiceContainer,System.String)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get``1(System.String)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container to demand the service on.</param>
            <param name="name">The service name.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand(Xtensive.IoC.IServiceContainer,System.Type)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get(System.Type)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <param name="container">The container to demand the service on.</param>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.Demand(Xtensive.IoC.IServiceContainer,System.Type,System.String)">
            <summary>
            Demands the specified service
            using <see cref="M:Xtensive.IoC.IServiceContainer.Get(System.Type,System.String)"/> method
            and ensures the result is not <see langword="null"/>.
            </summary>
            <param name="container">The container to demand the service on.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The service name.</param>
            <returns></returns>
            <exception cref="T:Xtensive.Core.ActivationException">There was an error on activation of some instance(s),
            or service is not available.</exception>
        </member>
        <member name="M:Xtensive.Core.ServiceContainerExtensions.EnsureNotNull(System.Object,System.Type,System.String)">
            <exception cref="T:Xtensive.Core.ActivationException">Service is not available.</exception>
        </member>
        <member name="T:Xtensive.IoC.ServiceRegistration">
            <summary>
            Describes single service mapping entry for <see cref="T:Xtensive.IoC.ServiceContainer"/>.
            </summary>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.CreateAll(System.Type)">
            <summary>
            Creates an array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects
            for the specified <paramref name="type"/>
            by scanning it <see cref="T:Xtensive.IoC.ServiceAttribute"/>s.
            </summary>
            <param name="type">The type to provide <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects for.</param>
            <returns>
            An array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.CreateAll(System.Type,System.Boolean)">
            <summary>
            Creates an array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects
            for the specified <paramref name="type"/>
            by scanning it <see cref="T:Xtensive.IoC.ServiceAttribute"/>s.
            </summary>
            <param name="type">The type to provide <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects for.</param>
            <param name="defaultOnly">Return just registrations for which 
            <see cref="P:Xtensive.IoC.ServiceAttribute.Default"/>==<see langword="true"/>.</param>
            <returns>
            An array of <see cref="T:Xtensive.IoC.ServiceRegistration"/> objects.
            </returns>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
            <param name="mappedInstance">The instance it is mapped to.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.String,System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
            <param name="mappedInstance">The instance it is mapped to.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
            <param name="mappedType">The type it is mapped to.</param>
            <param name="singleton">A value indicating whether this service is singleton.</param>
        </member>
        <member name="M:Xtensive.IoC.ServiceRegistration.#ctor(System.Type,System.String,System.Type,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
            <param name="mappedType">The type it is mapped to.</param>
            <param name="singleton">A value indicating whether this service is singleton.</param>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Type">
            <summary>
            Gets the type of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.MappedType">
            <summary>
            Gets the type it is mapped to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.MappedInstance">
            <summary>
            Gets the instance it is mapped to.
            </summary>
        </member>
        <member name="P:Xtensive.IoC.ServiceRegistration.Singleton">
            <summary>
            Gets a value indicating whether this service is singleton.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ExpressionCompileExtensions">
            <summary>
            Extension methods for compiling strictly typed lambda expressions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile(System.Linq.Expressions.Expression{System.Action})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``7(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``8(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``9(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``10(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``11(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``12(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``13(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``14(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="M:Xtensive.Core.ExpressionCompileExtensions.CachingCompile``15(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>Compiles the specified lambda and caches the result of compilation.</summary>
            <returns>Compiled lambda.</returns>
        </member>
        <member name="T:Xtensive.Linq.ExpressionTree">
            <summary>
            A wrapper for <see cref="T:System.Linq.Expressions.Expression"/>.
            that can be used for comparing expression trees and calculating their hash codes.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.ToExpression">
            <summary>
            Gets the underlying <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(Xtensive.Linq.ExpressionTree)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.op_Equality(Xtensive.Linq.ExpressionTree,Xtensive.Linq.ExpressionTree)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.op_Inequality(Xtensive.Linq.ExpressionTree,Xtensive.Linq.ExpressionTree)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Compares specified <see cref="T:System.Linq.Expressions.Expression"/>s by value.
            </summary>
            <param name="left">First expression to compare.</param>
            <param name="right">Second expression to compare.</param>
            <returns>true, if <paramref name="left"/> and <paramref name="right"/>
            are equal by value, otherwise false.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionTree.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
            Calculates hash code by value for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">Expression to calculate hash code for.</param>
            <returns>Hash code for <paramref name="expression"/>.</returns>
        </member>
        <member name="T:Xtensive.Linq.ConstantExtractor">
            <summary>
            An <see cref="T:Xtensive.Linq.ExpressionVisitor"/> specialized for extracting constants from specified <see cref="T:System.Linq.Expressions.Expression"/>.
            This class can be used to produce "normalized" expression with all constants extracted to additional parameter.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionVisitor">
            <summary>
            An abstract base implementation of <see cref="T:Xtensive.Linq.ExpressionVisitor`1"/>
            returning <see cref="T:System.Linq.Expressions.Expression"/> as its visit result.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionVisitor`1">
            <summary>
            Abstract <see cref="T:System.Linq.Expressions.Expression"/> visitor class.
            </summary>
            <typeparam name="TResult">Type of the visit result.</typeparam>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="e">The expression to visit.</param>
            <returns>Visit result.</returns>
            <remarks>
            <see cref="P:Xtensive.Linq.ExpressionVisitor`1.IsCaching"/> policy is enforced by this method.
            </remarks>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="expressions">The expression list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitUnknown(System.Linq.Expressions.Expression)">
            <summary>
            Visits the unknown expression.
            </summary>
            <param name="e">The unknown expression.</param>
            <returns>Visit result.</returns>
            <exception cref="T:System.NotSupportedException">Thrown by the base implementation of this method, 
            if unknown expression isn't recognized by its overrides.</exception>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary expression.
            </summary>
            <param name="u">The unary expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary expression.
            </summary>
            <param name="b">The binary expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the "type is" expression.
            </summary>
            <param name="tb">The "type is" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant expression.
            </summary>
            <param name="c">The constant expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional expression.
            </summary>
            <param name="c">The conditional expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter expression.
            </summary>
            <param name="p">The parameter expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access expression.
            </summary>
            <param name="m">The member access expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call expression.
            </summary>
            <param name="mc">The method call expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda expression.
            </summary>
            <param name="l">The lambda expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the "new" expression.
            </summary>
            <param name="n">The "new" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member initialization expression.
            </summary>
            <param name="mi">The member initialization expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list initialization expression.
            </summary>
            <param name="li">The list initialization expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the "new array" expression.
            </summary>
            <param name="na">The "new array" expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation expression.
            </summary>
            <param name="i">The invocation expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor`1.#ctor(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isCaching">Indicates whether visit result 
            should be cached and resolved by cache when possible.</param>
        </member>
        <member name="P:Xtensive.Linq.ExpressionVisitor`1.IsCaching">
            <summary>
            Gets a value indicating whether this visitor is caching.
            When visitor is caching, visit result 
            is cached and resolved by internal cache.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer expression.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original element initializer list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment expression.
            </summary>
            <param name="ma">The member assignment expression.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the member binding.
            </summary>
            <param name="binding">The member binding.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The member member binding.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original binding list.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionVisitor.#ctor(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.GetConstants">
            <summary>
            Gets an array of extracted constants.
            </summary>
            <value></value>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.Process">
            <summary>
            Extracts constants from <see cref="T:System.Linq.Expressions.LambdaExpression"/> specified in constructor.
            Result is a <see cref="T:System.Linq.Expressions.LambdaExpression"/> with one additional parameter (array of objects).
            Extra parameter is added to first position.
            </summary>
            <returns><see cref="T:System.Linq.Expressions.LambdaExpression"/> with all constants extracted to additional parameter.</returns>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lambda">An expression to process.</param>
        </member>
        <member name="M:Xtensive.Linq.ConstantExtractor.#ctor(System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.ConstantExpression,System.Boolean})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lambda">An expression to process.</param>
            <param name="constantFilter">The constant filter.
            This delegate invoked on each occurrence of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            If it returns <see langword="true"/>, constant is extracted, otherwise left untouched.
            </param>
        </member>
        <member name="T:Xtensive.Linq.FastExpression">
            <summary>
            Factory methods for various descendants of <see cref="T:System.Linq.Expressions.Expression"/> that are faster 
            than original ones.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="delegateType">A type that represents a delegate type.</param>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})"/>.
            </summary>
            <param name="delegateType">A type that represents a delegate type.</param>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.FastExpression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generates <see cref="T:System.Linq.Expressions.LambdaExpression"/> faster than <see cref="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])"/>.
            </summary>
            <param name="body">The body of lambda expression.</param>
            <param name="parameters">The parameters of lambda expression.</param>
            <returns>Constructed lambda expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionComparer.VisitMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member init.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableElementInit">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableElementInit.AddMethod">
            <summary>
            <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableElementInit.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.ElementInit.Arguments"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberListBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberBinding"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding.BindingType">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberBinding.Member">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberBinding.Member"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberListBinding.Initializers">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableExpression.NodeType">
            <summary>
            <see cref="P:System.Linq.Expressions.Expression.NodeType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableExpression.Type">
            <summary>
            <see cref="P:System.Linq.Expressions.Expression.Type"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression.NewExpression">
            <summary>
            <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableListInitExpression.Initializers">
            <summary>
            <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.IsLiftedToNull">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Left">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Right">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableBinaryExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.Test">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.IfTrue">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConditionalExpression.IfFalse">
            <summary>
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableConstantExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableConstantExpression.Value">
            <summary>
            <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableInvocationExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression.Body">
            <summary>
            <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableLambdaExpression.Parameters">
            <summary>
            <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberAssignment">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberAssignment"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberAssignment.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberExpression.Member">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberExpression.Member"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression.NewExpression">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberInitExpression.Bindings">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMemberMemberBinding">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMemberMemberBinding.Bindings">
            <summary>
            <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableMethodCallExpression.Object">
            <summary>
            <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableNewArrayExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewArrayExpression.Expressions">
            <summary>
            <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableNewExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.NewExpression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Arguments">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Arguments"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Constructor">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Constructor"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableNewExpression.Members">
            <summary>
            <see cref="P:System.Linq.Expressions.NewExpression.Members"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableParameterExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableParameterExpression.Name">
            <summary>
            <see cref="P:System.Linq.Expressions.ParameterExpression.Name"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression.Expression">
            <summary>
            <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableTypeBinaryExpression.TypeOperand">
            <summary>
            <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"/>
            </summary>
        </member>
        <member name="T:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression">
            <summary>
            A serializable representation of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression.Operand">
            <summary>
            <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/>
            </summary>
        </member>
        <member name="F:Xtensive.Linq.SerializableExpressions.SerializableUnaryExpression.Method">
            <summary>
            <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.DefaultMapper">
            <summary>
            Default concrete heir of <see cref="T:Xtensive.ObjectMapping.MapperBase`1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.MapperBase`1">
            <summary>
            A base class for O2O-mapper implementations.
            </summary>
            <typeparam name="TComparisonResult">The type of graphs comparison result.</typeparam>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.Transform(System.Object)">
            <summary>
            Transforms an object of the source type to an object of the target type.
            </summary>
            <param name="source">The source object.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.Compare(System.Object,System.Object)">
            <summary>
            Compares two object graphs of the target type and generates a set of operations
            which may be used to apply found modifications to source objects.
            </summary>
            <param name="originalTarget">The original object graph.</param>
            <param name="modifiedTarget">The modified object graph.</param>
            <returns>The <see cref="T:Xtensive.ObjectMapping.GraphComparisonResult"/>.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.OnObjectModified(Xtensive.ObjectMapping.Operation)">
            <summary>
            Called when a difference in object graphs has been found.
            </summary>
            <param name="descriptor">The descriptor of operation.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.InitializeComparison(System.Object,System.Object)">
            <summary>
            Initializes comparison process.
            </summary>
            <param name="originalTarget">The original object graph.</param>
            <param name="modifiedTarget">The modified object graph.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.GetComparisonResult(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Gets the set of operations describing found changes and the mapping from surrogate
            keys to real keys for new objects.
            </summary>
            <param name="originalObjects">The set of objects from the original graph.</param>
            <param name="modifiedObjects">The set of objects from the modified graph.</param>
            <returns>The <see cref="T:Xtensive.ObjectMapping.GraphComparisonResult"/>.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.#ctor(Xtensive.ObjectMapping.Model.MappingDescription)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingDescription">The mapping description.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperBase`1.#ctor(Xtensive.ObjectMapping.Model.MappingDescription,Xtensive.ObjectMapping.MapperSettings)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingDescription">The mapping description.</param>
            <param name="settings">The mapper settings.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.MapperBase`1.MappingDescription">
            <summary>
            Gets the mapping description.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.MapperBase`1.Settings">
            <summary>
            Gets or sets the mapper settings.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultMapper.OnObjectModified(Xtensive.ObjectMapping.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultMapper.InitializeComparison(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultMapper.GetComparisonResult(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultMapper.#ctor(Xtensive.ObjectMapping.Model.MappingDescription)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingDescription">The mapping description.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultMapper.#ctor(Xtensive.ObjectMapping.Model.MappingDescription,Xtensive.ObjectMapping.MapperSettings)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingDescription">The mapping description.</param>
            <param name="settings">The mapper settings.</param>
        </member>
        <member name="T:Xtensive.ObjectMapping.DefaultOperationLog">
            <summary>
            Default implementation of <see cref="T:Xtensive.Core.IOperationSequence"/> and operation logger.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultOperationLog.Replay(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultOperationLog.Add(Xtensive.ObjectMapping.Operation)">
            <summary>
            Adds the specified operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultOperationLog.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.DefaultOperationLog.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.ObjectMapping.DefaultOperationLog.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.ObjectMapping.GraphComparisonResult">
            <summary>
            Result of comparison the original graph of target objects with the modified one.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.GraphComparisonResult.Operations">
            <summary>
            The set of operations describing found changes.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.GraphComparisonResult.KeyMapping">
            <summary>
            The mapping from surrogate keys to real keys for new objects.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.GraphComparisonResult.#ctor(Xtensive.Core.IOperationSequence,Xtensive.Collections.ReadOnlyDictionary{System.Object,System.Object})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="operations">The set of operations describing found changes.</param>
            <param name="keyMapping">The mapping from surrogate keys to real keys for new objects.</param>
        </member>
        <member name="T:Xtensive.ObjectMapping.GraphTruncationType">
            <summary>
            Action that is taken to truncate a graph. This action is applied
            when a limit of an object graph depth has been exceeded.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.GraphTruncationType.Default">
            <summary>
            Default action.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.GraphTruncationType.Throw">
            <summary>
            Throw the exception.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.GraphTruncationType.SetDefaultValue">
            <summary>
            Set the default value to a property whose value exceeds a graph depth limit.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.IMappingBuilder">
            <summary>
            Contract for classes which build a mapping configuration for an O2O-mapper.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilder.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Registers the mapping from <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="sourceKeyExtractor">The source key extractor.</param>
            <param name="targetKeyExtractor">The target key extractor.</param>
            <returns>An instance of helper class.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilder.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``1,System.Object[]})">
            <summary>
            Registers the mapping from <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="sourceKeyExtractor">The source key extractor.</param>
            <param name="targetKeyExtractor">The target key extractor.</param>
            <param name="generatorArgumentsProvider">The provider of arguments for an
            algorithm of a new source object creation. For example, it can provide arguments for a custom
            constructor or a key generator.</param>
            <returns>An instance of helper class.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilder.MapStructure``2">
            <summary>
            Registers the mapping from <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>An instance of helper class.</returns>
        </member>
        <member name="T:Xtensive.ObjectMapping.IMappingBuilderAdapter`2">
            <summary>
            Contract of classes which helps to build a mapping configuration for an O2O-mapper.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.MapProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Registers mapping of a source property to a target property.
            </summary>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="source">The expression that calculates a value to be assigned to target property.
            It may contain the access to a target property or an arbitrary delegate.</param>
            <param name="target">The target property's expression.</param>
            <returns><see langword="this" /></returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.IgnoreProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Specifies that the property won't be converted and its modifications won't be detected.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">The target property's expression.</param>
            <returns><see langword="this" /></returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.TrackChanges``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Boolean)">
            <summary>
            Specifies whether modification of the given property will be tracked.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">The target property's expression.</param>
            <param name="isEnabled">if set to <see langword="true"/> then changes will be tracked.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.Inherit``3">
            <summary>
            Registers mapping from the <typeparamref name="TDescendantSource"/>
            to the <typeparamref name="TDescendantTarget"/>.
            </summary>
            <typeparam name="TTargetBase">The ancestor of the <typeparamref name="TDescendantTarget"/>.</typeparam>
            <typeparam name="TDescendantSource">The source type.</typeparam>
            <typeparam name="TDescendantTarget">The target type.</typeparam>
            <returns>A new instance of helper class.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.Inherit``3(System.Func{``2,System.Object[]})">
            <summary>
            Registers mapping from the <typeparamref name="TDescendantSource"/>
            to the <typeparamref name="TDescendantTarget"/>.
            </summary>
            <typeparam name="TTargetBase">The ancestor of the <typeparamref name="TDescendantTarget"/>.</typeparam>
            <typeparam name="TDescendantSource">The source type.</typeparam>
            <typeparam name="TDescendantTarget">The target type.</typeparam>
            <param name="generatorArgumentsProvider">The provider of arguments for an
            algorithm of a new source object creation. For example, it can provide arguments for a custom
            constructor or a key generator.</param>
            <returns>A new instance of helper class.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.IMappingBuilderAdapter`2.Build">
            <summary>
            Completes creation of the mapping.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.MapProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.IgnoreProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.TrackChanges``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``1,System.Object[]})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.MapStructure``2">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.Inherit``3">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.Inherit``3(System.Func{``2,System.Object[]})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.Build">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilderAdapter`2.#ctor(Xtensive.ObjectMapping.MappingBuilder)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="realBuilder">The real mapper.</param>
        </member>
        <member name="T:Xtensive.ObjectMapping.MapperSettings">
            <summary>
            Settings for O2O-mapper.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.MapperSettings.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.MapperSettings.GraphTruncationType">
            <summary>
            Gets or sets the action that is taken to truncate a graph.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.MapperSettings.GraphDepthLimit">
            <summary>
            Gets the limit of a graph depth.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.MapperSettings.EnableDynamicSourceHierarchies">
            <summary>
            Gets or sets a value indicating whether hierarchies of source types
            can be expanded by the mapper. If this option is enabled the mapper
            can transform instance of class which hasn't been registered in the mapping,
            but is descendant of a class that has been registered.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.MappingBuilder">
            <summary>
            Builder of mapping for <see cref="T:Xtensive.ObjectMapping.MapperBase`1"/>.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilder.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilder.MapType``3(System.Func{``0,``2},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``1,System.Object[]})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.MappingBuilder.MapStructure``2">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.ObjectKind">
            <summary>
            Kind of an object whose type described by a <see cref="T:Xtensive.ObjectMapping.Model.TypeDescription"/>.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.ObjectKind.Entity">
            <summary>
            The entity.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.ObjectKind.UserStructure">
            <summary>
            The user structure.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.ObjectKind.Primitive">
            <summary>
            The primitive type.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.SourcePropertyDescription">
            <summary>
            Descriptor of a property of a source mapped type.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.PropertyDescription">
            <summary>
            Description of a property of a mapped class.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.PropertyDescription.SystemProperty">
            <summary>
            Gets the underlying system property.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.PropertyDescription.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.PropertyDescription.#ctor(System.Reflection.PropertyInfo,Xtensive.ObjectMapping.Model.TypeDescription)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemProperty">The system property.</param>
            <param name="reflectedType">The the type that was used to obtain this description.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.PropertyDescription.ReflectedType">
            <summary>
            Gets the type that was used to obtain this description.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.PropertyDescription.IsCollection">
            <summary>
            Gets a value indicating whether this instance is collection property.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.PropertyDescription.CountProperty">
            <summary>
            Gets the descriptor of the collection's "Count" property.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.PropertyDescription.AddMethod">
            <summary>
            Gets the descriptor of the collection's "Add" method.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.SourcePropertyDescription.#ctor(System.Reflection.PropertyInfo,Xtensive.ObjectMapping.Model.SourceTypeDescription)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemProperty">The system property.</param>
            <param name="reflectedType">The the type that was used to obtain this description.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.SourcePropertyDescription.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.SourceTypeDescription">
            <summary>
            Description of source mapped type.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.TypeDescription">
            <summary>
            Description of mapped type.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.TypeDescription.KeyExtractor">
            <summary>
            Delegate that can be used to extract a key of an object.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.TypeDescription.Properties">
            <summary>
            Collection of properties contained in the type.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.TypeDescription.SystemType">
            <summary>
            Underlying system type.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.TypeDescription.ObjectKind">
            <summary>
            Kind of an object whose type described by this instance.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets the property.
            </summary>
            <param name="systemProperty">The system property.</param>
            <returns>The <see cref="T:Xtensive.ObjectMapping.Model.PropertyDescription"/> for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.AddProperty(Xtensive.ObjectMapping.Model.PropertyDescription)">
            <summary>
            Adds the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.#ctor(System.Type,System.Func{System.Object,System.Object})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
            <param name="keyExtractor">The key extractor.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TypeDescription.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.SourceTypeDescription.GetProperty(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.SourceTypeDescription.AddProperty(Xtensive.ObjectMapping.Model.SourcePropertyDescription)">
            <summary>
            Adds the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.SourceTypeDescription.#ctor(System.Type,System.Func{System.Object,System.Object})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
            <param name="keyExtractor">The key extractor.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.SourceTypeDescription.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.SourceTypeDescription.TargetType">
            <summary>
            Gets the corresponding target type.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.OperationType">
            <summary>
            Type of modification detected in an object graph.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.OperationType.CreateObject">
            <summary>
            Creating an object.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.OperationType.RemoveObject">
            <summary>
            Removing an object.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.OperationType.SetProperty">
            <summary>
            Setting a property value.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.OperationType.AddItem">
            <summary>
            Adding an item to a collection.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.OperationType.RemoveItem">
            <summary>
            Removing an item from a collection.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Operation">
            <summary>
            Provides information about an operation that modified state of mapped object.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Operation.Object">
            <summary>
            The target (mapped) object.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Operation.PropertyPath">
            <summary>
            The path to the property that has been modified.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Operation.Type">
            <summary>
            The operation type.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Operation.Value">
            <summary>
            The new property value or the collection item, if any.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Operation.#ctor(System.Object,Xtensive.ObjectMapping.OperationType,Xtensive.ObjectMapping.Model.TargetPropertyDescription[],System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="obj">The value of <see cref="F:Xtensive.ObjectMapping.Operation.Object"/>.</param>
            <param name="type">The value of <see cref="F:Xtensive.ObjectMapping.Operation.Type"/>.</param>
            <param name="propertyPath">The value of <see cref="F:Xtensive.ObjectMapping.Operation.PropertyPath"/>.</param>
            <param name="value">The value of <see cref="F:Xtensive.ObjectMapping.Operation.Value"/>.</param>
        </member>
        <member name="T:Xtensive.ObjectMapping.GraphTransformer">
            <summary>
            Object graph transformer.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.GraphTransformer.Transform(System.Object)">
            <summary>
            Transforms an object graph.
            </summary>
            <param name="source">The source graph.</param>
            <returns>The transformed graph.</returns>
        </member>
        <member name="M:Xtensive.ObjectMapping.GraphTransformer.#ctor(Xtensive.ObjectMapping.Model.MappingDescription,Xtensive.ObjectMapping.MapperSettings)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingDescription">The mapping description.</param>
            <param name="mapperSettings">The mapper settings.</param>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.TargetPropertyDescription">
            <summary>
            Descriptor of a property of a target mapped type.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetPropertyDescription.#ctor(System.Reflection.PropertyInfo,Xtensive.ObjectMapping.Model.TargetTypeDescription)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemProperty">The system property.</param>
            <param name="reflectedType">The the type that was used to obtain this description.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetPropertyDescription.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetPropertyDescription.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetPropertyDescription.SourceProperty">
            <summary>
            Gets the source property bound to this instance.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetPropertyDescription.IsIgnored">
            <summary>
            Gets a value indicating whether modifications of this property are ignored.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetPropertyDescription.IsChangeTrackingDisabled">
            <summary>
            Gets a value indicating whether change tracking for this property is disabled.
            </summary>
        </member>
        <member name="T:Xtensive.ObjectMapping.Model.TargetTypeDescription">
            <summary>
            Description of target mapped type.
            </summary>
        </member>
        <member name="F:Xtensive.ObjectMapping.Model.TargetTypeDescription.GeneratorArgumentsProvider">
            <summary>
            Gets the provider of arguments for an algorithm of a new source 
            object creation. For example, it can provide arguments for a custom
            constructor or a key generator.
            </summary>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetTypeDescription.GetProperty(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetTypeDescription.AddProperty(Xtensive.ObjectMapping.Model.TargetPropertyDescription)">
            <summary>
            Adds the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetTypeDescription.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetTypeDescription.#ctor(System.Type,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object[]})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
            <param name="keyExtractor">The key extractor.</param>
            <param name="generatorArgumentsProvider">The provider of arguments for an algorithm of a new source 
            object creation. For example, it can provide arguments for a custom
            constructor or a key generator.</param>
        </member>
        <member name="M:Xtensive.ObjectMapping.Model.TargetTypeDescription.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="systemType">The system type.</param>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.SourceType">
            <summary>
            Gets the corresponding source type.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.PrimitiveProperties">
            <summary>
            Gets the collection of primitive properties.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.ComplexProperties">
            <summary>
            Gets the collection of complex properties.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.MutableProperties">
            <summary>
            Gets mutable properties.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.DirectDescendants">
            <summary>
            Gets direct descendants.
            </summary>
        </member>
        <member name="P:Xtensive.ObjectMapping.Model.TargetTypeDescription.Ancestor">
            <summary>
            Gets the ancestor.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ParameterContextExtensions">
            <summary>
            Various extension methods related to this namespace.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ParameterContextExtensions.ActivateSafely(Xtensive.Core.ParameterContext)">
            <summary>
            Activates specified <see cref="T:Xtensive.Core.ParameterContext"/> if it is not null;
            otherwise does nothing.
            </summary>
            <param name="context">The context to activate.</param>
            <returns><see cref="T:Xtensive.Core.ParameterScope"/> if <paramref name="context"/> is not <see langword="null"/>;
            otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Xtensive.Core.SimpleScope`1">
            <summary>
            Provides access to the thread-bound stack of contextual information
            (<typeparamref name="TVariator"/>).
            </summary>
            <typeparam name="TVariator">The type of the variator. Must be an internal type.</typeparam>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <exception cref="T:System.Security.SecurityException">Only one ancestor of each instance 
            of this generic type is allowed.</exception>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.SimpleScope`1.Dispose">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Scope can't be disposed.</exception>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.Current">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.Outer">
            <summary>
            Gets the outer <see cref="T:Xtensive.Core.Scope`1"/> of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Core.SimpleScope`1.IsNested">
            <summary>
            Gets a value indicating whether this scope is nested to another one.
            </summary>
        </member>
        <member name="T:Xtensive.Core.AggregateException">
            <summary>
            Aggregates a set of caught exceptions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AggregateException.GetFlatExceptions">
            <summary>
            Gets the "flat" list with all aggregated exceptions. 
            If other <see cref="T:Xtensive.Core.AggregateException"/>s were aggregated, 
            their inner exceptions are included instead of them.
            </summary>
            <returns>Flat list of aggregated exceptions.</returns>
        </member>
        <member name="M:Xtensive.Core.AggregateException.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="text">Text of message.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">Text of message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="exceptions">Inner exceptions.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">Text of message.</param>
            <param name="exceptions">Inner exceptions.</param>
        </member>
        <member name="M:Xtensive.Core.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="M:Xtensive.Core.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="P:Xtensive.Core.AggregateException.Exceptions">
            <summary>
            Gets the list of caught exceptions.
            </summary>
        </member>
        <member name="T:Xtensive.Core.HasVersion`2">
            <summary>
            A pair of <see cref="F:Xtensive.Core.HasVersion`2.Value"/> and its <see cref="F:Xtensive.Core.HasVersion`2.Version"/>.
            </summary>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of <see cref="F:Xtensive.Core.HasVersion`2.Value"/>.</typeparam>
            <typeparam name="TVersion">The <see cref="T:System.Type"/> of <see cref="F:Xtensive.Core.HasVersion`2.Version"/>.</typeparam>
        </member>
        <member name="F:Xtensive.Core.HasVersion`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.HasVersion`2.Version">
            <summary>
            The version bound to <see cref="F:Xtensive.Core.HasVersion`2.Value"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.Equals(Xtensive.Core.HasVersion{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.CompareTo(Xtensive.Core.HasVersion{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.op_Equality(Xtensive.Core.HasVersion{`0,`1},Xtensive.Core.HasVersion{`0,`1})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.op_Inequality(Xtensive.Core.HasVersion{`0,`1},Xtensive.Core.HasVersion{`0,`1})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.HasVersion`2.#ctor(`0,`1)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Initial <see cref="F:Xtensive.Core.HasVersion`2.Value"/> value.</param>
            <param name="version">Initial <see cref="F:Xtensive.Core.HasVersion`2.Version"/> value.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.RuntimeInfo">
            <summary>
            Provides various runtime related information.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.RuntimeInfo.PointerSize">
            <summary>
            Gets the size of the pointer (reference field) in bytes.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.RuntimeInfo.DefaultStructLayoutPack">
            <summary>
            Gets default struct or class field alignment in bytes.
            See <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">StructLayoutAttribute.Pack</see> for further information.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.RuntimeInfo.MinimalObjectSize">
            <summary>
            Gets the minimal size of any object in bytes.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.MakeTupleAccess(System.Linq.Expressions.Expression,System.Type,System.Int32)">
            <summary>
             Makes <see cref="M:Xtensive.Tuples.Tuple.GetValueOrDefault``1(System.Int32)"/> method call.
            </summary>
            <param name="target">Target expression.</param>
            <param name="accessorType">Type of accessor.</param>
            <param name="index">Tuple field index.</param>
            <returns><see cref="T:System.Linq.Expressions.MethodCallExpression"/></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.MakeIsNullCondition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Makes <c>IsNull</c> condition expression.
            </summary>
            <param name="target">Target expression</param>
            <param name="ifNull">Result expression if <paramref name="target"/> is <see langword="null"/>.</param>
            <param name="ifNotNull">Result expression if <paramref name="target"/> is not <see langword="null"/>.</param>
            <returns><see cref="T:System.Linq.Expressions.ConditionalExpression"/></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.LiftToNullable(System.Linq.Expressions.Expression)">
            <summary>
            Converts expression type to nullable type (for value types).
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionExtensions.ToExpressionTree(System.Linq.Expressions.Expression)">
            <summary>
            Converts specified <see cref="T:System.Linq.Expressions.Expression"/> to <see cref="T:Xtensive.Linq.ExpressionTree"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>Expression tree that wraps <paramref name="expression"/>.</returns>
        </member>
        <member name="T:Xtensive.Linq.ExpressionReplacer">
            <summary>
            Replaces references to one specific instance of an expression node with another node
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.ReplaceAll(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            Replaces all specified expressions.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">Expressions search for.</param>
            <param name="replaceWith">Expressions replace with.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionReplacer.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Reflection.InterfaceMapping">
            <summary>
            Faster <see cref="T:System.Reflection.InterfaceMapping"/> analogue.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.InterfaceMapping.#ctor(System.Reflection.InterfaceMapping)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source mapping.</param>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.TargetType">
            <summary>
            Gets the target type of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.InterfaceType">
            <summary>
            Gets the interface type of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.TargetMethods">
            <summary>
            Gets the type members of this mapping.
            </summary>
        </member>
        <member name="P:Xtensive.Reflection.InterfaceMapping.InterfaceMethods">
            <summary>
            Gets the interface members of this mapping.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.ResourceHelper">
            <summary>
            Resources-related helper.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.ResourceHelper.GetStringResource(System.Type,System.String)">
            <summary>
            Gets the string resource by specified resource type and resource name.
            </summary>
            <param name="resourceType">The resource type.</param>
            <param name="resourceName">The property name on the resource type.</param>
            <returns>String resource value.</returns>
        </member>
        <member name="T:Xtensive.Reflection.SequenceHelper">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> helper methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.SequenceHelper.GetSequenceType(System.Type)">
            <summary>
            Gets the generic type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> where <paramref name="elementType"/> is generic argument.
            </summary>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:Xtensive.Reflection.SequenceHelper.GetElementType(System.Type)">
            <summary>
            Gets element type of the sequence.
            </summary>
            <param name="sequenceType">Type of the sequence.</param>
        </member>
        <member name="T:Xtensive.Sorting.ConnectionType">
            <summary>
            Type of <see cref="T:Xtensive.Sorting.NodeConnection`2"/> connection.
            </summary>
        </member>
        <member name="F:Xtensive.Sorting.ConnectionType.Breakable">
            <summary>
            Connection may be breaked by topological sorter.
            </summary>
        </member>
        <member name="F:Xtensive.Sorting.ConnectionType.Permanent">
            <summary>
            Connection cannot be breaked by topological sorter.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.Node`2">
            <summary>
            Sorting node. 
            </summary>
            <typeparam name="TNodeItem">Type of node item.</typeparam>
            <typeparam name="TConnectionItem">Type of connection item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.AddConnection(Xtensive.Sorting.Node{`0,`1},`1)">
            <summary>
            Adds new outgoing connection to node.
            </summary>
            <param name="node">Paired node.</param>
            <param name="connectionItem">Item of connection.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.AddConnection(Xtensive.Sorting.Node{`0,`1},`1,Xtensive.Sorting.ConnectionType)">
            <summary>
            Adds new outgoing connection to node.
            </summary>
            <param name="node">Paired node.</param>
            <param name="connectionItem">Item of connection.</param>
            <param name="connectionType">Type of connection.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.RemoveConnections(Xtensive.Sorting.Node{`0,`1})">
            <summary>
            Removes outgoing connections from node.
            </summary>
            <param name="destination">Paired node.</param>
        </member>
        <member name="M:Xtensive.Sorting.Node`2.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.Item">
            <summary>
            Gets node item.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.IncomingConnections">
            <summary>
            Gets <see cref="T:System.Collections.Generic.HashSet`1"/> of incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.OutgoingConnections">
            <summary>
            Gets <see cref="T:System.Collections.Generic.HashSet`1"/> of outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.OutgoingConnectionCount">
            <summary>
            Gets count of outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.BreakableOutgoingConnectionCount">
            <summary>
            Gets count of breakable outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.PermanentOutgoingConnectionCount">
            <summary>
            Gets count of permanent outgoing connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.BreakableIncomingConnectionCount">
            <summary>
            Gets count of breakable incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.IncomingConnectionCount">
            <summary>
            Gets count of breakable incoming connections.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.Node`2.PermanentIncomingConnectionCount">
            <summary>
            Gets count of permanent incoming connections.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.NodeConnection`2">
            <summary>
            Connection between two <see cref="T:Xtensive.Sorting.Node`2"/>s.
            </summary>
            <typeparam name="TNodeItem">Type of node item.</typeparam>
            <typeparam name="TConnectionItem">Type of connection item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.NodeConnection`2.#ctor(Xtensive.Sorting.Node{`0,`1},Xtensive.Sorting.Node{`0,`1},`1)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="connectionItem">The connection item.</param>
        </member>
        <member name="M:Xtensive.Sorting.NodeConnection`2.#ctor(Xtensive.Sorting.Node{`0,`1},Xtensive.Sorting.Node{`0,`1},`1,Xtensive.Sorting.ConnectionType)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="connectionItem">The connection item.</param>
            <param name="connectionType">Connection type.</param>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.ConnectionItem">
            <summary>
            Gets connection item.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.Source">
            <summary>
            Gets connection source.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.Destination">
            <summary>
            Gets connection destination.
            </summary>
        </member>
        <member name="P:Xtensive.Sorting.NodeConnection`2.ConnectionType">
            <summary>
            Gets connection type.
            </summary>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSorter">
            <summary>
            Topological sorter for oriented graph of the items.
            </summary>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0})">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true" />
            if there is outgoing connection between the first and the second node.</param>
            <returns>
            Sorting result, if there were no loops;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.Node{``0,System.Object}}@)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="loops">The loops, if found.</param>
            <returns>
            Sorting result, if there were no loops;
            otherwise, <see langword="null"/>.
            In this case <paramref name="loops"/> will contain only the loop edges.
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,System.Object}}@)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <returns>
            Sorting result
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Core.Predicate{``0,``0},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,System.Object}}@,System.Boolean)">
            <summary>
            Sorts the specified oriented graph of the items in their topological order
            (following the outgoing connections provided by <paramref name="connector"/>).
            </summary>
            <param name="items">The items to sort.</param>
            <param name="connector">The connector delegate returning <see langword="true"/>
            if there is outgoing connection between the first and the second node.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <param name="removeWholeNode">If <see langword="true"/> removes whole node in the case of loop, otherwise removes only one edge.</param>
            <returns>
            Sorting result
            </returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.List{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.Node{``0,``1}}@)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="loops">The loops, if found.</param>
            <returns>Sorting result, if there were no loops;
            otherwise, <see langword="null" />. 
            In this case <paramref name="nodes"/> will contain only the loop edges.</returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.IEnumerable{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,``1}}@)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <returns>Sorting result.</returns>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSorter.Sort``2(System.Collections.Generic.IEnumerable{Xtensive.Sorting.Node{``0,``1}},System.Collections.Generic.List{Xtensive.Sorting.NodeConnection{``0,``1}}@,System.Boolean)">
            <summary>
            Sorts the specified oriented graph of the nodes in their topological order
            (following the outgoing connections).
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="removedEdges">Edges removed to make graph non-cyclic.</param>
            <param name="removeWholeNode">If <see langword="true"/> removes whole node in the case of loop, otherwise removes only one edge.</param>
            <returns>Sorting result.</returns>
        </member>
        <member name="T:Xtensive.Core.StringBuilderExtensions">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendIndented(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Appends the specified <see cref="T:System.String"/> indented by specified count of spaces.
            </summary>
            <param name="builder">The builder to write indented string to.</param>
            <param name="indent">Count of spaces to indent.</param>
            <param name="value">The string value to write.</param>    
            <returns>
            A reference to the <paramref name="builder"/> after append operation has completed.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendIndented(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            Appends the specified <see cref="T:System.String"/> indented by specified count of spaces.
            </summary>
            <param name="builder">The builder to write indented string to.</param>
            <param name="indent">Count of spaces to indent.</param>
            <param name="value">The string value to write.</param>
            <param name="indentFirstLine">if set to <see langword="true"/> first line of string will be indented, otherwise not.</param>
            <returns>
            A reference to the <paramref name="builder"/> after append operation has completed.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringBuilderExtensions.AppendHexArray(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Appends the specified <see cref="T:System.Byte"/> array in hexidecimal representation.
            These bytes are written from left to right, high part of byte is written first.
            For example {1,2,10} will be appended as 01020A.
            </summary>
            <param name="builder">The builder.</param>
            <param name="values">The values.</param>
            <returns>Original <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Xtensive.Collections.INamedValueCollection">
            <summary>
            Named value collection contract.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.INamedValueCollection.Get(System.String)">
            <summary>
            Gets the specified value by its name.
            </summary>
            <param name="name">The name of the value.</param>
            <returns>
            Specified value, if found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.INamedValueCollection.Set(System.String,System.Object)">
            <summary>
            Sets the value of the specified name.
            </summary>
            <param name="name">The name to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Xtensive.Collections.NamedValueCollection">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/>-based 
            <see cref="T:Xtensive.Collections.INamedValueCollection"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.NamedValueCollection.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.NamedValueCollection.Set(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Linq.QueryableMethodKind">
            <summary>
            Enumerates supported <see cref="T:System.Linq.IQueryable`1"/> methods.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.QueryableVisitor">
            <summary>
            Abstract base visitor that handles methods of <see cref="T:System.Linq.IQueryable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> by calling <see cref="M:Xtensive.Linq.QueryableVisitor.VisitQueryableMethod(System.Linq.Expressions.MethodCallExpression,Xtensive.Linq.QueryableMethodKind)"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.VisitQueryableMethod(System.Linq.Expressions.MethodCallExpression,Xtensive.Linq.QueryableMethodKind)">
            <summary>
            Visits method of <see cref="T:System.Linq.IQueryable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="mc">The method call expression.</param>
            <param name="methodKind">Kind of the method.</param>
        </member>
        <member name="M:Xtensive.Linq.QueryableVisitor.GetQueryableMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Parses <see cref="T:Xtensive.Linq.QueryableMethodKind"/> for the specified expression.
            </summary>
            <param name="call">A call to process.</param>
            <returns><see cref="T:Xtensive.Linq.QueryableMethodKind"/> for the specified expression,
            or null if method is not a LINQ method.</returns>
        </member>
        <member name="T:Xtensive.Linq.ExpressionWriter">
            <summary>
            Writes out an expression tree in a C#-ish syntax.
            </summary>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            Writes the expression to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="expression">The expression to write.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.Linq.Expressions.Expression)">
            <summary>
            Writes the expression to string.
            </summary>
            <param name="expression">The expression to write.</param>
            <returns>The string containing written expression.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.WriteLine(Xtensive.Linq.ExpressionWriter.IndentType)">
            <summary>
            Writes the line break.
            </summary>
            <param name="indentType">Type of the indent to use for the further lines.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.WriteArguments(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.String)">
            <summary>
            Writes the list of arguments.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="arguments">The arguments.</param>
            <param name="suffix">The suffix.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.ChangeIndent(Xtensive.Linq.ExpressionWriter.IndentType)">
            <summary>
            Changes the indent.
            </summary>
            <param name="indentType">New type of the indent.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the C# operator for the specified expression type.
            </summary>
            <param name="type">The type of expression to get the operator for.</param>
            <returns>The C# operator.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type.
            </summary>
            <param name="type">The type to get the name for.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.#ctor(System.IO.TextWriter)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Xtensive.Linq.ExpressionWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="indentSize">Size of the indent to use.</param>
        </member>
        <member name="P:Xtensive.Linq.ExpressionWriter.Writer">
            <summary>
            Gets the writer used by the instance.
            </summary>
        </member>
        <member name="P:Xtensive.Linq.ExpressionWriter.IndentSize">
            <summary>
            Gets the size of the indent.
            </summary>
        </member>
        <member name="T:Xtensive.Linq.ExpressionWriter.IndentType">
            <summary>
            Enumerates possible indent types.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Same">
            <summary>
            The same indent must be used.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Inner">
            <summary>
            Indent must be 1-unit smaller then before.
            </summary>
        </member>
        <member name="F:Xtensive.Linq.ExpressionWriter.IndentType.Outer">
            <summary>
            Indent must be 1-unit larger then before.
            </summary>
        </member>
        <member name="T:Xtensive.Core.AliasGenerator">
            <summary>
            Universal alias generator.
            </summary>
        </member>
        <member name="F:Xtensive.Core.AliasGenerator.DefaultAliasTemplate">
            <summary>
            Default alias template. Value is "{0}{1}". Where {0} - template parameter for prefix and {1} - template parameter for suffix.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Next">
            <summary>
            Generates new alias.
            </summary>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create">
            <summary>
            Creates generator with default settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String)">
            <summary>
            Creates generator using specified alias template.
            </summary>
            <param name="aliasTemplate">Alias template. Could use two template parameters: {0} - for prefix and {1} for suffix.</param>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String[])">
            <summary>
            Creates generator using specified prefix sequence.
            </summary>
            <param name="overriddenPrefixes">The overridden prefix sequence.</param>
        </member>
        <member name="M:Xtensive.Core.AliasGenerator.Create(System.String[],System.String)">
            <summary>
            Creates generator using specified <paramref name="overriddenPrefixes"/> and <paramref name="aliasTemplate"/>.
            </summary>
            <param name="overriddenPrefixes">The overridden prefix sequence.</param>
            <param name="aliasTemplate">The alias template.</param>
        </member>
        <member name="T:Xtensive.Collections.BindingCollection`2">
            <summary>
            Temporarily binds values of type <typeparamref name="TValue"/> to their keys
            and provides access to currently bound values.
            Any binding is active while its binding result (<see cref="T:System.IDisposable"/> object)
            isn't disposed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.Add(`0,`1)">
            <summary>
            Binds the specified <paramref name="value"/> to <paramref name="key"/>.
            </summary>
            <param name="key">The key to bind to.</param>
            <param name="value">The value to bind.</param>
            <returns>Disposable object that will 
            destroy the binding on its disposal.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.PermanentAdd(`0,`1)">
            <summary>
            Binds the specified <paramref name="value"/> to <paramref name="key"/>.
            </summary>
            <param name="key">The key to bind to.</param>
            <param name="value">The value to bind.</param>
            <returns><see langword="null" />, so this binding will not be removed.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.ReplaceBound(`0,`1)">
            <summary>
            Replaces previously bound value.
            </summary>
            <param name="key">The binding key of the value to replace.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Key isn't found.</exception>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the bound value by its key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns,
            contains the value bound to the specified key, if the key is found;
            otherwise, default value for the type of the value parameter.</param>
            <returns><see langword="True"/> if the <see cref="T:Xtensive.Collections.BindingCollection`2"/> 
            contains an element with the specified key;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.GetKeys">
            <summary>
            Gets the sequence of bound keys.
            </summary>
            <returns>The sequence of bound keys.</returns>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.BindingCollection`2.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Collections.BindingCollection`2.Count">
            <summary>
            Gets the number of currently bound items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.BindingCollection`2.Item(`0)">
            <summary>
            Gets the bound value by its key.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Core.Parameter`1">
            <summary>
            Parameter - an object identifying its value in active <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>
            <typeparam name="TValue">The type of parameter value.</typeparam>
        </member>
        <member name="T:Xtensive.Core.Parameter">
            <summary>
            Parameter - an object identifying its value in active <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Parameter.IsExpectedValueSet">
            <summary>
            Indicates whether the property <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> is set.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Parameter.GetValue">
            <summary>
            Gets the value of the parameter.
            </summary>
            <returns>Parameter value.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="M:Xtensive.Core.Parameter.SetValue(System.Object)">
            <summary>
            Sets the value of the parameter.
            </summary>
            <param name="value">The new value.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>    
        </member>
        <member name="M:Xtensive.Core.Parameter.Clear">
            <summary>
            Clears parameter's value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Parameter.OnScopeDisposed(System.Object)">
            <summary>
            Called on leaving the scope.
            </summary>
            <param name="parameterScopeValue">The parameter scope value.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter.GetCurrentScope">
            <exception cref="T:System.Exception"><see cref="T:Xtensive.Core.ParameterContext"/> is required.</exception>
        </member>
        <member name="M:Xtensive.Core.Parameter.#ctor(System.String,System.Object)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Parameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>    
        </member>
        <member name="P:Xtensive.Core.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="P:Xtensive.Core.Parameter.ExpectedValue">
            <summary>
            Gets the expected value of the parameter.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Parameter.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.Action{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.Action{`0},`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,System.Action{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
        </member>
        <member name="M:Xtensive.Core.Parameter`1.#ctor(System.String,System.Action{`0},`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The <see cref="P:Xtensive.Core.Parameter.Name"/> property value.</param>
            <param name="onOutOfScope">Out of scope action. 
            Action argument is parameter's value within disposed scope.</param>
            <param name="expectedValue">The expected value of this parameter.</param>
        </member>
        <member name="P:Xtensive.Core.Parameter`1.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>    
            <exception cref="T:System.InvalidOperationException"><see cref="T:Xtensive.Core.ParameterContext"/> is not activated.</exception>
            <exception cref="T:System.InvalidOperationException">Value for the parameter is not set.</exception>
        </member>
        <member name="T:Xtensive.Core.ParameterContext">
            <summary>
            Provides storing context-specific <see cref="T:Xtensive.Core.Parameter`1"/>'s values.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Context`1">
            <summary>
            Base <see cref="T:Xtensive.Core.IContext`1"/> implementation.
            To be used with various <see cref="T:Xtensive.Core.Scope`1"/> descendants.
            </summary>
            <typeparam name="TScope">The type of the associated scope.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Context`1.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Context`1.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Context`1.CreateActiveScope">
            <summary>
            Creates the associated scope.
            </summary>
            <returns>New instance of the <typeparamref name="TScope"/> type.</returns>
        </member>
        <member name="P:Xtensive.Core.Context`1.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.EnsureIsRegular">
            <exception cref="T:System.InvalidOperationException">Context is <see cref="P:Xtensive.Core.ParameterContext.ExpectedValues"/> context.</exception>
        </member>
        <member name="M:Xtensive.Core.ParameterContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Core.ParameterContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Core.ParameterContext"/>.
            </summary>        
        </member>
        <member name="P:Xtensive.Core.ParameterContext.ExpectedValues">
            <summary>
            Gets the special singleton <see cref="T:Xtensive.Core.ParameterContext"/> instance 
            returning <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> instead of <see cref="P:Xtensive.Core.Parameter.Value"/> 
            if <see cref="P:Xtensive.Core.Parameter.ExpectedValue"/> is set.
            </summary>        
        </member>
        <member name="P:Xtensive.Core.ParameterContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.ParameterScope">
            <summary>
            <see cref="T:Xtensive.Core.ParameterContext"/> activation scope.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.GetValue(Xtensive.Core.Parameter)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.#ctor(Xtensive.Core.ParameterContext)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context of this scope.</param>
        </member>
        <member name="M:Xtensive.Core.ParameterScope.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Core.ParameterScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ParameterScope.Context">
            <summary>
            Gets the associated parameter context.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.AttributeSearchOptions">
            <summary>
            Search options for <see cref="T:Xtensive.Reflection.AttributeHelper"/> methods.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.Default">
            <summary>
            Default options.
            The same as <see cref="F:Xtensive.Reflection.AttributeSearchOptions.InheritNone"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritNone">
            <summary>
            Nothing should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromBase">
            <summary>
            If no attributes are found on the specified member,
            attributes from its base should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromAllBase">
            <summary>
            Attributes from all the bases should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritFromPropertyOrEvent">
            <summary>
            If no attributes are found on the specified method,
            attributes from the property or event it belongs to should be inherited.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.AttributeSearchOptions.InheritAll">
            <summary>
            All inheritance options.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.CtorName">
            <summary>
            Returns ".ctor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.CctorName">
            <summary>
            Returns ".cctor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.GetterPrefix">
            <summary>
            Returns "get_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.SetterPrefix">
            <summary>
            Returns "set_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.IndexerPropertyName">
            <summary>
            Returns "Item"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.AddEventHandlerPrefix">
            <summary>
            Returns "add_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.RemoveEventHandlerPrefix">
            <summary>
            Returns "remove_".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.RuntimeMethodInfoName">
            <summary>
            Returns "System.Reflection.RuntimeMethodInfo".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Object">
            <summary>
             Various well-known constants related to <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.Clone">
            <summary>
            Returns "Clone".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.Equals">
            <summary>
            Returns "Equals".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Object.GetHashCode">
            <summary>
            Returns "GetHashCode".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Operator">
            <summary>
             Well-known method names related to operator overloading
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Addition">
            <summary>
            Returns "op_Addition".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Subtraction">
            <summary>
            Returns "op_Subtraction".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Multiply">
            <summary>
            Returns "op_Multiply".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Division">
            <summary>
            Returns "op_Division".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Modulus">
            <summary>
            Returns "op_Modulus".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Increment">
            <summary>
            Returns "op_Increment".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Decrement">
            <summary>
            Returns "op_Decrement".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.UnaryNegation">
            <summary>
            Returns "op_UnaryNegation".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.UnaryPlus">
            <summary>
            Returns "op_UnaryPlus".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.BitwiseOr">
            <summary>
            Returns "op_BitwiseOr".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.BitwiseAnd">
            <summary>
            Returns "op_BitwiseAnd".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.ExclusiveOr">
            <summary>
            Returns "op_ExclusiveOr".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.OnesComplement">
            <summary>
            Returns "op_OnesComplement".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LeftShift">
            <summary>
            Returns "op_LeftShift"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.RightShift">
            <summary>
            Returns "op_RightShift
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LogicalNot">
            <summary>
            Returns "op_LogicalNot".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.True">
            <summary>
            Returns "op_True".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.False">
            <summary>
            Returns "op_False".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Explicit">
            <summary>
            Returns "op_Explicit"
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Implicit">
            <summary>
            Returns "op_Implicit".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Equality">
            <summary>
            Returns "op_Equality".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.Inequality">
            <summary>
            Returns "op_Inequality".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.GreaterThan">
            <summary>
            Returns "op_GreaterThan".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.GreaterThanOrEqual">
            <summary>
            Returns "op_GreaterThanOrEqual".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LessThan">
            <summary>
            Returns "op_LessThan".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Operator.LessThanOrEqual">
            <summary>
            Returns "op_LessThanOrEqual".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Queryable">
            <summary>
             Various well-known constants related to <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Aggregate">
            <summary>
            Returns "Aggregate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.All">
            <summary>
            Returns "All".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Any">
            <summary>
            Returns "Any".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.AsEnumerable">
            <summary>
            Returns "AsEnumerable".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.AsQueryable">
            <summary>
            Returns "AsQueryable".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Average">
            <summary>
            Returns "Average".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Cast">
            <summary>
            Returns "Cast".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Concat">
            <summary>
            Returns "Concat".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Contains">
            <summary>
            Returns "All".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Count">
            <summary>
            Returns "Count".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.DefaultIfEmpty">
            <summary>
            Returns "DefaultIfEmpty".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Distinct">
            <summary>
            Returns "Distinct".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ElementAt">
            <summary>
            Returns "ElementAt".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ElementAtOrDefault">
            <summary>
            Returns "ElementAtOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Except">
            <summary>
            Returns "Except".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.First">
            <summary>
            Returns "First".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.FirstOrDefault">
            <summary>
            Returns "FirstOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.GroupBy">
            <summary>
            Returns "GroupBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.GroupJoin">
            <summary>
            Returns "GroupJoin".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Intersect">
            <summary>
            Returns "Intersect".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Join">
            <summary>
            Returns "Join".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Last">
            <summary>
            Returns "Last".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.LastOrDefault">
            <summary>
            Returns "LastOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.LongCount">
            <summary>
            Returns "LongCount".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Max">
            <summary>
            Returns "Max".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Min">
            <summary>
            Returns "Min".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OfType">
            <summary>
            Returns "OfType".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OrderBy">
            <summary>
            Returns "OrderBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.OrderByDescending">
            <summary>
            Returns "OrderByDescending".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Reverse">
            <summary>
            Returns "Reverse".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Select">
            <summary>
            Returns "Select".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SelectMany">
            <summary>
            Returns "SelectMany".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SequenceEqual">
            <summary>
            Returns "SequenceEqual".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Single">
            <summary>
            Returns "Single".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SingleOrDefault">
            <summary>
            Returns "SingleOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Skip">
            <summary>
            Returns "Skip".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.SkipWhile">
            <summary>
            Returns "SkipWhile".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Sum">
            <summary>
            Returns "Sum".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Take">
            <summary>
            Returns "Take".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.TakeWhile">
            <summary>
            Returns "TakeWhile".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ThenBy">
            <summary>
            Returns "ThenBy".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ThenByDescending">
            <summary>
            Returns "ThenByDescending".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ToArray">
            <summary>
            Returns "ToArray".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.ToList">
            <summary>
            Returns "ToList".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Union">
            <summary>
            Returns "Union".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Queryable.Where">
            <summary>
            Returns "Where".
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.WellKnown.Tuple">
            <summary>
             Various well-known constants related to <see cref="T:Xtensive.Reflection.WellKnown.Tuple"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueOrDefault">
            <summary>
            Returns "GetValueOrDefault".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValue">
            <summary>
            Returns "GetValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValue">
            <summary>
            Returns "SetValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.HasValue">
            <summary>
            Returns "HasValue".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetFieldState">
            <summary>
            Returns "GetFieldState".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetFieldState">
            <summary>
            Returns "SetFieldState".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.DescriptorFieldName">
            <summary>
            Returns "descriptor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueX">
            <summary>
            Returns "GetValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetNullableValueX">
            <summary>
            Returns "GetNullableValueOrDefault{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValueX">
            <summary>
            Returns "SetValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetNullableValueX">
            <summary>
            Returns "SetNullableValue{0}".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetValueDelegatesFieldName">
            <summary>
            Returns "getValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetNullableValueDelegatesFieldName">
            <summary>
            Returns "getNullableValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetValueDelegatesFieldName">
            <summary>
            Returns "setValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.SetNullableValueDelegatesFieldName">
            <summary>
            Returns "setNullableValueDelegates".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetGetValueDelegate">
            <summary>
            Returns "GetGetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetGetNullableValueDelegate">
            <summary>
            Returns "GetGetNullableValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetSetValueDelegate">
            <summary>
            Returns "GetSetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.GetSetNullableValueDelegate">
            <summary>
            Returns "GetSetValueDelegate".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Descriptor">
            <summary>
            Returns "Descriptor".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Count">
            <summary>
            Returns "Count".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.Create">
            <summary>
            Returns "Create".
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.WellKnown.Tuple.CreateNew">
            <summary>
            Returns "CreateNew".
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Graphs.TopologicalSorter">
            <summary>
            Topological sorter.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Graphs.TopologicalSorter.Sort``2(Xtensive.Collections.Graphs.Graph{``0,``1},System.Predicate{``1})">
            <summary>
            Sorts the <paramref name="graph"/> in topological order (nodes without incoming edges go first).
            <note>
            This method modifies the <paramref name="graph"/> by removing all non-loop edges from it!
            </note>
            </summary>
            <returns>Sorting result.</returns>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSortResult`2">
            <summary>
            Describes result of <see cref="T:Xtensive.Sorting.TopologicalSorter"/> operations.
            </summary>
            <typeparam name="TNodeItem">The type of the node item.</typeparam>
            <typeparam name="TConnectionItem">The type of the connection item.</typeparam>
        </member>
        <member name="T:Xtensive.Sorting.TopologicalSortResult`1">
            <summary>
            Base type for <see cref="T:Xtensive.Sorting.TopologicalSortResult`2"/>.
            </summary>
            <typeparam name="TNodeItem">The type of the node item.</typeparam>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSortResult`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="result">The sorting result.</param>
        </member>
        <member name="P:Xtensive.Sorting.TopologicalSortResult`1.Result">
            <summary>
            Gets or sets the sorting result.
            </summary>
        </member>
        <member name="M:Xtensive.Sorting.TopologicalSortResult`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{Xtensive.Sorting.Node{`0,`1}})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="result">The sorting result.</param>
            <param name="loops">The found loops.</param>
        </member>
        <member name="P:Xtensive.Sorting.TopologicalSortResult`2.Loops">
            <summary>
            Gets or sets the found loops.
            </summary>
        </member>
        <member name="T:Xtensive.Core.ThreadSafeCached`1">
            <summary>
            A structure caching a single value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to cache.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue(System.Func{`0})">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <param name="generator">The value generator.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue``1(System.Func{``0,`0},``0)">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.GetValue``2(System.Func{``0,``1,`0},``0,``1)">
            <summary>
            Gets the cached value or generates it using specified <paramref name="generator"/> and caches.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Cached value.</returns>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Equals(Xtensive.Core.ThreadSafeCached{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.CompareTo(Xtensive.Core.ThreadSafeCached{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Initialize(System.Object)">
            <summary>
            Initializes the cache. 
            This method should be invoked just once - before
            the first operation on this structure.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Core.ThreadSafeCached`1.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Core.ThreadSafeCached`1"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Core.ThreadSafeCached`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Core.ThreadSafeCached`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverter`2">
            <summary>
            Provides delegates allowing to call conversion methods faster.
            </summary>
            <typeparam name="TFrom">Type of the first <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> generic argument.</typeparam>
            <typeparam name="TTo">Type of the second <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> generic argument.</typeparam>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.Provider">
            <summary>
            Gets the provider underlying converter is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.Convert">
            <summary>
            Gets <see cref="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverter`2.IsRough">
            <summary>
            Gets <see cref="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough"/> value.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverter`2.#ctor(Xtensive.Conversion.IAdvancedConverter{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="implementation">Advanced converter to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverter`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverter`2.Default">
            <summary>
            Gets default advanced converter for types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.
            (uses <see cref="P:Xtensive.Conversion.AdvancedConverterProvider.Default"/> <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterStruct`2">
            <summary>
            A struct providing faster access for key <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/> delegates.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.Default">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.AdvancedConverterStruct`2"/> for 
            <see cref="P:Xtensive.Conversion.AdvancedConverter`2.Default"/> hasher.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.AdvancedConverter">
            <summary>
            Gets the underlying converter for this cache.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.Convert">
            <summary>
            Gets <see cref="M:Xtensive.Conversion.IAdvancedConverter`2.Convert(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterStruct`2.IsRough">
            <summary>
            Gets <see cref="P:Xtensive.Conversion.IAdvancedConverter`2.IsRough"/> value.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.op_Implicit(Xtensive.Conversion.AdvancedConverter{`0,`1})~Xtensive.Conversion.AdvancedConverterStruct{`0,`1}">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/> to 
            <see cref="T:Xtensive.Conversion.AdvancedConverterStruct`2"/>.
            </summary>
            <param name="advancedConverter">Converter to provide the struct for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.#ctor(Xtensive.Conversion.AdvancedConverter{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="advancedConverter">Converter to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterStruct`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Conversion.WrappingAdvancedConverter`4">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/>s.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.WrappingAdvancedConverter`4.BaseConverter">
            <summary>
            Converter delegates for <typeparamref name="TFromBase"/>-<typeparamref name="TToBase"/> types.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.WrappingAdvancedConverter`4.Convert(`0)">
            <summary>
             Converts specified value of <typeparamref name="TFrom"/> type
             to <typeparamref name="TTo"/> type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Xtensive.Conversion.WrappingAdvancedConverter`4.#ctor(Xtensive.Conversion.IAdvancedConverterProvider)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.Conversion.WrappingAdvancedConverter`4"/>.
            </summary>
            <param name="provider">Converter provider this converter is bound to.</param>
        </member>
        <member name="P:Xtensive.Conversion.WrappingAdvancedConverter`4.IsRough">
            <summary>
            Gets <see langword="true"/> if converter is rough, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.NullableForwardAdvancedConverter`2.Convert(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.NullableNullableAdvancedConverter`2.Convert(System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.NullableReverseAdvancedConverter`2.Convert(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.ExceptionAggregator">
            <summary>
            Provides exception aggregation support.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Complete">
            <summary>
            Indicates exception aggregation was completed successfully,
            i.e. aggregated exceptions, if any, can be thrown on disposal.
            Sets <see cref="P:Xtensive.Core.ExceptionAggregator.IsCompleted"/> to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Add(System.Exception,System.Boolean)">
            <summary>
            Adds the specified exception to the list of caught exceptions.
            </summary>
            <param name="exception">The exception to add.</param>
            <param name="handle">Indicates whether <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/>
            must be invoked for this exception or not.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <param name="action">The action to execute.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``1(System.Action{``0},``0)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T">The type of action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument">The action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st action argument.</typeparam>
            <typeparam name="T2">The type of the 2nd action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument1">The 1st action argument value.</param>
            <param name="argument2">The 2nd action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Executes the specified action catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st action argument.</typeparam>
            <typeparam name="T2">The type of the 2nd action argument.</typeparam>
            <typeparam name="T3">The type of the 3rd action argument.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="argument1">The 1st action argument value.</param>
            <param name="argument2">The 2nd action argument value.</param>
            <param name="argument3">The 3rd action argument value.</param>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument">The function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st function argument.</typeparam>
            <typeparam name="T2">The type of the 2nd function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument1">The 1st function argument value.</param>
            <param name="argument2">The 2nd function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Execute``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Executes the specified function catching all the exceptions from it,
            adding it to internal list of caught exceptions and
            and passing it to <see cref="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler"/> handler.
            </summary>
            <typeparam name="T1">The type of the 1st function argument.</typeparam>
            <typeparam name="T2">The type of the 2nd function argument.</typeparam>
            <typeparam name="T3">The type of the 3rd function argument.</typeparam>
            <typeparam name="TResult">The type of function result.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument1">The 1st function argument value.</param>
            <param name="argument2">The 2nd function argument value.</param>
            <param name="argument3">The 3rd function argument value.</param>
            <returns>Function execution result, if no exception was caught;
            otherwise, <see langword="default(TResult)"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Aggregator is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.HandleException(System.Exception)">
            <summary>
            Invoked on any exception caught by <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.
            </summary>
            <param name="exception">The caught exception.</param>
            <remarks>
            If this method throws an exception, it won't be caught.
            I.e. it will throw "through" any of <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.
            </remarks>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="exceptionMessage">The message of <see cref="T:Xtensive.Core.AggregateException"/>.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.#ctor(System.Action{System.Exception},System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="exceptionHandler">The exception handler.</param>
            <param name="exceptionMessage">The message of <see cref="T:Xtensive.Core.AggregateException"/>.</param>
        </member>
        <member name="M:Xtensive.Core.ExceptionAggregator.Dispose">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            <exception cref="T:Xtensive.Core.AggregateException">Thrown if at least one exception was caught 
            by <see cref="M:Xtensive.Core.ExceptionAggregator.Execute(System.Action)"/> methods.</exception>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.ExceptionHandler">
            <summary>
            Gets or sets the exception handler.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.Count">
            <summary>
            Gets the number of caught exceptions.
            </summary>
        </member>
        <member name="P:Xtensive.Core.ExceptionAggregator.IsCompleted">
            <summary>
            Gets a value indicating exception aggregation was completed successfully,
            i.e. aggregated exceptions, if any, can be thrown on disposal.
            Set to <see langword="true"/> by <see cref="M:Xtensive.Core.ExceptionAggregator.Complete"/> method call.
            </summary>
        </member>
        <member name="T:Xtensive.Core.LockableExtensions">
            <summary>
            <see cref="T:Xtensive.Core.ILockable"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.LockableExtensions.LockSafely(Xtensive.Core.ILockable)">
            <summary>
            Locks the instance (non-recursively).
            </summary>
            <param name="lockable">Lockable object to lock. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:Xtensive.Core.LockableExtensions.LockSafely(Xtensive.Core.ILockable,System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="lockable">Lockable object to lock. Can be <see langword="null"/>.</param>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked as well.</param>
        </member>
        <member name="M:Xtensive.Core.LockableExtensions.EnsureNotLocked(Xtensive.Core.ILockable)">
            <summary>
            Ensures <paramref name="lockable"/> is not locked (see <see cref="M:Xtensive.Core.ILockable.Lock"/>) yet.
            </summary>
            <param name="lockable">Lockable object to check.</param>
            <exception cref="T:Xtensive.Core.InstanceIsLockedException">Specified instance is locked.</exception>
        </member>
        <member name="T:Xtensive.Core.DisposableExtensions">
            <summary>
            <see cref="T:System.IDisposable"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.Join(System.IDisposable,System.IDisposable)">
            <summary>
            Joins the specified disposable objects by returning
            a single <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal.
            </summary>
            <param name="disposable">The first disposable.</param>
            <param name="joinWith">The second disposable.</param>
            <returns>New <see cref="T:Xtensive.Core.JoiningDisposable"/> that will
            dispose both of them on its disposal</returns>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.DisposeSafely(System.IDisposable)">
            <summary>
            Safely disposes an <see cref="T:System.IDisposable"/> object.
            </summary>
            <param name="disposable">Object to dispose (can be <see langword="null"/>).</param>
        </member>
        <member name="M:Xtensive.Core.DisposableExtensions.DisposeSafely(System.IDisposable,System.Boolean)">
            <summary>
            Safely disposes an <see cref="T:System.IDisposable"/> object.
            </summary>
            <param name="disposable">Object to dispose (can be <see langword="null"/>).</param>
            <param name="silently">If set to <see langword="true"/>, it won't throw an exception in any case.</param>
        </member>
        <member name="T:Xtensive.Core.HasServicesExtensions">
            <summary>
            <see cref="T:Xtensive.Core.IHasServices"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService``1(Xtensive.Core.IHasServices,System.Boolean)">
            <summary>
            Gets the service of specified type <typeparamref name="T"/>;
            throws <see cref="T:System.InvalidOperationException"/>, if there is no such service.
            </summary>
            <typeparam name="T">The type of service to get.</typeparam>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="failIfNone">If set to <see langword="true"/>, an exception will be thrown 
            if there is no requested service.</param>
            <returns>Requested service;
            <see langword="null"/>, if <paramref name="failIfNone"/>==<see langword="false"/> 
            and there is no requested service.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="failIfNone"/>==<see langword="true"/> 
            and there is no requested service.</exception>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService(Xtensive.Core.IHasServices,System.Type,System.Boolean)">
            <summary>
            Gets the service of the specified <paramref name="serviceType"/>;
            throws <see cref="T:System.InvalidOperationException"/>, if there is no such service.
            </summary>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="serviceType">Type of the service to get.</param>
            <param name="failIfNone">If set to <see langword="true"/>, an exception will be thrown 
            if there is no requested service.</param>
            <returns>Requested service;
            <see langword="null"/>, if <paramref name="failIfNone"/>==<see langword="false"/> 
            and there is no requested service.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="failIfNone"/>==<see langword="true"/> 
            and there is no requested service.</exception>
        </member>
        <member name="M:Xtensive.Core.HasServicesExtensions.GetService(Xtensive.Core.IHasServices,System.Type)">
            <summary>
            Gets the service of the specified <paramref name="serviceType"/>.
            </summary>
            <param name="serviceProvider">The service provider to query for the service.</param>
            <param name="serviceType">Type of the service to get.</param>
            <returns>The service of specified type.</returns>
        </member>
        <member name="T:Xtensive.Core.StringExtensions">
            <summary>
            <see cref="T:System.String"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Formats the specified <paramref name="format"/> string 
            using <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="arguments">The arguments.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the specified <paramref name="format"/> string 
            using <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="arguments">The arguments.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Formats the specified <paramref name="format"/> string 
            using <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            Formats the specified <paramref name="format"/> string 
            using <see cref="M:System.String.Format(System.String,System.Object,System.Object)"/> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats the specified <paramref name="format"/> string 
            using <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)"/> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Eval(System.Object,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutSuffix(System.String,System.String)">
            <summary>
            Cuts the specified <paramref name="suffix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="suffix">The suffix to cut.</param>
            <returns>String without <paramref name="suffix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutSuffix(System.String,System.String,System.Boolean@)">
            <summary>
            Cuts the specified <paramref name="suffix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="suffix">The suffix to cut.</param>
            <param name="isCut">Upon return contains <see langword="true"/>
            if suffix was cut, otherwise <see langword="false"/></param>
            <returns>String without <paramref name="suffix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutPrefix(System.String,System.String)">
            <summary>
            Cuts the specified <paramref name="prefix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="prefix">The prefix to cut.</param>
            <returns>String without <paramref name="prefix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.TryCutPrefix(System.String,System.String,System.Boolean@)">
            <summary>
            Cuts the specified <paramref name="prefix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The original string value.</param>
            <param name="prefix">The prefix to cut.</param>
            <param name="isCut">Upon return contains <see langword="true"/>
            if prefix was cut, otherwise <see langword="false"/></param>
            <returns>String without <paramref name="prefix"/> if it was found; 
            otherwise, original <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string value.
            </summary>
            <param name="value">The value to indent.</param>
            <param name="indentSize">Size of the indent (in space characters).</param>
            <returns>Indented <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Indent(System.String,System.Int32,System.Boolean)">
            <summary>
            Indents the specified string value.
            </summary>
            <param name="value">The value to indent.</param>
            <param name="indentSize">Size of the indent (in space characters).</param>
            <param name="indentFirstLine">If set to <see langword="true"/>, first line must be indented;
            otherwise, <see langword="false"/>.</param>
            <returns>Indented <paramref name="value"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.LessThan(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.LessThanOrEqual(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than or equals to <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than or equals to <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.GreaterThan(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is greater than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is greater than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.GreaterThanOrEqual(System.String,System.String)">
            <summary>
            Determines whether <paramref name="x"/> <see cref="T:System.String"/> is less than <paramref name="y"/> <see cref="T:System.String"/>.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>
            <see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)">
            <summary>
            Converts the <paramref name="source"/> to a separated string
            using "escape separator" syntax to encode inner separators in
            <paramref name="source"/> parts.
            </summary>
            <param name="source">The sequence of strings to join.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            Comma-separated string of all the items
            from <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleSplit(System.String,System.Char,System.Char)">
            <summary>
            Reverts the result of <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            The array of values that were previously joined
            by <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.RevertibleSplitFirstAndTail(System.String,System.Char,System.Char)">
            <summary>
            Reverts the result of <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </summary>
            <param name="source">The source string to split.</param>
            <param name="escape">The escape character.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>
            The array of values that were previously joined
            by <see cref="M:Xtensive.Core.StringExtensions.RevertibleJoin(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="escape"/>==<paramref name="delimiter"/>.</exception>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Escape(System.String,System.Char,System.Char[])">
            <summary>
            Escapes the specified source string.
            </summary>
            <param name="source">The source.</param>
            <param name="escape">The escape char.</param>
            <param name="escapedChars">Chars to escape.</param>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Unescape(System.String,System.Char)">
            <summary>
            Unescapes the specified source string.
            </summary>
            <param name="source">The source.</param>
            <param name="escape">The escape char.</param>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates all <paramref name="values"/> using specified <paramref name="separator"/>.
            This method aids with targeting .NET 3.5
            </summary>
            <param name="separator">Separator to use.</param>
            <param name="values">Values to join.</param>
            <returns>Joined value.</returns>
        </member>
        <member name="M:Xtensive.Core.StringExtensions.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates all <paramref name="values"/> using specified <paramref name="separator"/>.
            This method aids with targeting .NET 3.5
            </summary>
            <param name="separator">Separator to use.</param>
            <param name="values">Values to join.</param>
            <returns>Joined value.</returns>
        </member>
        <member name="T:Xtensive.Core.IHasExtensions">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IHasExtensions.Extensions"/> property.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasExtensions.Extensions">
            <summary>
            Gets the collection of extensions bound to the current instance.
            </summary>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.ClassDocTemplate">
            <summary>
            Class documentation template.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the comparison for equality.</returns>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the comparison for inequality.</returns>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Configure">
            <summary>
            Configures a new instance of the <see cref="T:Xtensive.Internals.DocTemplates.ClassDocTemplate"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Internals.DocTemplates.ClassDocTemplate"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Internals.DocTemplates.ClassDocTemplate"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dtor">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Xtensive.Internals.DocTemplates.ClassDocTemplate"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Finalize">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dtor" copy="true"/>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose">
            <summary>
            Performs the tasks associated with freeing, releasing, or resetting unmanaged resources
            or associated <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.TypeInitializer">
            <summary>
            Initializes the <see cref="T:Xtensive.Internals.DocTemplates.ClassDocTemplate"/> type.
            </summary>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.DisposableDocTemplate">
            <summary>
            Disposable class documentation template.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dtor">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Xtensive.Internals.DocTemplates.DisposableDocTemplate"/> is reclaimed by garbage collection.
            </summary>
            <remarks>
            <para id="About">
            This method always forwards it job to <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)"/> method;
            its "disposing" parameter gets <see langword="false"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Finalize">
            <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dtor" copy="true"/>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose">
            <summary>
            Performs the tasks associated with freeing, releasing, or resetting unmanaged resources
            or associated <see cref="T:System.IDisposable"/> objects.
            </summary>
            <remarks>
            <para id="About">
            This method always forwards it job to <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)"/> method;
            its "disposing" parameter gets <see langword="true"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)">
            <summary>
            Performs the tasks associated with freeing, releasing, or resetting unmanaged resources
            or associated <see cref="T:System.IDisposable"/> objects.
            </summary>
            <param name="disposing">Indicates whether this method was invoked by <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose"/>,
            or by the finalizer.</param>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.ParameterlessCtorClassDocTemplate">
            <summary>
            A class with required parameterless constructor documentation template.
            </summary>
            <remarks>
            <para id="Ctor">Any descendant of this type must have 
            a parameterless constructor.</para>
            </remarks>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.ParameterlessCtorClassDocTemplate.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.#ctor"/>
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.AttributeHelper">
            <summary>
            <see cref="T:System.Attribute"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            This method does not inherit the attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <returns>An attribute of specified type, or <see langword="null"/>, if none.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            This method does not inherit the attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <returns>An array of attributes of specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)">
            <summary>
            A shortcut to <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/> method.
            </summary>
            <typeparam name="TAttribute">The type of attributes to get.</typeparam>
            <param name="member">Member to get attributes of.</param>
            <param name="options">Attribute search options.</param>
            <returns>An array of attributes of specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)">
            <summary>
            A version of <see cref="M:Xtensive.Reflection.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo,Xtensive.Reflection.AttributeSearchOptions)"/> 
            returning just one attribute.
            </summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="member">Member to get attribute of.</param>
            <param name="options">Attribute search options.</param>
            <returns>An attribute of specified type;
            <see langword="null"/>, if there is no such attribute;
            throws <see cref="T:System.InvalidOperationException"/>, if there is more then one attribute of specified type found.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is more then one attribute of specified type found.</exception>
        </member>
        <member name="T:Xtensive.Reflection.MemberHelper">
            <summary>
            <see cref="T:System.Reflection.MemberInfo"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetBindingFlags(System.Reflection.MemberInfo)">
            <summary>
            Gets the binding flags for the specified member.
            </summary>
            <param name="member">The member to get binding flags for.</param>
            <returns>Binding flags for the specified member.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetBaseMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the base member for the specified <paramref name="member"/>.
            </summary>
            <param name="member">The member to get base member for.</param>
            <returns>Base member;
            <see langword="null" />, if it does not exist.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.IsExplicitImplementation(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified <paramref name="member"/>
            is explicit implementation of some interface member.
            </summary>
            <param name="member">The member to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.IsImplementation(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified <paramref name="member"/>
            is explicit or implicit implementation of some interface member.
            </summary>
            <param name="member">The member to check.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetImplementation(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the interface member implementation in its implementor.
            </summary>
            <param name="member">The member to get the implementation member for.</param>
            <returns>Implementation member;
            <see langword="null" />, if no implementation member maps to the specified one.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetInterfaceMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the interface member for its explicit or implicit implementor.
            </summary>
            <param name="member">The member to get the interface member for.</param>
            <returns>Interface member;
            <see langword="null" />, if no interface member maps to the specified one,
            or the member itself is declared in interface.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetFullName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Builds correct full generic type and member name.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> object which name is built.</param>
            <param name="includeTypeName">Indicates whether type name must be included or not.</param>
            <returns>Full member name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetShortName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Builds correct short generic type and member name.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> object which name is built.</param>
            <param name="includeTypeName">Indicates whether type name must be included or not.</param>
            <returns>Short member name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MemberHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="mi">The <see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="T:Xtensive.Reflection.TypeHelper">
            <summary>
            <see cref="T:System.Type"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[])">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[],System.Collections.Generic.IEnumerable{Xtensive.Core.Pair{System.Reflection.Assembly,System.String}})">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="highPriorityLocations">High-priority search locations (assembly + namespace pairs).</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateAssociate``1(System.Type,System.Type@,System.String[],System.Object[],System.Collections.Generic.IEnumerable{Xtensive.Core.Pair{System.Reflection.Assembly,System.String}},System.Boolean)">
            <summary>
            Searches for associated class for <paramref name="forType"/>, creates its instance, if found.
            Otherwise returns <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of result. Can be ether class or interface.</typeparam>
            <param name="forType">Type to search the associate for.</param>
            <param name="foundForType">Type the associate was found for.</param>
            <param name="associateTypeSuffixes">Associate type name suffix.</param>
            <param name="highPriorityLocations">High-priority search locations (assembly + namespace pairs).</param>
            <param name="constructorParams">Parameters to pass to associate constructor.</param>
            <returns>Newly created associate for <paramref name="forType"/>, if found;
            otherwise, <see langword="null"/>.</returns>
            <param name="exactTypeMatch">If <see langword="false"/> tries to create associates for base class, interfaces, arrays and <see cref="T:System.Nullable`1"/>(if struct) too.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="forType"/> is generic type definition.</exception>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateDummyType(System.String,System.Type)">
            <summary>
            Creates new dummy type. Such types can be used
            as generic arguments (to instantiate unique generic
            instances).
            </summary>
            <param name="namePrefix">Prefix to include into type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <returns><see cref="T:System.Type"/> object of newly created type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateDummyType(System.String,System.Type,System.Boolean)">
            <summary>
            Creates new dummy type. Such types can be used
            as generic arguments (to instantiate unique generic
            instances).
            </summary>
            <param name="namePrefix">Prefix to include into type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <param name="implementProtectedConstructorAccessor">If <see langword="true"/>, static method with name <see cref="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName"/> will be created for each constructor.</param>
            <returns><see cref="T:System.Type"/> object of newly created type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateInheritedDummyType(System.String,System.Type)">
            <summary>
            Creates new dummy type inherited from another type.
            </summary>
            <param name="typeName">Type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <returns>New type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.CreateInheritedDummyType(System.String,System.Type,System.Boolean)">
            <summary>
            Creates new dummy type inherited from another type.
            </summary>
            <param name="typeName">Type name.</param>
            <param name="inheritFrom">The type to inherit the dummy type from.</param>
            <param name="implementProtectedConstructorAccessor">If <see langword="true"/>, static method with name <see cref="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName"/> will be created for each constructor.</param>
            <returns>New type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.AddSuffix(System.String,System.String)">
            <summary>
            Adds suffix to specified generic type name.
            </summary>
            <param name="typeName">Type name to add suffix for.</param>
            <param name="suffix">Suffix to add.</param>
            <returns>Specified generic type name with its suffix.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.Activate(System.Reflection.Assembly,System.String,System.Type[],System.Object[])">
            <summary>
            Instantiates specified generic type; returns <see langword="null"/>, if either no such a type,
            or an error has occurred.
            </summary>
            <param name="assembly">Assembly where the type is located.</param>
            <param name="typeName">Name of the type to instantiate.</param>
            <param name="genericArguments">Generic arguments for the type to instantiate 
            (<see langword="null"/> means type isn't a generic type definition).</param>
            <param name="arguments">Arguments to pass to the type constructor.</param>
            <returns>An instance of specified type; <see langword="null"/>, if either no such a type,
            or an error has occurred.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.Activate(System.Type,System.Type[],System.Object[])">
            <summary>
            Instantiates specified generic type; returns <see langword="null"/>, if either no such a type,
            or an error has occurred.
            </summary>
            <param name="type">Generic type definition to instantiate.</param>
            <param name="genericArguments">Generic arguments for the type to instantiate 
            (<see langword="null"/> means <paramref name="type"/> isn't a generic type definition).</param>
            <param name="arguments">Arguments to pass to the type constructor.</param>
            <returns>An instance of specified type; <see langword="null"/>, if either no such a type,
            or an error has occurred.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetConstructor(System.Type,System.Object[])">
            <summary>
            Gets the public constructor of type <paramref name="type"/> 
            accepting specified <paramref name="arguments"/>.
            </summary>
            <param name="type">The type to get the constructor for.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Appropriate constructor, if a single match is found;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.OrderByInheritance(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Orders the specified <paramref name="types"/> by their inheritance
            (very base go first).
            </summary>
            <param name="types">The types to sort.</param>
            <returns>The list of <paramref name="types"/> ordered by their inheritance.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInterfaceMapFast(System.Type,System.Type)">
            <summary>
            Fast analogue of <see cref="M:System.Type.GetInterfaceMap(System.Type)"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="targetInterface">The target interface.</param>
            <returns>Interface map for the specified interface.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces of the specified type.
            Interfaces will be ordered from the very base ones to ancestors.
            </summary>
            <param name="type">The type to get the interfaces of.</param>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetCompatibles(System.Type)">
            <summary>
            Gets the sequence of type itself, all its base types and interfaces.
            Types will be ordered from the very base ones to ancestors with the specified type in the end of sequence.
            </summary>
            <param name="type">The type to get compatible types for.</param>
            <returns>The interfaces of the specified type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetFullName(System.Type)">
            <summary>
            Builds correct full generic type name.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> which name is built.</param>
            <returns>Full type name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetShortName(System.Type)">
            <summary>
            Builds correct short generic type name (without namespaces).
            </summary>
            <param name="type">A <see cref="T:System.Type"/> which name is built.</param>
            <returns>Short type name.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetCodeTypeReference(System.Type)">
            <summary>
            Gets the <see cref="T:System.CodeDom.CodeTypeReference"/> to the specified <paramref name="type"/>.
            </summary>
            <param name="type">A referenced <see cref="T:System.Type"/>.</param>
            <returns><see cref="T:System.CodeDom.CodeTypeReference"/> to given type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsNullable(System.Type)">
            <summary>
            Indicates whether <paramref name="type"/> is a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">Type to check.</param>
            <returns><see langword="True"/> if type is nullable type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsNullable``1">
            <summary>
            Indicates whether <typeparamref name="T"/> type is a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <returns><see langword="True"/> if type is nullable type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsFinal(System.Type)">
            <summary>
            Indicates whether <paramref name="type"/> is a final type.
            </summary>
            <param name="type">Type to check.</param>
            <returns><see langword="True"/> if type is final type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsFinal``1">
            <summary>
            Indicates whether <typeparamref name="T"/> type is a final type.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <returns><see langword="True"/> if type is final type;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetInvokeMethod(System.Type)">
            <summary>
            Gets the delegate "Invoke" method (describing the delegate) for 
            the specified <paramref name="delegateType"/>.
            </summary>
            <param name="delegateType">Type of the delegate to get the "Invoke" method of.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> object describing the delegate "Invoke" method.</returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">Type of the generic.</param>
            <returns>
            <see langword="true"/> if the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.GetGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> inherits 
            the generic <paramref name="baseType"/> and returns direct inheritor of generic <paramref name="baseType"/> if any.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">Type of the generic.</param>
            <returns>
            Generic <see cref="T:System.Type"/> that directly inherits <paramref name="baseType"/> if the specified <paramref name="type"/> inherits the generic <paramref name="baseType"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsOfGenericInterface(System.Type,System.Type)">
            <summary>
            Determines whether <paramref name="type"/> implements the <paramref name="_interface"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="_interface">The <see langword="interface"/>.</param>
            <returns>
             <see langword="true"/> if the specified <paramref name="type"/> implements the <paramref name="_interface"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.ToNullable(System.Type)">
            <summary>
            Converts <paramref name="type"/> to type that can assign both values of <paramref name="type"/> and <see landword="null"/>.
            This method is a reverse for <see cref="M:Xtensive.Reflection.TypeHelper.StripNullable(System.Type)"/> method.
            </summary>
            <param name="type">A type to convert.</param>
            <returns>
            If <paramref name="type"/> is a reference type or a <see cref="T:System.Nullable`1"/> instance returns <paramref name="type"/>.
            Otherwise returns <see cref="T:System.Nullable`1"/> of <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.StripNullable(System.Type)">
            <summary>
            Converts <paramref name="type"/> to <see cref="T:System.Nullable`1"/> if <paramref name="type"/> is a value type.
            Otherwise returns just <paramref name="type"/>.
            This method is a reverse for <see cref="M:Xtensive.Reflection.TypeHelper.ToNullable(System.Type)"/> method.
            </summary>
            <param name="type">The type to process.</param>
            <returns>
            <see cref="T:System.Nullable`1"/> of <paramref name="type"/> is specified type is a value type.
            Otherwise return just <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsAnonymous(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> is anonymous type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <see langword="true" /> if the specified type is anonymous; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsClosure(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> is closure type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <see langword="true" /> if the specified type is anonymous; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.TypeHelper.IsPublicNonAbstractInheritorOf(System.Type,System.Type)">
            <summary>
            Determines whether <paramref name="type"/> is a public non-abstract inheritor of <paramref name="baseType"/>.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">The base type.</param>
            <returns>
            <see langword="true"/> if type is a public non-abstract inheritor of specified base type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Core.Segment`1">
            <summary>
            A definition of segment with boundaries of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of segment boundaries.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Segment`1.Offset">
            <summary>
            Segment offset.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Segment`1.Length">
            <summary>
            Segment length.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Segment`1.Equals(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.CompareTo(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.op_Addition(Xtensive.Core.Segment{`0},`0)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="segment">The segment.</param>
            <param name="offsetShift">The offset shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Core.Segment`1.op_Subtraction(Xtensive.Core.Segment{`0},`0)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="segment">The segment.</param>
            <param name="offsetShift">The offset shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Core.Segment`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Segment`1.#ctor(`0,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="offset">Segment offset.</param>
            <param name="length">Segment length.</param>
        </member>
        <member name="P:Xtensive.Core.Segment`1.EndOffset">
            <summary>
            Gets <see cref="F:Xtensive.Core.Segment`1.Offset"/>+<see cref="F:Xtensive.Core.Segment`1.Length"/> value.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Triplet`1">
            <summary>
            Container of three values.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the triplet values.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.First">
            <summary>
            First value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.Second">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`1.Third">
            <summary>
            Third value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.Equals(Xtensive.Core.Triplet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.CompareTo(Xtensive.Core.Triplet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.op_Equality(Xtensive.Core.Triplet{`0},Xtensive.Core.Triplet{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.op_Inequality(Xtensive.Core.Triplet{`0},Xtensive.Core.Triplet{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`1.#ctor(`0,`0,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">A first value in triplet.</param>
            <param name="second">A second value in triplet.</param>
            <param name="third">A third value in triplet.</param>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.SerializableDocTemplate">
            <summary>
            Serializable type documentation template.
            </summary>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the instance of <see cref="T:Xtensive.Internals.DocTemplates.SerializableDocTemplate"/> class.
            </summary>
            <param name="info">Serialization info to store serialization data in.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of <see cref="T:Xtensive.Internals.DocTemplates.SerializableDocTemplate"/> class.
            </summary>
            <param name="info">Serialization info to get the deserialized data from.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.OnDeserialization(System.Object)">
            <summary>
            Handles post-deserialization initialization of the deserialized
            <see cref="T:Xtensive.Internals.DocTemplates.SerializableDocTemplate"/> instance.
            </summary>
            <param name="sender">The object invoking this method.</param>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.SingletonDocTemplate">
            <summary>
            Singleton documentation template.
            </summary>
            <remarks>
            <para id="About">
            This class is a singleton - use its <see cref="P:Xtensive.Internals.DocTemplates.SingletonDocTemplate.Instance"/>
            property to get the only instance of it.
            </para>
            </remarks>
        </member>
        <member name="P:Xtensive.Internals.DocTemplates.SingletonDocTemplate.Instance">
            <summary>
            Gets the only instance of <see cref="T:Xtensive.Internals.DocTemplates.SingletonDocTemplate"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate">
            <summary>
            Class with static <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default"/> documentation template.
            </summary>
            <remarks>
            <para id="About">
            This class has default instance - use its <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default"/>
            property to get it.
            </para>
            </remarks>
        </member>
        <member name="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default">
            <summary>
            Gets the default instance of <see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Box`1">
            <summary>
            Packs a single <see cref="F:Xtensive.Core.Box`1.Value"/> into the <see cref="T:System.ValueType"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="F:Xtensive.Core.Box`1.Value"/>.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Box`1.Value">
            <summary>
            Boxed value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Box`1.Equals(Xtensive.Core.Box{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Box`1.CompareTo(Xtensive.Core.Box{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Box`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Box`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Box`1.op_Equality(Xtensive.Core.Box{`0},Xtensive.Core.Box{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Box`1.op_Inequality(Xtensive.Core.Box{`0},Xtensive.Core.Box{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Box`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Box`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Boxed value.</param>
        </member>
        <member name="T:Xtensive.Collections.ThreadSafeList`1">
            <summary>
            Thread-safe list. Any operation on it is atomic.
            Note: it recreates its internal array (makes it twice larger) when it should grow up.
            </summary>
            <typeparam name="TItem">Value type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue``1(System.Int32,System.Func{System.Int32,``0,`0},``0)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <typeparam name="T">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue``2(System.Int32,System.Func{System.Int32,``0,``1,`0},``0,``1)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the list.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="index">The index of the value to get.</param>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.GetValue(System.Int32)">
            <summary>
            Gets the value by its index.
            </summary>
            <param name="index">The index to get value for.</param>
            <returns>Found value, or <see langword="default(TItem)"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value associated with specified index.
            </summary>
            <param name="index">The index to set value for.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Initialize(System.Object)">
            <summary>
            Initializes the list. 
            This method should be invoked just once - before
            the first operation on this list.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeList`1.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Collections.ThreadSafeList`1"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Collections.ThreadSafeList`1"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ThreadSafeList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.SetExtensions">
            <summary>
            <see cref="T:Xtensive.Collections.ISet`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsDisjointWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="set"/> and the 
            specified set of <paramref name="items"/> are disjoint.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> and the specified 
            set of <paramref name="items"/> are disjoint; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsEqualTo``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="set"/> and the 
            specified set of <paramref name="items"/> are equal.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> and the specified 
            set of <paramref name="items"/> are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsProperSubsetOf``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="set"/> is a proper subset of the 
            specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set to check if it's proper subset of <paramref name="items"/>.</param>
            <param name="items">The set of items.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> is a proper subset of the specified 
            set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsProperSupersetOf``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified set of <paramref name="items"/> is a proper subset of the 
            specified <paramref name="set"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items to check if it's proper subset of <paramref name="set"/>.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> is a proper subset of the specified 
            set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsSubsetOf``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="set"/> is a subset of the 
            specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set to check if it's subset of <paramref name="items"/>.</param>
            <param name="items">The set of items.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> is subset of the specified 
            set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsSupersetOf``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified set of <paramref name="items"/> is a subset of the 
            specified <paramref name="set"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items to check if it's a subset of <paramref name="set"/>.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> is subset of the specified 
            set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IsOverlappingWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="set"/> overlaps the 
            specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="set">The set to check if it overlaps the <paramref name="items"/>.</param>
            <param name="items">The set of items.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="set"/> overlaps the specified 
            set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.Union``2(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Unions the specified <paramref name="set"/> and the 
            specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <typeparam name="TSet">The type of set to return.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from union of the specified <paramref name="set"/> 
            and the specified set of <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.UnionWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Unions the specified <paramref name="target"/> and the 
            specified set of <paramref name="items"/> in the result set <paramref name="target"/>.
            </summary>
            <param name="target">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from union of the specified <paramref name="target"/> 
            and the specified set of <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.Intersect``2(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Intersects the specified <paramref name="set"/> and the 
            specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <typeparam name="TSet">The type of set to return.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from intersection of the specified <paramref name="set"/> 
            and the specified set of <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.AddIntersectionOf``1(Xtensive.Collections.ISet{``0},Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Intersects the specified <paramref name="set"/> and the 
            specified set of <paramref name="items"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The result set.</param>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from intersection of the specified <paramref name="set"/> 
            and the specified set of <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.IntersectWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Intersects the specified <paramref name="target"/> and the 
            specified set of <paramref name="items"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from intersection of the specified <paramref name="target"/> 
            and the specified set of <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.Except``2(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the specified set of <paramref name="items"/> from the 
            specified <paramref name="set"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <typeparam name="TSet">The type of set to return.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from excepting of the specified set of <paramref name="items"/>
            from the specified <paramref name="set"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.AddExceptionOf``1(Xtensive.Collections.ISet{``0},Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the specified set of <paramref name="items"/> from the 
            specified <paramref name="set"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The result set.</param>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from excepting of the specified set of <paramref name="items"/>
            from the specified <paramref name="set"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.ExceptWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the specified set of <paramref name="items"/> from the 
            specified <paramref name="target"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived from excepting of the specified set of <paramref name="items"/>
            from the specified <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.SymmetricExcept``2(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="set"/> from <paramref name="set"/> and adds 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="set"/> to <paramref name="set"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <typeparam name="TSet">The type of set to return.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived by excepting the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="set"/> from <paramref name="set"/> and adding 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="set"/> to <paramref name="set"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.AddSymmetricExceptionOf``1(Xtensive.Collections.ISet{``0},Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="set"/> from <paramref name="set"/> and adds 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="set"/> to <paramref name="set"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The result set.</param>
            <param name="set">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived by excepting the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="set"/> from <paramref name="set"/> and adding 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="set"/> to <paramref name="set"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.SetExtensions.SymmetricExceptWith``1(Xtensive.Collections.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excepts the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="target"/> from <paramref name="target"/> and adds 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="target"/> to <paramref name="target"/> in the result set <paramref name="target"/>.
            </summary>
            <typeparam name="TItem">The type of set items.</typeparam>
            <param name="target">The set.</param>
            <param name="items">The set of items.</param>
            <returns>A set derived by excepting the elements of the specified set of <paramref name="items"/> contained in
            the  specified <paramref name="target"/> from <paramref name="target"/> and adding 
            the elements of the specified set of <paramref name="items"/> not contained in
            the  specified <paramref name="target"/> to <paramref name="target"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Collections.SetBase`1">
            <summary>
            Base type for sets.
            </summary>
            <typeparam name="TItem">Type of values to store to set.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.RemoveWhere(System.Predicate{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.SetBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Items">
            <summary>
            Gets the underlying dictionary containing all the set items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.ContainsNull">
            <summary>
            Gets or sets a value indicating whether a set contains <see langword="null"/> item.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.SetBase`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.ThreadSafeDictionary`2">
            <summary>
            Thread-safe dictionary. Any operation on it is atomic.
            Note: it recreates its internal dictionary on any data modifying
            operation on it.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TItem">Value type.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue``1(`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <typeparam name="T">The type of the <paramref name="argument"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <param name="argument">The argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.GetValue``2(`0,System.Func{`0,``0,``1,`1},``0,``1)">
            <summary>
            Gets the value or generates it using specified <paramref name="generator"/> and 
            adds it to the dictionary.
            </summary>
            <typeparam name="T1">The type of the <paramref name="argument1"/> to pass to the <paramref name="generator"/>.</typeparam>
            <typeparam name="T2">The type of the <paramref name="argument2"/> to pass to the <paramref name="generator"/>.</typeparam>
            <param name="key">The key to get the value for.</param>
            <param name="generator">The value generator.</param>
            <param name="argument1">The first argument to pass to the <paramref name="generator"/>.</param>
            <param name="argument2">The second argument to pass to the <paramref name="generator"/>.</param>
            <returns>Found or generated value.</returns>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value by its key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">Found value, or default value, if value is not found.</param>
            <returns>Whether or not value was found.</returns>    
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with specified key.
            </summary>
            <param name="key">The key to set value for.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Initialize(System.Object)">
            <summary>
            Initializes the dictionary. 
            This method should be invoked just once - before
            the first operation on this dictionary.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.ThreadSafeDictionary`2.Create(System.Object)">
            <summary>
            Creates and initializes a new <see cref="T:Xtensive.Collections.ThreadSafeDictionary`2"/>.
            </summary>
            <param name="syncRoot"><see cref="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot"/> property value.</param>
            <returns>New initialized <see cref="T:Xtensive.Collections.ThreadSafeDictionary`2"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ThreadSafeDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.AdvancedComparer`1">
            <summary>
            Provides delegates allowing to call comparison methods faster.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> generic argument.</typeparam>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ComparerImplementation">
            <summary>
            Gets the underlying comparer implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.EqualityComparerImplementation">
            <summary>
            Gets the underlying equality comparer implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Provider">
            <summary>
            Gets the provider underlying comparer is associated with.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ComparisonRules">
            <summary>
            Gets comparison rules used by the underlying comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Compare">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.Equals">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.GetHashCode">
            <summary>
            Gets <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.GetNearestValue">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.INearestValueProvider`1.GetNearestValue(`0,Xtensive.Core.Direction)"/> method delegate.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ValueRangeInfo">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.IHasRangeInfo`1.ValueRangeInfo"/> value used by the underlying comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.AdvancedComparer`1.ApplyRules">
            <summary>
            Gets <see cref="M:Xtensive.Comparison.IAdvancedComparer`1.ApplyRules(Xtensive.Comparison.ComparisonRules)"/> method delegate.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.GetAsymmetric``1">
            <summary>
            A shortcut to <see cref="M:Xtensive.Comparison.IAdvancedComparer`1.GetAsymmetric``1"/> method
            of <see cref="F:Xtensive.Core.MethodCacheBase`1.Implementation"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.Cast``1">
            <summary>
            Wraps this instance with the <see cref="T:Xtensive.Comparison.CastingComparer`2"/>.
            </summary>
            <typeparam name="TTarget">The type to provide the comparer for (by wrapping this comparer).</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(Xtensive.Comparison.IAdvancedComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="implementation">Implementation to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
            <param name="equalityComparer">Equality comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">Comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="equalityComparer">Equality comparer to provide the delegates for.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the instance of this class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Xtensive.Comparison.AdvancedComparer`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparer`1.Default">
            <summary>
            Gets default advanced comparer for type <typeparamref name="T"/>
            (uses <see cref="P:Xtensive.Comparison.ComparerProvider.Default"/> <see cref="T:Xtensive.Comparison.ComparerProvider"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.AdvancedComparer`1.System">
            <summary>
            Gets system comparers exposed as <see cref="T:Xtensive.Comparison.AdvancedComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Comparison.ComparisonRule">
            <summary>
            Describes how to compare values of comparable objects.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.None">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Positive">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Negative">
            <summary>
            Predefined rule with <see cref="F:Xtensive.Comparison.ComparisonRule.Direction"/> = <see cref="F:Xtensive.Core.Direction.Negative"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Direction">
            <summary>
            Gets <see cref="T:Xtensive.Core.Direction"/> for the comparison.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRule.Culture">
            <summary>
            Gets <see cref="T:System.Globalization.CultureInfo"/> for the comparison.
            <see langword="Null"/> means no culture is specified.
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> should normally be used
            for the comparison in this case.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Invert">
            <summary>
            Inverts the direction of the rule.
            </summary>
            <returns>The same rule, but with inverted direction.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Combine(Xtensive.Comparison.ComparisonRule)">
            <summary>
            Combines new comparison rule with the rule described by this instance.
            </summary>
            <param name="rule">Rule to combine.</param>
            <returns>Result of the combination.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Equals(Xtensive.Comparison.ComparisonRule)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Equality(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRule)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Inequality(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRule)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="x">The first argument.</param>
            <param name="y">The second argument.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Implicit(Xtensive.Comparison.ComparisonRule)~Xtensive.Comparison.ComparisonRules">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Comparison.ComparisonRule"/> to <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            </summary>
            <param name="comparisonRule">The rule to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.op_Implicit(Xtensive.Core.Direction)~Xtensive.Comparison.ComparisonRule">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Core.Direction"/> to <see cref="T:Xtensive.Comparison.ComparisonRule"/>.
            </summary>
            <param name="direction">Direction to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.#ctor(Xtensive.Core.Direction)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">Initial <see cref="T:Xtensive.Core.Direction"/> property value.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRule.#ctor(Xtensive.Core.Direction,System.Globalization.CultureInfo)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">Initial <see cref="T:Xtensive.Core.Direction"/> property value.</param>
            <param name="culture">Initial <see cref="F:Xtensive.Comparison.ComparisonRule.Culture"/> property value.</param>
        </member>
        <member name="T:Xtensive.Comparison.ComparisonRules">
            <summary>
            Ordering rule for <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/> comparer.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.None">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.Positive">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.ComparisonRules.Negative">
            <summary>
            Predefined rules with <see cref="T:Xtensive.Core.Direction"/> = <see cref="F:Xtensive.Core.Direction.Negative"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetCompositeValue(System.Int32)">
            <summary>
            Gets the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule 
            for the specified index of composite rule.
            </summary>
            <param name="index">Index of composite rule to get the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of.</param>
            <returns><see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetDefaultRuleDirection(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Core.Direction"/> of the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule 
            for the specified index of composite rule.
            </summary>
            <param name="index">Index of composite rule to get the <see cref="T:Xtensive.Core.Direction"/> of.</param>
            <returns><see cref="T:Xtensive.Core.Direction"/> of the <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rule, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Combine(Xtensive.Comparison.ComparisonRules)">
            <summary>
            Combines new comparison rules with the rules described by this instance.
            </summary>
            <param name="rules">Rules to combine.</param>
            <returns>Result of the combination.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Equals(Xtensive.Comparison.ComparisonRules)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.op_Implicit(Xtensive.Core.Direction)~Xtensive.Comparison.ComparisonRules">
            <summary>
            Implicit conversion of <see cref="T:Xtensive.Core.Direction"/> to <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            </summary>
            <param name="direction">The direction to convert.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRules[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
            <param name="composite">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> property value.
            Last composite rule is considered as <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/> rule.</param>
        </member>
        <member name="M:Xtensive.Comparison.ComparisonRules.#ctor(Xtensive.Comparison.ComparisonRule,Xtensive.Comparison.ComparisonRules[],Xtensive.Comparison.ComparisonRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="value">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Value"/> property value.</param>
            <param name="composite">Initial <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> property value.</param>
            <param name="tail">Tail comparison rule (repeated infinitely after composite rules).</param>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Value">
            <summary>
            Gets primary <see cref="T:Xtensive.Comparison.ComparisonRule"/> value.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Tail">
            <summary>
            Gets tail <see cref="T:Xtensive.Comparison.ComparisonRules"/>.
            Tail rule is considered repeating infinitely 
            starting from <see cref="P:Xtensive.Comparison.ComparisonRules.TailIndex"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Count">
            <summary>
            Gets count of <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rules.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.TailIndex">
            <summary>
            Gets <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/> rule index in <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/> rules.
            Always returns <see cref="P:Xtensive.Comparison.ComparisonRules.Count"/>-1.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.IsRecursive">
            <summary>
            Indicates whether rule is recursive - 
            i.e. its <see cref="P:Xtensive.Comparison.ComparisonRules.Count"/>==<see langword="1"/> and 
            <see cref="P:Xtensive.Comparison.ComparisonRules.Composite"/><see langword="[0]"/> returns itself.
            </summary>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Item(System.Int32)">
            <summary>
            Gets composite rule for the specified index of composite value.
            </summary>
            <param name="index">Index of composite rule to get.</param>
            <returns>An instance of <see cref="T:Xtensive.Comparison.ComparisonRules"/>, 
            if rule for specified <paramref name="index"/> is found; 
            otherwise, <see cref="P:Xtensive.Comparison.ComparisonRules.Tail"/>.</returns>
        </member>
        <member name="P:Xtensive.Comparison.ComparisonRules.Composite">
            <summary>
            Gets a copy of internal array of composite rules
            that are used to order composite values.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Pair`1">
            <summary>
            A pair of two values of the same type.
            </summary>
            <typeparam name="T">The type of both stored values.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Pair`1.First">
            <summary>
            The first value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Pair`1.Second">
            <summary>
            The second value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Pair`1.Equals(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.CompareTo(Xtensive.Core.Pair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.op_Equality(Xtensive.Core.Pair{`0},Xtensive.Core.Pair{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.op_Inequality(Xtensive.Core.Pair{`0},Xtensive.Core.Pair{`0})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`1.#ctor(`0,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">The first value in the pair.</param>
            <param name="second">The second value in the pair.</param>
        </member>
        <member name="T:Xtensive.Reflection.ExecutionSequenceHandler`1">
            <summary>
            Execution sequence handler - a delegate that can be passed to 
            <see cref="M:Xtensive.Reflection.DelegateHelper.ExecuteDelegates``1(Xtensive.Reflection.ExecutionSequenceHandler{``0}[],``0@,Xtensive.Core.Direction)"/> method.
            </summary>
            <typeparam name="T">Argument type.</typeparam>
            <param name="argument">Argument value.</param>
            <param name="index">Index of executed delegate in sequence.</param>
            <returns><see langword="True"/>, if execution of sequence should be stopped;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Boolean}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Byte}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#SByte}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int16}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt16}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int32}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt32}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Int64}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#UInt64}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Single}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Double}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#DateTime}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#TimeSpan}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.DecimalRoughAdvancedConverter.Xtensive#Conversion#IAdvancedConverter{System#Decimal@System#Char}#Convert(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Comparison.ValueRangeInfo`1">
            <summary>
            Represents a pair of smallest and largest values defined for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of <typeparamref name="T"/>.</typeparam>
        </member>
        <member name="M:Xtensive.Comparison.ValueRangeInfo`1.Invert">
            <summary>
            Inverts the instance of <see cref="T:Xtensive.Comparison.ValueRangeInfo`1"/>.
            Exactly, exchanges <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/> and <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>,
            and replaced <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/> to a negative one.
            </summary>
            <returns>Inverted <see cref="T:Xtensive.Comparison.ValueRangeInfo`1"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Comparison.ValueRangeInfo`1.#ctor(System.Boolean,`0,System.Boolean,`0,System.Boolean,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="hasMinValue">if set to <see langword="true"/> then this instance has the smallest possible value of <typeparamref name="T"/>.</param>
            <param name="minValue">The smallest possible value of <typeparamref name="T"/>.</param>
            <param name="hasMaxValue">if set to <see langword="true"/> then this instance has the largest possible value of <typeparamref name="T"/>.</param>
            <param name="maxValue">The largest possible value of <typeparamref name="T"/>.</param>
            <param name="hasDeltaValue">if set to <see langword="true"/> then this instance has the smallest possible delta value of <typeparamref name="T"/>.</param>
            <param name="deltaValue">The smallest possible delta value of <typeparamref name="T"/>.</param>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasMinValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasMaxValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.HasDeltaValue">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/>.
            </summary>
            <value>
              <see langword="true"/> if this instance has <see cref="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.MinValue">
            <summary>
            Represents the smallest possible value of a T.
            </summary>
            <value>The smallest possible value.</value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.MaxValue">
            <summary>
            Represents the largest possible value of a T.
            </summary>
            <value>The largest possible value.</value>
        </member>
        <member name="P:Xtensive.Comparison.ValueRangeInfo`1.DeltaValue">
            <summary>
            Represents the smallest possible delta value of a <typeparamref name="T"/>.
            </summary>
            <value>The smallest possible delta value.</value>
        </member>
        <member name="T:Xtensive.Comparison.WrappingComparer`3">
            <summary>
            Base class for any wrapping <see cref="T:Xtensive.Comparison.IAdvancedComparer`1"/>s.
            </summary>
            <typeparam name="T">The type to compare.</typeparam>
            <typeparam name="TBase1">First base (wrapped) type.</typeparam>
            <typeparam name="TBase2">Second base (wrapped) type.</typeparam>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`3.BaseComparer1">
            <summary>
            Comparer delegates for <typeparamref name="TBase1"/> type.
            </summary>
        </member>
        <member name="F:Xtensive.Comparison.WrappingComparer`3.BaseComparer2">
            <summary>
            Comparer delegates for <typeparamref name="TBase2"/> type.
            </summary>
        </member>
        <member name="M:Xtensive.Comparison.WrappingComparer`3.#ctor(Xtensive.Comparison.IComparerProvider,Xtensive.Comparison.ComparisonRules)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="provider">Comparer provider this comparer is bound to.</param>
            <param name="comparisonRules">Comparison rules.</param>
        </member>
        <member name="T:Xtensive.Conversion.AdvancedConverterProvider">
            <summary>
            Default <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> provider. 
            Provides default converter for specified types.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="T:Xtensive.Conversion.IAdvancedConverterProvider">
            <summary>
            Provides <see cref="T:Xtensive.Conversion.AdvancedConverter`2"/>s.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.IAdvancedConverterProvider.GetConverter``2">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> for specified types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.
            </summary>
            <typeparam name="TFrom">Type to convert from.</typeparam>
            <typeparam name="TTo">Type to convert to.</typeparam>
            <returns><see cref="T:Xtensive.Conversion.IAdvancedConverter`2"/> instance  for specified types <typeparamref name="TFrom"/> and <typeparamref name="TTo"/>.</returns>
        </member>
        <member name="P:Xtensive.Conversion.IAdvancedConverterProvider.BaseTime">
            <summary>
            Gets base time for <see cref="T:System.DateTime"/> conversions.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.AdvancedConverterProvider.ZeroTime">
            <summary>
            Zero time point (for conversion of <see cref="T:System.DateTime"/> to e.g. <see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.GetConverter``2">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.PreferAssociate``3(``2,``2)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.CreateCustomAssociate``3">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.ConvertAssociate``4(``2)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.AdvancedConverterProvider.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterProvider.Default">
            <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true"/>
        </member>
        <member name="P:Xtensive.Conversion.AdvancedConverterProvider.BaseTime">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Reflection.EmitHelper">
            <summary>
            Code emission (via <see cref="N:System.Reflection.Emit"/>) helper.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.EmitHelper.EmitIfElse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Action,System.Action)">
            <summary>
            Helps to emit "if-else" or "if" block. 
            Implies all the necessary values <paramref name="brElse"/> operation needs
            are already on the stack.
            </summary>
            <param name="il">IL generator.</param>
            <param name="brElse">An opcode transferring </param>
            <param name="onTrue">Action to execute for "if" part.</param>
            <param name="onFalse">Action to execute for "else" part. Could be <see langword="null"/> for simple "if" statement.</param>
        </member>
        <member name="M:Xtensive.Reflection.EmitHelper.EmitSwitch(System.Reflection.Emit.ILGenerator,System.Int32,System.Boolean,System.Action{System.Int32,System.Boolean})">
            <summary>
            Helps to emit "switch" block for all the integer values 
            in 0...<paramref name="valueCount"/> range. 
            Implies that switch argument is already on the stack.
            </summary>
            <param name="il">IL generator.</param>
            <param name="valueCount">Switch integer values count.</param>
            <param name="breakAnyCase">Break any case.</param>
            <param name="onLabel">Action to execute per any switch label.</param>
        </member>
        <member name="M:Xtensive.Reflection.EmitHelper.EmitSwitch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[],System.Boolean,System.Action{System.Int32,System.Boolean})">
            <summary>
            Helps to emit "switch" block for provided <paramref name="labels"/> using case values
            varying in <c>0</c>...<c>labels.Length-1</c> range. 
            Implies that switch argument is already on the stack.
            </summary>
            <param name="il">IL generator.</param>
            <param name="labels">An array of not marked yet labels to pass the control to.</param>
            <param name="breakAnyCase">Break any case.</param>
            <param name="onLabel">Action to execute per any switch label.</param>
        </member>
        <member name="T:Xtensive.Reflection.MethodHelper">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.String[],System.Object[])">
            <summary>
            Gets generic method by names \ types of its arguments.
            </summary>
            <param name="type">Type to search the method in.</param>
            <param name="name">Method name.</param>
            <param name="bindingFlags">Binding attributes.</param>
            <param name="genericArgumentNames">Generic arguments of the method.</param>
            <param name="parameterTypes">Either strings or <see cref="T:System.Type"/>s of parameters (mixing is allowed).</param>
            <returns>Found method, if match was found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Gets constructor by names \ types of its parameters.
            </summary>
            <param name="type">Type to search constructor in.</param>
            <param name="bindingFlags">Binding attributes.</param>
            <param name="parameterTypes">Either strings or <see cref="T:System.Type"/>s of parameters (mixing is allowed).</param>
            <returns>Found constructor, if match was found;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Gets the types of method parameters.
            </summary>
            <param name="method">The method to get the types of parameters of.</param>
            <returns>The array of types of method parameters.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsPropertyAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property accessor.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is property accessor; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsGetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property getter.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is getter; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a property setter.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is setter; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetProperty(System.Reflection.MethodInfo)">
            <summary>
            Gets the property to which <paramref name="method"/> belongs.
            </summary>
            <param name="method">The method to get the property for.</param>
            <returns>Found property;
            <see langword="null" />, if no property is associated with the method.</returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsEventAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is an event accessor.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is event accessor; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsAddEventHandler(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is "add event handler" method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is "add event handler" method; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.IsRemoveEventHandler(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is "remove event handler" method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is "remove event handler" method; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Reflection.MethodHelper.GetEvent(System.Reflection.MethodInfo)">
            <summary>
            Gets the event to which <paramref name="method"/> belongs.
            </summary>
            <param name="method">The method to get the event for.</param>
            <returns>Found event;
            <see langword="null" />, if no event is associated with the method.</returns>
        </member>
        <member name="T:Xtensive.Reflection.MethodHelper.AnyArrayPlaceholder">
            <summary>
            This class is used internally by <see cref="T:Xtensive.Reflection.MethodHelper"/> to denote
            an array of any type when matching parameter types
            in <see cref="M:Xtensive.Reflection.MethodHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.String[],System.Object[])"/> and <see cref="M:Xtensive.Reflection.MethodHelper.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.DirectionCollection`1">
            <summary>
             A sequence of <typeparamref name="T"/>-<see cref="T:Xtensive.Core.Direction"/> pairs.
             Normally used to describe "order by" clauses.
            </summary>
             <typeparam name="T">The type of collection item to associate with direction.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.FlagCollection`2">
            <summary>
            A sequence of <typeparamref name="TKey"/>-<typeparamref name="TFlag"/> pairs.
            </summary>
            <remarks>
            Item count should be less than 32.
            <see cref="T:Xtensive.Conversion.Biconverter`2"/> is used to convert flag keys from type <typeparamref name="TFlag"/> to <see cref="T:System.Boolean"/>.
            </remarks>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TFlag">Type of the flag.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IList{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TFlag}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Equals(Xtensive.Collections.FlagCollection{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(Xtensive.Conversion.Biconverter{`1,System.Boolean})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="converter"><see cref="P:Xtensive.Collections.FlagCollection`2.Converter"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(Xtensive.Conversion.Biconverter{`1,System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="converter"><see cref="P:Xtensive.Collections.FlagCollection`2.Converter"/> property value.</param>
            <param name="enumerable">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="M:Xtensive.Collections.FlagCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Converter">
            <summary>
            Gets <see cref="T:Xtensive.Conversion.Biconverter`2"/> instance
            used to convert flag value to <see cref="T:System.Boolean"/> and vice versa.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Flags">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.Collection`1"/> containing the flags.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Keys">
            <summary>
            Gets a list of keys.
            </summary>
            <returns>A list of keys.</returns>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IDictionary{TKey@TFlag}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Values">
            <summary>
            Gets an array of values.
            </summary>
            <returns>An array of values.</returns>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.System#Collections#Generic#IDictionary{TKey@TFlag}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.FlagCollection`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,Xtensive.Core.Direction}})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="enumerable">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor(`0[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="items">Initial content of collection.</param>
        </member>
        <member name="M:Xtensive.Collections.DirectionCollection`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ArrayUtils`1">
            <summary>
            <see cref="T:System.Array"/> related utilities.
            </summary>
            <typeparam name="TItem">Type of array item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ArrayUtils`1.Create(System.Int32)">
            <summary>
            Creates a new 1-dimensional array of specified <paramref name="size"/>,
            if <paramref name="size"/> isn't <see langword="0"/>;
            otherwise, returns <see cref="P:Xtensive.Collections.ArrayUtils`1.EmptyArray"/>.
            </summary>
            <param name="size">Size of the array to create.</param>
            <returns>Created array, if <paramref name="size"/> isn't <see langword="0"/>;
            otherwise, <see cref="P:Xtensive.Collections.ArrayUtils`1.EmptyArray"/>.</returns>
        </member>
        <member name="P:Xtensive.Collections.ArrayUtils`1.EmptyArray">
            <summary>
            Gets empty array of items of <typeparamref name="TItem"/> type.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.IFilterable`2">
            <summary>
            Defines contract for a filterable collection of <typeparamref name="TItem"/>s.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IFilterable`2.Find(`0)">
            <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria"/>.
            </summary>
            <param name="criteria">The object to filter initial collection with.</param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/> object.</returns>
        </member>
        <member name="M:Xtensive.Collections.IFilterable`2.Find(`0,Xtensive.Core.MatchType)">
            <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria"/>.
            </summary>
            <param name="criteria">The object to filter initial collection with.</param>
            <param name="matchType">Type of the match.</param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/> object.</returns>
        </member>
        <member name="T:Xtensive.Collections.FixedList3`1">
            <summary>
            Defines a fixed stack-like list with three items.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.Push(`0)">
            <summary>
            Adds item to the <see cref="T:Xtensive.Collections.FixedList3`1"/> list.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentException">The list already have three items.</exception>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.Pop">
            <summary>
            Removes latest item from the <see cref="T:Xtensive.Collections.FixedList3`1"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">First item to add.</param>
            <param name="second">Second item ot add.</param>
        </member>
        <member name="M:Xtensive.Collections.FixedList3`1.#ctor(`0,`0,`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">First item to add.</param>
            <param name="second">Second item ot add.</param>
            <param name="third">Third item to add.</param>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Index of the item</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is greater or equal count of items.</exception>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Items">
            <summary>
            Enumerates all items.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.FixedList3`1.Count">
            <summary>
            Gets count of items.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.Set`1">
            <summary>
            A set of items (with event-handling support).
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Xtensive.Collections.SetSlim`1">
            <summary>
            Represents a set of items.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="items">Collection to copy the items from.</param>
        </member>
        <member name="M:Xtensive.Collections.SetSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="items">Collection to copy the items from.</param>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="P:Xtensive.Collections.SetSlim`1.Items">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnChanging">
            <summary>
            Performs additional custom processes when changing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnChanged">
            <summary>
            Performs additional custom processes after the contents of the 
            collection instance was changed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnClearing">
            <summary>
            Performs additional custom processes when clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnCleared">
            <summary>
            Performs additional custom processes after clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnInserting(`0)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            collection instance.
            </summary>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnInserted(`0)">
            <summary>
            Performs additional custom processes after inserting a new element into the
            collection instance.
            </summary>
            <param name="value">The inserted value.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnRemoving(`0)">
            <summary>
            Performs additional custom processes before removing an element from the
            collection instance.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnRemoved(`0)">
            <summary>
            Performs additional custom processes after removing an element from the
            collection instance.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnValidate(`0)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <remarks>
            The default implementation of this method determines whether value is a <see langword="null"/> 
            reference (Nothing in Visual Basic), and, if so, throws <see cref="T:System.ArgumentNullException"/>. 
            It is intended to be overridden by a derived class to perform additional action 
            when the specified element is validated.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnItemChanging(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item is about to be changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.OnItemChanged(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="comparer">Equality comparer for the set type.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="items">Collection to copy the items from.</param>
        </member>
        <member name="M:Xtensive.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="items">Collection to copy the items from.</param>
            <param name="comparer">Equality comparer for the set type.</param>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Changing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Changed">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Validate">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Clearing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Cleared">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Inserting">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Inserted">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Removing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.Removed">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.ItemChanging">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.Set`1.ItemChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Diagnostics.StringLog">
            <summary>
            Log writing all events to <see cref="T:System.Text.StringBuilder"/> <see cref="P:Xtensive.Diagnostics.StringLog.Output"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.StringLog.LogEventText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.StringLog.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Log name.</param>
        </member>
        <member name="P:Xtensive.Diagnostics.StringLog.Output">
            <summary>
            Gets output of this log (as <see cref="T:System.Text.StringBuilder"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.StringLog.Text">
            <summary>
            Gets output of this log (as <see cref="T:System.String"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Core.MatchType">
            <summary>
            Possible types of match to look for.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogIndent">
            <summary>
            Used internally by <see cref="T:Xtensive.Diagnostics.LogIndentScope"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogIndent.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogIndent.Activate">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogIndent.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Diagnostics.LogIndentScope">
            <summary>
            Log indent scope. 
            An instance of this class adds indent to all logged messages
            in the current thread. Dispose the instance to remove the indent.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogIndentScope.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogIndentScope.CurrentIndent">
            <summary>
            Gets current indent value.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogIndentScope.CurrentIndentString">
            <summary>
            Gets current indent as string.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogIndentScope.Indent">
            <summary>
            Gets the indent associated with this scope.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogIndentScope.IndentString">
            <summary>
            Gets the indent associated with this scope as string.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.LogEventHandler">
            <summary>
            <see cref="T:Xtensive.Diagnostics.IRealLog"/> event handler (see <see cref="E:Xtensive.Diagnostics.IRealLog.OnLogEvent"/>).
            </summary>
            <param name="source">Event source.</param>
            <param name="eventType">Event type.</param>
            <param name="message">Message to log.</param>
            <param name="exception">Exception to log.</param>
            <param name="capturedBy">The scope which captured this event, if any.</param>
        </member>
        <member name="T:Xtensive.Diagnostics.LogEventTypes">
            <summary>
            <see cref="T:Xtensive.Diagnostics.IRealLog"/> event types.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.None">
            <summary>
            None of the events.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.Debug">
            <summary>
            Debug-only event.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.Info">
            <summary>
            Information.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.FatalError">
            <summary>
            Fatal error.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.LogEventTypes.All">
            <summary>
            All events.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.DebugInfo">
            <summary>
            Provides various debugging related information.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.DebugInfo.IsUnitTestSessionRunning">
            <summary>
            <see langword="True"/>, if current method is executed under unit test runner.
            </summary>
            <remarks>
            Currently only NUnit tests are recognized.
            Note that value of this property is detected just once - during its first call.
            </remarks>
        </member>
        <member name="P:Xtensive.Diagnostics.DebugInfo.IsRunningOnBuildServer">
            <summary>
            <see langword="True"/>, if current method is executed on build server.
            </summary>
            <remarks>
            Currently only TeamCity is recognized.
            Note that value of this property is detected just once - during its first call.
            </remarks>
        </member>
        <member name="T:Xtensive.Diagnostics.LogCaptureScope">
            <summary>
            Log capture scope.
            Forward all the log messages sent to any <see cref="T:Xtensive.Diagnostics.LogTemplate`1"/> (or to the specified set of them) 
            to specified <see cref="T:Xtensive.Diagnostics.Log"/> as well.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.Clear">
            <summary>
            Clears captured event types state.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.IsCaptured(Xtensive.Diagnostics.LogEventTypes)">
            <summary>
            Returns <see langword="true"/> if at least one event with specified event type are captured by current instance of <see cref="T:Xtensive.Diagnostics.LogCaptureScope"/>.
            </summary>
            <param name="eventType">Event type to check.</param>
            <returns><see langword="true"/> if this scope captured events with specified 
            event type; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.IsCapturing(Xtensive.Diagnostics.LogEventTypes)">
            <summary>
            Returns <see langword="true"/> if this or outer scope should capture specified 
            event type.
            </summary>
            <param name="eventType">Event type to check.</param>
            <returns><see langword="True"/> if this or outer scope should capture specified 
            event type.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.IsCapturing(Xtensive.Diagnostics.ILog)">
            <summary>
            Returns <see langword="true"/> if this scope should capture events from 
            specified <see cref="T:Xtensive.Diagnostics.ILog"/>.
            </summary>
            <param name="log">Log to check.</param>
            <returns><see langword="True"/> if this scope should capture events from 
            specified <see cref="T:Xtensive.Diagnostics.ILog"/>.</returns>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.Activate(Xtensive.Diagnostics.ILog)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.#ctor(Xtensive.Diagnostics.ILog,Xtensive.Diagnostics.ILog[])">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="log">New log to use.</param>
            <param name="captureFilter">A set of logs which events should be captured;
            <see langword="null"/> means events from all logs should be captured.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.#ctor(Xtensive.Diagnostics.ILog,System.Boolean,Xtensive.Diagnostics.ILog[])">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="log">New log to use.</param>
            <param name="logEnterLeave">Logs entering and leaving this scope.</param>
            <param name="captureFilter">A set of logs which events should be captured;
            <see langword="null"/> means events from all logs should be captured.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.LogCaptureScope.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Diagnostics.LogCaptureScope.CaptureEventTypes">
            <summary>
            Gets enabled event types for this and outer <see cref="T:Xtensive.Diagnostics.LogCaptureScope"/>s.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogCaptureScope.CaptureFilter">
            <summary>
            Gets capture filter for this scope.
            <see langword="Null"/> implies events from all <see cref="T:Xtensive.Diagnostics.ILog"/>s are captured.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.LogCaptureScope.InitialIndent">
            <summary>
            Gets <see cref="P:Xtensive.Diagnostics.LogIndentScope.Indent"/> value on the moment
            when this <see cref="T:Xtensive.Diagnostics.LogCaptureScope"/> was created.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.MeasurementOptions">
            <summary>
            <see cref="T:Xtensive.Diagnostics.Measurement"/> options.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.None">
            <summary>
            Don't collect garbage and don't write to log.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.Default">
            <summary>
            Default measurement options: <see cref="F:Xtensive.Diagnostics.MeasurementOptions.Log"/>, <see cref="F:Xtensive.Diagnostics.MeasurementOptions.CollectGarbageOnEnter"/>, <see cref="F:Xtensive.Diagnostics.MeasurementOptions.CollectGarbageOnLeave"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.CollectGarbage">
            <summary>
            Indicates whether garbage must be collected both on enter and leave.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.CollectGarbageOnEnter">
            <summary>
            Indicates whether garbage must be collected on enter.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.CollectGarbageOnLeave">
            <summary>
            Indicates whether garbage must be collected on leave.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.Log">
            <summary>
            Indicates whether measurement results must be logged.
            </summary>
        </member>
        <member name="F:Xtensive.Diagnostics.MeasurementOptions.LogEnter">
            <summary>
            Indicates whether measurement start must be logged.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Exceptions">
            <summary>
            Most common <see cref="T:System.Exception"/> factory.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InternalError(System.String,Xtensive.Diagnostics.ILog)">
            <summary>
            Returns an exception informing internal error has occurred.
            </summary>
            <param name="description">Error description.</param>
            <param name="log"><see cref="T:Xtensive.Diagnostics.ILog"/> instance to log the problem;
            <see langword="null"/> means logging is not necessary.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InvalidUrl(System.String,System.String)">
            <summary>
            Returns an exception informing that URL is invalid.
            </summary>
            <param name="url">Invalid URL.</param>
            <param name="parameterName">Name of method parameter where URL was passed (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.AlreadyInitialized(System.String)">
            <summary>
            Returns an exception informing that object or property is already initialized.
            </summary>
            <param name="propertyName">Name of the property; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.AlreadyDisposed(System.String)">
            <summary>
            Returns an exception informing that object is already disposed.
            </summary>
            <param name="objectName">Name of the object; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.NotInitialized(System.String)">
            <summary>
            Returns an exception informing that object or property is not initialized,
            or not initialized properly.
            </summary>
            <param name="propertyName">Name of the property; <see langword="null"/>, if none.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.InvalidArgument``1(``0,System.String)">
            <summary>
            Returns an exception informing that specified argument
            value is not allowed or invalid.
            </summary>
            <param name="value">Actual parameter value.</param>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ObjectIsReadOnly(System.String)">
            <summary>
            Returns an exception informing that object is read-only.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionIsEmpty(System.String)">
            <summary>
            Returns an exception informing that collection is empty.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionIsReadOnly(System.String)">
            <summary>
            Returns an exception informing that collection is read-only.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.CollectionHasBeenChanged(System.String)">
            <summary>
            Returns an exception informing that collection has been changed during the enumeration.
            </summary>
            <param name="parameterName">Name of the method parameter (<see langword="null"/> if none).</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ContextRequired(System.Type,System.Type)">
            <summary>
            Returns an exception informing that context is required.
            </summary>
            <param name="contextType">Type of required context.</param>
            <param name="scopeType">Type of <see cref="T:Xtensive.Core.Scope`1"/> used to set the context.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ContextRequired``2">
            <summary>
            Returns an exception informing that context is required.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TScope">The type of the scope.</typeparam>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ScopeRequired(System.Type)">
            <summary>
            Returns an exception informing that scope is required.
            </summary>
            <param name="scopeType">Type of <see cref="T:Xtensive.Core.SimpleScope`1"/> used to set the context.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.ScopeRequired``1">
            <summary>
            Returns an exception informing that scope is required.
            </summary>
            <typeparam name="TScope">The type of the scope.</typeparam>
            <returns>Newly created exception.</returns>
        </member>
        <member name="M:Xtensive.Core.Exceptions.LambdaParameterIsOutOfScope(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Returns an exception informing that specified <see cref="T:System.Linq.Expressions.ParameterExpression"/> is out of scope.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>Newly created exception.</returns>
        </member>
        <member name="T:Xtensive.Core.ArgumentValidator">
            <summary>
            Helper class validation most common error conditions.
            </summary>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentNotNull(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/>.
            </summary>
            <param name="value">Value to compare with <see langword="null"/>.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsNotDefault``1(``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/>.
            </summary>
            <param name="value">Value to compare with <see langword="null"/>.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of default value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not
            <see langoword="null"/> or <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIs``1(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not <see langword="null"/> 
            and of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The expected type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIs(System.Object,System.Type,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is not <see langword="null"/> 
            and of <paramref name="type"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="type">The expected type of value.</param>
            <param name="parameterName">Name of the method parameter.</param>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsNullOr``1(System.Object,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is either <see langword="null"/>,
            or of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The expected type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is either <see langword="null"/>,
            or of <typeparamref name="T"/> type.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="lowerBoundary">Lower range boundary (inclusively).</param>
            <param name="upperBoundary">Upper range boundary (inclusively).</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is greater then the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsGreaterThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is greater then or equal
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is less then
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Xtensive.Core.ArgumentValidator.EnsureArgumentIsLessThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Ensures argument (<paramref name="value"/>) is less then or equal
            the specified <paramref name="boundary"/> value.
            </summary>
            <param name="value">Value to compare check.</param>
            <param name="boundary">Value boundary.</param>
            <param name="parameterName">Name of the method parameter.</param>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="T:Xtensive.Conversion.Biconverter`2">
            <summary>
            Delegate-based implementation.
            </summary>
            <typeparam name="TFrom">Type to convert from.</typeparam>
            <typeparam name="TTo">Type to convert to.</typeparam>
        </member>
        <member name="F:Xtensive.Conversion.Biconverter`2.ConvertForward">
            <summary>
            Gets the delegate converting specified value 
            from <typeparamref name="TFrom"/>
            to <typeparamref name="TTo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Conversion.Biconverter`2.ConvertBackward">
            <summary>
            Gets the delegate converting specified value 
            from <typeparamref name="TTo"/>
            to <typeparamref name="TFrom"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.Equals(Xtensive.Conversion.Biconverter{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(System.Converter{`0,`1},System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="convertForward">Forward converter.</param>
            <param name="convertBackward">Backward converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(Xtensive.Conversion.IAdvancedConverter{`0,`1},Xtensive.Conversion.IAdvancedConverter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="forwardConverter">Forward converter.</param>
            <param name="backwardConverter">Backward converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.Biconverter`2.#ctor(Xtensive.Conversion.IBiconverter{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="biconverter">The biconverter.</param>
        </member>
        <member name="P:Xtensive.Conversion.Biconverter`2.AsIs">
            <summary>
            Gets the "as is" bidirectional converter.
            Note: it involves boxing on any conversion (for <see cref="T:System.ValueType"/>s).
            </summary>
        </member>
        <member name="T:Xtensive.Core.Predicate`2">
            <summary>
            A delegate returning boolean and accepting two arguments.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Predicate`3">
            <summary>
            A delegate returning boolean and accepting three arguments.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Predicate`4">
            <summary>
            A delegate returning boolean and accepting four arguments.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.CollectionBase`1">
            <summary>
            Base class for any collection.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.CollectionBaseSlim`1">
            <summary>
            Lightweight base class for any collection.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Xtensive.Collections.CollectionBaseSlim`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Xtensive.Collections.CollectionBaseSlim`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBaseSlim`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.System#Collections#Generic#ICollection{TItem}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.CollectionBaseSlim`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element to the collection.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">Item to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all objects from the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Add(`0)">
            <summary>
            Adds new element to the collection.
            </summary>
            <param name="value">Item to add.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            Removes element from the the collection.
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.TrySubscribe(`0)">
            <summary>
            Tries to subscribe the collection on 
            change notifications from the specified item.
            </summary>
            <param name="item">The item to try.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.TryUnsubscribe(`0)">
            <summary>
            Tries to unsubscribe the collection from
            change notifications from the specified item.
            </summary>
            <param name="item">The item to try.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnChanging">
            <summary>
            Performs additional custom processes when changing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnChanged">
            <summary>
            Performs additional custom processes after the contents of the 
            collection instance was changed.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnClearing">
            <summary>
            Performs additional custom processes when clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnCleared">
            <summary>
            Performs additional custom processes after clearing the contents of the 
            collection instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnInserting(`0,System.Int32)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> of the value to insert.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnInserted(`0,System.Int32)">
            <summary>
            Performs additional custom processes after inserting a new element into the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> of the value to insert.</param>
            <param name="value">The inserted value.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnRemoving(`0,System.Int32)">
            <summary>
            Performs additional custom processes before removing an element from the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which to insert value.</param>
            <param name="value">The element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnRemoved(`0,System.Int32)">
            <summary>
            Performs additional custom processes after removing an element from the
            collection instance.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which to insert value.</param>
            <param name="value">The element to remove.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnValidate(`0)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <remarks>
            The default implementation of this method determines whether value is a <see langword="null"/> 
            reference (Nothing in Visual Basic), and, if so, throws <see cref="T:System.ArgumentNullException"/>. 
            It is intended to be overridden by a derived class to perform additional action 
            when the specified element is validated.
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnItemChanging(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item is about to be changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.OnItemChanged(System.Object,Xtensive.Collections.ChangeNotifierEventArgs)">
            <summary>
            Called when item was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xtensive.Collections.ChangeNotifierEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.CollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Xtensive.Collections.CollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Changing">
            <summary>
            Occurs when collection is intended to be changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Changed">
            <summary>
            Occurs when collection was changed.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Validate">
            <summary>
            Occurs when item is validated.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Clearing">
            <summary>
            Occurs when collection is inteneded to be cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Cleared">
            <summary>
            Occurs when collection was cleared.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Inserting">
            <summary>
            Occurs when item is inserting into collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Inserted">
            <summary>
            Occurs when item was inserted into colection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Removing">
            <summary>
            Occurs when item is removing from collection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.Removed">
            <summary>
            Occurs when item was removed from colection.
            </summary>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.ItemChanging">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Collections.CollectionBase`1.ItemChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Collections.IPriorityQueue`2">
            <summary>
            Priority queue interface.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of items to be stored in queue.</typeparam>
            <typeparam name="TPriority"><see cref="T:System.Type"/> of priority value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds an <paramref name="item"/> to the priority queue.
            </summary>
            <param name="item">Item to be added to the queue.</param>
            <param name="priority">Priority value.</param>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Dequeue">
            <summary>
            Removes top item from the queue.
            </summary>
            <returns>Top item from priority queue if applicable.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.DequeueRange(`1)">
            <summary>
            Removes range of items from queue. Item's priority must be greater than <paramref name="priority"/>.
            </summary>
            <param name="priority">Threshold value for items to remove from queue </param>
            <returns>An <see langword="array"/> of items. Empty <see langword="array"/> if no items found under <paramref name="priority"/> condition.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Peek">
            <summary>
            Returns top item from the priority queue but not removes it from the queue.
            </summary>
            <returns>Top item from queue if applicable.</returns>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the queue,
            </summary>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
            <remarks>
            <para>
            <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/> is set to zero, and references to other objects 
            from elements of the queue are also released.
            </para>
            <para>
            The capacity remains unchanged. To reset the capacity of the queue,
            call <see cref="M:Xtensive.Collections.IPriorityQueue`2.TrimExcess"/>. Trimming an empty queue sets the capacity 
            of the queue to the default capacity.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Contains(`0)">
            <summary>
            Determines whether an element is in the queue. 
            </summary>
            <param name="item">
            The element to locate in the queue. The value can be a 
            <see langword="null"/> for reference types.
            </param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the 
            queue; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>
            This method determines equality using the default equality comparer 
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for <typeparamref name="T"/>,
            the type of values in the queue.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation,
            where n is <see cref="P:Xtensive.Collections.IPriorityQueue`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Collections.IPriorityQueue`2.Remove(`0)">
            <summary>
            Removes an element from the queue
            </summary>
            <param name="item">The element to remove from the queue</param>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Count">
            <summary>
            Gets number of elements.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Direction">
            <summary>
            Gets direction of items stored in the queue
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Capacity">
            <summary>
            Gets or sets the size of an internal array.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.IPriorityQueue`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index"/> 
            is less than zero or is equal to \ greater than <see langword="Count"/>.</exception>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueueItemComparer`2.Compare(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:Xtensive.Collections.PriorityQueue`2">
            <summary>
            Priority queue.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of objects to be stored in queue.</typeparam>
            <typeparam name="TPriority"><see cref="T:System.Type"/> of priority value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.DequeueRange(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
            <param name="initialCapacity">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Capacity"/> property value.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(Xtensive.Core.Direction,System.Int32,System.Single)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Direction"/> property value.</param>
            <param name="initialCapacity">Initial <see cref="P:Xtensive.Collections.PriorityQueue`2.Capacity"/> property value.</param>
            <param name="growFactor">Capacity grow factor.</param>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="M:Xtensive.Collections.PriorityQueue`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true"/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Direction">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.PriorityQueue`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.CollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts <paramref name="source"/> collection to an array.
            </summary>
            <typeparam name="TItem">The type of collection items.</typeparam>
            <param name="source">Collection to convert.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ToArray``2(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts <paramref name="source"/> collection to an array with type case.
            </summary>
            <typeparam name="TItem">The type of collection items.</typeparam>
            <typeparam name="TNewItem">The type of array (result) items.</typeparam>
            <param name="source">Collection to convert.</param>
            <returns>An array containing all the items from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.Copy``1(System.Collections.Generic.ICollection{``0},``0[],System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small.</exception>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.Copy``1(System.Collections.Generic.ICollection{``0},System.Array,System.Int32)">
            <summary>
            Copies the items from <paramref name="source"/> collection
            to <paramref name="target"/> array starting from specified
            <paramref name="targetIndex"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="source">Source collection to copy from.</param>
            <param name="target">Target array to copy to.</param>
            <param name="targetIndex">Index in <paramref name="target"/> array to start from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>targetIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Destination array is too small or multidimensional.</exception>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsNone``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            none of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
              <see langword="True"/> if the specified <paramref name="collection"/> none 
              of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            all of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="collection"/> all
            of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified <paramref name="collection"/> contains 
            any of items in specified set of <paramref name="items"/>.
            </summary>
            <typeparam name="TItem">The type of item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to check for containment.</param>
            <returns>
            <see langword="True"/> if the specified <paramref name="collection"/> any 
             of items in specified set of <paramref name="items"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value from the dictionary by its key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>Found value.
            <see langword="default(T)" />, if there is no value corresponding to specified key.</returns>
        </member>
        <member name="T:Xtensive.Core.Direction">
            <summary>
            Possible directions of iteration through the enumerable.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Default">
            <summary>
            Default direction (none).
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.None">
            <summary>
            No direction.
            Implies that either comparison for it can't be performed, or shouldn't be done.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Positive">
            <summary>
            Forward direction (acsending order).
            </summary>
        </member>
        <member name="F:Xtensive.Core.Direction.Negative">
            <summary>
            Backward direction (descending order).
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.DelegateHelper">
            <summary>
            Delegate helper \ extension methods. 
            Simplifies various delegate creation.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedPrivateFieldGetterPrefix">
            <summary>
            Aspected private field getter prefix.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedPrivateFieldSetterPrefix">
            <summary>
            Aspected private field setter prefix.
            </summary>
        </member>
        <member name="F:Xtensive.Reflection.DelegateHelper.AspectedFactoryMethodName">
            <summary>
            Aspected factory method name.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateGetMemberDelegate``2(System.String)">
            <summary>
            Creates get member delegate.
            </summary>
            <typeparam name="TObject">Declaring type.</typeparam>
            <typeparam name="TValue">Member type.</typeparam>
            <param name="memberName">Member name.</param>
            <returns><see cref="T:System.Func`2"/> delegate 
            that gets member value.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateGetMemberConverterDelegate``2(System.String)">
            <summary>
            Creates property \ member getter delegate.
            </summary>
            <typeparam name="TObject">Declaring type.</typeparam>
            <typeparam name="TValue">Member type.</typeparam>
            <param name="memberName">Member name.</param>
            <returns><see cref="T:System.Func`2"/> delegate 
            that gets member value.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateSetMemberDelegate``2(System.String)">
            <summary>
            Creates property \ member setter delegate.
            </summary>
            <typeparam name="TObject">Declaring type.</typeparam>
            <typeparam name="TValue">Member type.</typeparam>
            <param name="memberName">Member name.</param>
            <returns><see cref="T:System.Action`2"/> delegate 
            that sets member value.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreatePrimitiveCastDelegate``2">
            <summary>
            Creates primitive type cast delegate - e.g. <see cref="T:System.Enum"/> to <see cref="T:System.SByte"/>.
            </summary>
            <typeparam name="TSource">The type to cast.</typeparam>
            <typeparam name="TTarget">Target type.</typeparam>
            <returns>A delegate allowing to cast <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.</returns>
            <exception cref="T:System.InvalidCastException"><c>InvalidCastException</c>.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateDelegate``1(System.Object,System.Type,System.String,System.Type[])">
            <summary>
            Creates (generic) method invocation delegate with specified generic argument types.
            </summary>
            <param name="callTarget">The delegate call target. <see langword="Null"/>, if static method should be called.</param>
            <param name="type">Type, which method should be called by delegate.</param>
            <param name="methodName">The name of the method to call by delegate.</param>
            <param name="genericArgumentTypes">Generic method arguments.</param>
            <returns>New delegate allowing to call specified generic method on <paramref name="callTarget"/>.</returns>
            <typeparam name="TDelegate">Type of delegate to create.</typeparam>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateDelegates``1(System.Object,System.Type,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an array of generic method invocation delegates matching the method instance 
            with specified generic argument variants.
            </summary>
            <param name="callTarget">The delegate call target. <see langword="Null"/>, if static method should be called.</param>
            <param name="type">Type, which method should be called by delegate.</param>
            <param name="methodName">The name of the method to call by delegate.</param>
            <param name="genericArgumentVariants">Generic method argument variants.</param>
            <returns>An array of delegate allowing to call specified generic method instances on <paramref name="callTarget"/>.</returns>
            <typeparam name="TDelegate">Type of delegate to create.</typeparam>
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.ExecuteDelegates``1(Xtensive.Reflection.ExecutionSequenceHandler{``0}[],``0@,Xtensive.Core.Direction)">
            <summary>
            Executes sequence of <see cref="T:Xtensive.Reflection.ExecutionSequenceHandler`1"/>s.
            Stops when the executed delegate returns <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of argument to pass to each delegate.</typeparam>
            <param name="delegates">Delegates to execute.</param>
            <param name="argument">Argument to pass to each delegate.</param>
            <param name="direction">Direction of execution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid <paramref name="direction"/> value.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateConstructorDelegate``1(System.Type)">
            <summary>
            Creates constructor invocation delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
            <param name="type">The type to create the constructor invocation delegate for.</param>
            <returns>Constructor invocation delegate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is an abstract type.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.CreateProtectedConstructorDelegate``1(System.Type)">
            <summary>
            Creates protected constructor invocation delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
            <param name="type">The type to create the protected constructor invocation delegate for.</param>
            <returns>Protected constructor invocation delegate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is an abstract type.</exception>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.MakeDelegateType(System.Type,System.Type[])">
            <summary>
            Creates a delegate type that represents a delegate that calls a method with specified signature.
            </summary>
            <param name="returnType">Type of return value.</param>
            <param name="parameterTypes">Types of parameters.</param>
            <returns>Created delegate type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.MakeDelegateType(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a delegate type that represents a delegate that calls a method with specified signature.
            </summary>
            <param name="returnType">Type of return value.</param>
            <param name="parameterTypes">Types of parameters.</param>
            <returns>Created delegate type.</returns>
        </member>
        <member name="M:Xtensive.Reflection.DelegateHelper.GetDelegateSignature(System.Type)">
            <summary>
            Gets signature of a delegate of a <paramref name="delegateType"/>.
            </summary>
            <param name="delegateType">Type of the delegate.</param>
            <returns>A pair that contains return type as first element and parameter types as second arguments.</returns>
        </member>
        <member name="T:Xtensive.Core.IContextBound`1">
            <summary>
            Interface for all objects that are bound to some <see cref="P:Xtensive.Core.IContextBound`1.Context"/>
            instance.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="P:Xtensive.Core.IContextBound`1.Context">
            <summary>
            Gets <see cref="P:Xtensive.Core.IContextBound`1.Context"/> to which current instance is bound.
            </summary>
        </member>
        <member name="T:Xtensive.Reflection.AssemblyHelper">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> related helper \ extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Reflection.AssemblyHelper.FindDependentAssemblies(System.Reflection.Assembly)">
            <summary>
            Finds all dependent assemblies in current <see cref="T:System.AppDomain"/>.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of all dependent assemblies.</returns>
        </member>
        <member name="M:Xtensive.Reflection.AssemblyHelper.FindTypes(System.Reflection.Assembly,System.Type,System.Reflection.TypeFilter)">
            <summary>
            Finds the types that are subclasses of the specified type and are located within the specified assembly.
            The <paramref name="filter"/> is optional additional parameter.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="baseType">The base type.</param>
            <param name="filter">The filter.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of all found types.</returns>
            <exception cref="T:System.InvalidOperationException">Something went wrong :(</exception>
        </member>
        <member name="M:Xtensive.Reflection.AssemblyHelper.LoadExtensionAssembly(System.String)">
            <summary>
            Loads the extension assembly.
            This method replaces a short name of a calling assembly.
            with a <paramref name="extensionAssemblyName"/>,
            then loads assembly with such name.
            </summary>
            <param name="extensionAssemblyName">Name of the extension assembly.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyList`1">
            <summary>
            Read-only list (<see cref="T:System.Collections.IList"/>) wrapper.
            </summary>
        </member>
        <member name="F:Xtensive.Collections.ReadOnlyList`1.Empty">
            <summary>
            Empty <see cref="T:Xtensive.Collections.ReadOnlyList`1"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Add(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Remove(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="list">The list to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="list"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by "set" accessor (setter).</exception>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Converter{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="innerEnumerator">The inner enumerator.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerator`2.Dispose">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Conversion.ConvertingEnumerable`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementor performing
            conversion from <typeparamref name="TFrom"/> to
            <typeparamref name="TTo"/> on the fly.
            </summary>
            <typeparam name="TFrom">The item type to convert from.</typeparam>
            <typeparam name="TTo">The item type to convert to.</typeparam>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Conversion.ConvertingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="innerEnumerable">Enumerable to wrap.</param>
            <param name="converter">Item converter to use.</param>
        </member>
        <member name="T:Xtensive.Collections.TopDeque`2">
            <summary>
            Default <see cref="T:Xtensive.Collections.ITopDeque`2"/> implementation.
            </summary>
            <typeparam name="K">Type of the key.</typeparam>
            <typeparam name="V">Type of the value.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryGetValue(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.TryChangeValue(`0,`1,System.Boolean,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.PopTop">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.PopBottom">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.MoveToTop(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.MoveToBottom(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.AddToTop(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">The key is already added.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.AddToBottom(`0,`1)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">The key is already added.</exception>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="keyComparer">The key comparer.</param>
        </member>
        <member name="M:Xtensive.Collections.TopDeque`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="keyComparer">The key comparer.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Item(`0)">
            <inheritdoc/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no specified key.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Top">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.Bottom">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.TopKey">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="P:Xtensive.Collections.TopDeque`2.BottomKey">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Collection is empty.</exception>
        </member>
        <member name="T:Xtensive.Collections.ReadOnlyCollection`1">
            <summary>
            Read-only collection (<see cref="T:System.Collections.Generic.ICollection`1"/>) wrapper.
            </summary>
            <typeparam name="T">The type of collection items.</typeparam>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.IsWrapperOf(System.Collections.Generic.ICollection{`0})">
            <summary>
            Indicates whether this collection is a read-only wrapper 
            of specified <paramref name="collection"/>.
            </summary>
            <param name="collection">Collection to check.</param>
            <returns><see langword="True"/> if this collection is wrapper of
            specified collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.Clear">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0},System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="collection">The collection to copy or wrap.</param>
            <param name="copy">Indicates whether <paramref name="collection"/> must be copied or wrapped.</param> 
        </member>
        <member name="M:Xtensive.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="collection">The collection to wrap.</param>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Always returns <see langword="true"/>.
            </summary>
            <returns><see langword="True"/>.</returns>
        </member>
        <member name="T:Xtensive.Diagnostics.HighResolutionTime">
            <summary>
            A timer providing much higher resolution rather then default one.
            </summary>
        </member>
        <member name="P:Xtensive.Diagnostics.HighResolutionTime.Now">
            <summary>
            Gets current date and time (like <see cref="P:System.DateTime.Now">DateTime.Now</see>),
            but with the higher precision.
            </summary>
        </member>
        <member name="T:Xtensive.Diagnostics.Measurement">
            <summary>
            Time and memory measurement helper.
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="operationCount">The operation count.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The measurement name.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(System.String,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The measurement  name.</param>
            <param name="operationCount">The operation count.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(Xtensive.Diagnostics.MeasurementOptions)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="options">The measurement options.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(Xtensive.Diagnostics.MeasurementOptions,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="options">The measurement options.</param>
            <param name="operationCount">The operation count.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(System.String,Xtensive.Diagnostics.MeasurementOptions)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The measurement name.</param>
            <param name="options">The measurement options.</param>
        </member>
        <member name="M:Xtensive.Diagnostics.Measurement.#ctor(System.String,Xtensive.Diagnostics.MeasurementOptions,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The measurement name.</param>
            <param name="options">The measurement options.</param>
            <param name="operationCount">The operation count.</param>
        </member>
        <member name="T:Xtensive.Core.InstanceIsLockedException">
            <summary>
            Thrown by <see cref="T:Xtensive.Core.ILockable"/> implementors on attempts 
            to change instance properties in the locked state.
            </summary>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="text">Text of message.</param>
        </member>
        <member name="M:Xtensive.Core.InstanceIsLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> object.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> object.</param>
        </member>
        <member name="T:Xtensive.Core.Triplet`3">
            <summary>
            Container of three values.
            </summary>
            <typeparam name="TFirst"><see cref="T:System.Type"/> of the first value.</typeparam>
            <typeparam name="TSecond"><see cref="T:System.Type"/> of the second value.</typeparam>
            <typeparam name="TThird"><see cref="T:System.Type"/> of the third value.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.First">
            <summary>
            First value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.Second">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Triplet`3.Third">
            <summary>
            Third value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.Equals(Xtensive.Core.Triplet{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.CompareTo(Xtensive.Core.Triplet{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.op_Equality(Xtensive.Core.Triplet{`0,`1,`2},Xtensive.Core.Triplet{`0,`1,`2})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.op_Inequality(Xtensive.Core.Triplet{`0,`1,`2},Xtensive.Core.Triplet{`0,`1,`2})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Triplet`3.#ctor(`0,`1,`2)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">A first value in triplet.</param>
            <param name="second">A second value in triplet.</param>
            <param name="third">A third value in triplet.</param>
        </member>
        <member name="T:Xtensive.Tuples.DifferentialTuple">
            <summary>
            Differential tuple. Combines read-only <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> tuple
            with <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> tuple providing all the 
            changes made to <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Tuple">
            <summary>
            A base class for auto generated tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITuple">
            <summary>
            Describes a tuple.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITupleFactory">
            <summary>
            <see cref="T:Xtensive.Tuples.Tuple"/> factory contract.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ITupleFactory.CreateNew">
            <summary>
            Creates new instance of the tuple of the same type.
            </summary>
            <returns>A new instance of the tuple of the same type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.Clone">
            <summary>
            Clones the tuple.
            </summary>
            <returns>A new instance of the tuple of the same type
            and with the same field values.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetFieldState(System.Int32)">
            <summary>
            Gets the field state associated with the field.
            </summary>
            <param name="fieldIndex">Index of the field to get the state for.</param>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValue(System.Int32)">
            <summary>
            Gets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the field value by its index, if it is available;
            otherwise returns default value for field type.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.GetValueOrDefault(System.Int32)">
            <summary>
            Gets the value field value by its index, if it is available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>) and is not null (see <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/>);
            otherwise returns <see langword="null"/>.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value, if it is available and not null; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.ITuple.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to set value of.</param>
            <param name="fieldValue">Field value.</param>
            <exception cref="T:System.InvalidCastException">Type of stored value is incompatible
            with the specified one.</exception>
        </member>
        <member name="P:Xtensive.Tuples.ITuple.Descriptor">
            <summary>
            Gets tuple descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITuple.Count">
            <summary>
            Gets field count for this instance.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Tuple.HashCodeMultiplier">
            <summary>
            Per-field hash code multiplier used in <see cref="M:Xtensive.Tuples.Tuple.GetHashCode"/> calculation.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Xtensive#Tuples#ITupleFactory#CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Xtensive#Tuples#ITuple#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.CreateNew">
            <see cref="M:Xtensive.Tuples.ITupleFactory.CreateNew" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Clone">
            <see cref="M:Xtensive.Tuples.ITuple.Clone" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetFieldState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValueOrDefault(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value field value by its index, if it is available;
            otherwise returns <see langword="default(T)"/>.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, <see langword="default(T)"/>.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32)">
            <summary>
            Gets the value field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
            <exception cref="T:System.InvalidCastException">Value is available, but it can't be cast
            to specified type. E.g. if value is <see langword="null"/>, field is struct, 
            but <typeparamref name="T"/> is not a <see cref="T:System.Nullable`1"/> type.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetValueOrDefault``1(System.Int32)">
            <summary>
            Gets the value field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to get value of.</param>
            <returns>Field value.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
            <remarks>
            If field value is not available (see <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>),
            an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidCastException">Value is available, but it can't be cast
            to specified type. E.g. if value is <see langword="null"/>, field is struct, 
            but <typeparamref name="T"/> is not a <see cref="T:System.Nullable`1"/> type.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.SetValue``1(System.Int32,``0)">
            <summary>
            Sets the field value by its index.
            </summary>
            <param name="fieldIndex">Index of the field to set value of.</param>
            <param name="fieldValue">Field value.</param>
            <typeparam name="T">The type of value to set.</typeparam>
            <exception cref="T:System.InvalidCastException">Type of stored value and <typeparamref name="T"/>
            are incompatible.</exception>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetMappedContainer(System.Int32,System.Boolean)">
            <summary>
            Gets the tuple containing actual value of the specified field.
            </summary>
            <param name="fieldIndex">Index of the field to get the value container for.</param>
            <returns>Tuple container and remapped field index.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.CompareTo(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.CompareTo(Xtensive.Tuples.ITuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Equals(Xtensive.Tuples.ITuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create(System.Type[])">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field types.
            </summary>
            <param name="fieldTypes">Array of field types.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create(Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its descriptor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``1(``0)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <param name="value">Value of the only tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``1(Xtensive.Tuples.TupleDescriptor,``0)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value">Value of the only tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``2(``0,``1)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``2(Xtensive.Tuples.TupleDescriptor,``0,``1)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``3(Xtensive.Tuples.TupleDescriptor,``0,``1,``2)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``4(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``5(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3,``4)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <param name="value6">Value of the 6th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Create``6(Xtensive.Tuples.TupleDescriptor,``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.Tuple"/> by its field value(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <param name="descriptor">Tuple descriptor.</param>
            <param name="value1">Value of the first tuple field.</param>
            <param name="value2">Value of the 2nd tuple field.</param>
            <param name="value3">Value of the 3rd tuple field.</param>
            <param name="value4">Value of the 4th tuple field.</param>
            <param name="value5">Value of the 5th tuple field.</param>
            <param name="value6">Value of the 6th tuple field.</param>
            <returns>Newly created <see cref="T:Xtensive.Tuples.RegularTuple"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.Parse(Xtensive.Tuples.TupleDescriptor,System.String)">
            <see cref="M:Xtensive.Tuples.TupleFormatExtensions.Parse(Xtensive.Tuples.TupleDescriptor,System.String)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Tuple.#ctor">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Tuple.Descriptor">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.Tuple.Count">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.IsChanged(System.Int32)">
            <summary>
            Indicates whether field with specified <paramref name="fieldIndex"/> is changed.
            </summary>
            <param name="fieldIndex">Index of the field to check.</param>
            <returns><see langword="True"/> if specified field is changed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Merge">
            <summary>
            Merges the <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> with the <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetMappedContainer(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.Reset">
            <summary>
            Resets all the changes in <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> by re-creating it.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="origin">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.DifferentialTuple.#ctor(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="origin">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Origin"/> property value.</param>
            <param name="difference">Initial <see cref="P:Xtensive.Tuples.DifferentialTuple.Difference"/> property value.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptors mismatch.</exception>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Count">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Origin">
            <summary>
            Gets original tuple.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.DifferentialTuple.Difference">
            <summary>
            Gets or sets difference tuple.
            Can be <see langword="null" /> (acts as if no values are available in this tuple).
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.FastReadOnlyTuple">
            <summary>
            Fast read-only <see cref="T:Xtensive.Tuples.Tuple"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
            <summary>
            <inherited/>
            Always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.FastReadOnlyTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="source">The tuple to create the fast read-only tuple from.</param>
        </member>
        <member name="P:Xtensive.Tuples.FastReadOnlyTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.GetValueDelegate`1">
            <summary>
            Incapsulates <see cref="M:Xtensive.Tuples.Tuple.GetValue``1(System.Int32,Xtensive.Tuples.TupleFieldState@)"/> method.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Internals.EmptyTuple">
            <summary>
            Describes empty tuple.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.RegularTuple">
            <summary>
            Base class for any regular tuple.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.GetGetValueDelegate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.GetGetNullableValueDelegate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.GetSetValueDelegate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.GetSetNullableValueDelegate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.RegularTuple.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="descriptor">The tuple descriptor.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.EmptyTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.EmptyTuple.Instance">
            <summary>
            Provides the only instance of this class.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Internals.EmptyTuple.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.MaxGeneratedTupleLength">
            <summary>
            Provides access to maximal generated tuple length value.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.MaxGeneratedTupleLength.Value">
            <summary>
            Defines maximal generated tuple length value.
            The value is <see langword="32" />.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`1">
            <summary>
            Describes tuple of length 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`1.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`1.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`1.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`1.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`2">
            <summary>
            Describes tuple of length 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`2.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`2.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`2.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`2.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`2.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`3">
            <summary>
            Describes tuple of length 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`3.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`3.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`3.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`3.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`3.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`3.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`4">
            <summary>
            Describes tuple of length 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`4.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`4.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`4.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`4.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`4.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`4.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`4.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`5">
            <summary>
            Describes tuple of length 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`5.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`5.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`5.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`6">
            <summary>
            Describes tuple of length 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`6.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`6.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`6.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`7">
            <summary>
            Describes tuple of length 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`7.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`7.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`7.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`8">
            <summary>
            Describes tuple of length 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`8.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`8.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`8.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`9">
            <summary>
            Describes tuple of length 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`9.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`9.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`9.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`10">
            <summary>
            Describes tuple of length 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`10.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`10.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`10.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`11">
            <summary>
            Describes tuple of length 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`11.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`11.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`11.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`12">
            <summary>
            Describes tuple of length 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`12.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`12.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`12.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`13">
            <summary>
            Describes tuple of length 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`13.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`13.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`13.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`14">
            <summary>
            Describes tuple of length 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`14.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`14.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`14.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`15">
            <summary>
            Describes tuple of length 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`15.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`15.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`15.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`16">
            <summary>
            Describes tuple of length 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`16.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`16.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`16.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`17">
            <summary>
            Describes tuple of length 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`17.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`17.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`17.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`18">
            <summary>
            Describes tuple of length 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`18.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`18.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`18.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`19">
            <summary>
            Describes tuple of length 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`19.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`19.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`19.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`20">
            <summary>
            Describes tuple of length 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`20.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`20.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`20.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`21">
            <summary>
            Describes tuple of length 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`21.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`21.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`21.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`22">
            <summary>
            Describes tuple of length 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`22.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`22.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`22.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`23">
            <summary>
            Describes tuple of length 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`23.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`23.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`23.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`24">
            <summary>
            Describes tuple of length 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`24.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`24.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`24.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`25">
            <summary>
            Describes tuple of length 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`25.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`25.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`25.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`26">
            <summary>
            Describes tuple of length 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`26.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`26.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`26.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`27">
            <summary>
            Describes tuple of length 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`27.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`27.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`27.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`28">
            <summary>
            Describes tuple of length 28.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Value27">
            <summary>
            Value number 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`28.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetValue27(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 27.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.SetValue27(Xtensive.Tuples.Tuple,`27)">
            <summary>
            Sets the value of field 27.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`28.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`28.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`29">
            <summary>
            Describes tuple of length 29.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value27">
            <summary>
            Value number 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Value28">
            <summary>
            Value number 28.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`29.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue27(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 27.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetValue28(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 28.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue27(Xtensive.Tuples.Tuple,`27)">
            <summary>
            Sets the value of field 27.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.SetValue28(Xtensive.Tuples.Tuple,`28)">
            <summary>
            Sets the value of field 28.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`29.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`29.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`30">
            <summary>
            Describes tuple of length 30.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value27">
            <summary>
            Value number 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value28">
            <summary>
            Value number 28.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Value29">
            <summary>
            Value number 29.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`30.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue27(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 27.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue28(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 28.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetValue29(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 29.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue27(Xtensive.Tuples.Tuple,`27)">
            <summary>
            Sets the value of field 27.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue28(Xtensive.Tuples.Tuple,`28)">
            <summary>
            Sets the value of field 28.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.SetValue29(Xtensive.Tuples.Tuple,`29)">
            <summary>
            Sets the value of field 29.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`30.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`30.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`31">
            <summary>
            Describes tuple of length 31.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value27">
            <summary>
            Value number 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value28">
            <summary>
            Value number 28.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value29">
            <summary>
            Value number 29.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Value30">
            <summary>
            Value number 30.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`31.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue27(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 27.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue28(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 28.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue29(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 29.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetValue30(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 30.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue27(Xtensive.Tuples.Tuple,`27)">
            <summary>
            Sets the value of field 27.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue28(Xtensive.Tuples.Tuple,`28)">
            <summary>
            Sets the value of field 28.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue29(Xtensive.Tuples.Tuple,`29)">
            <summary>
            Sets the value of field 29.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.SetValue30(Xtensive.Tuples.Tuple,`30)">
            <summary>
            Sets the value of field 30.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`31.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`31.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.Tuple`32">
            <summary>
            Describes tuple of length 32.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value0">
            <summary>
            Value number 0.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value1">
            <summary>
            Value number 1.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value2">
            <summary>
            Value number 2.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value3">
            <summary>
            Value number 3.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value4">
            <summary>
            Value number 4.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value5">
            <summary>
            Value number 5.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value6">
            <summary>
            Value number 6.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value7">
            <summary>
            Value number 7.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value8">
            <summary>
            Value number 8.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value9">
            <summary>
            Value number 9.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value10">
            <summary>
            Value number 10.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value11">
            <summary>
            Value number 11.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value12">
            <summary>
            Value number 12.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value13">
            <summary>
            Value number 13.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value14">
            <summary>
            Value number 14.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value15">
            <summary>
            Value number 15.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value16">
            <summary>
            Value number 16.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value17">
            <summary>
            Value number 17.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value18">
            <summary>
            Value number 18.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value19">
            <summary>
            Value number 19.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value20">
            <summary>
            Value number 20.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value21">
            <summary>
            Value number 21.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value22">
            <summary>
            Value number 22.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value23">
            <summary>
            Value number 23.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value24">
            <summary>
            Value number 24.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value25">
            <summary>
            Value number 25.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value26">
            <summary>
            Value number 26.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value27">
            <summary>
            Value number 27.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value28">
            <summary>
            Value number 28.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value29">
            <summary>
            Value number 29.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value30">
            <summary>
            Value number 30.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Value31">
            <summary>
            Value number 31.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.Tuple`32.Flags">
            <summary>
            Nullability and availability map..
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue0(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 0.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue1(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 1.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue2(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 2.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue3(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 3.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue4(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 4.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue5(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 5.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue6(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 6.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue7(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 7.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue8(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 8.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue9(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 9.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue10(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 10.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue11(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 11.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue12(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 12.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue13(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 13.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue14(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 14.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue15(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 15.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue16(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 16.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue17(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 17.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue18(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 18.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue19(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 19.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue20(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 20.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue21(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 21.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue22(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 22.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue23(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 23.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue24(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 24.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue25(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 25.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue26(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 26.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue27(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 27.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue28(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 28.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue29(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 29.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue30(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 30.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetValue31(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState@)">
            <summary>
            Gets the value and state of field 31.
            </summary>
            <param name="tuple">The tuple to get field value and state for.</param>
            <param name="fieldState">Field state associated with the field.</param>
            <returns>Field value, if it is available; otherwise, default value for field type.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue0(Xtensive.Tuples.Tuple,`0)">
            <summary>
            Sets the value of field 0.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue1(Xtensive.Tuples.Tuple,`1)">
            <summary>
            Sets the value of field 1.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue2(Xtensive.Tuples.Tuple,`2)">
            <summary>
            Sets the value of field 2.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue3(Xtensive.Tuples.Tuple,`3)">
            <summary>
            Sets the value of field 3.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue4(Xtensive.Tuples.Tuple,`4)">
            <summary>
            Sets the value of field 4.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue5(Xtensive.Tuples.Tuple,`5)">
            <summary>
            Sets the value of field 5.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue6(Xtensive.Tuples.Tuple,`6)">
            <summary>
            Sets the value of field 6.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue7(Xtensive.Tuples.Tuple,`7)">
            <summary>
            Sets the value of field 7.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue8(Xtensive.Tuples.Tuple,`8)">
            <summary>
            Sets the value of field 8.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue9(Xtensive.Tuples.Tuple,`9)">
            <summary>
            Sets the value of field 9.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue10(Xtensive.Tuples.Tuple,`10)">
            <summary>
            Sets the value of field 10.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue11(Xtensive.Tuples.Tuple,`11)">
            <summary>
            Sets the value of field 11.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue12(Xtensive.Tuples.Tuple,`12)">
            <summary>
            Sets the value of field 12.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue13(Xtensive.Tuples.Tuple,`13)">
            <summary>
            Sets the value of field 13.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue14(Xtensive.Tuples.Tuple,`14)">
            <summary>
            Sets the value of field 14.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue15(Xtensive.Tuples.Tuple,`15)">
            <summary>
            Sets the value of field 15.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue16(Xtensive.Tuples.Tuple,`16)">
            <summary>
            Sets the value of field 16.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue17(Xtensive.Tuples.Tuple,`17)">
            <summary>
            Sets the value of field 17.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue18(Xtensive.Tuples.Tuple,`18)">
            <summary>
            Sets the value of field 18.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue19(Xtensive.Tuples.Tuple,`19)">
            <summary>
            Sets the value of field 19.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue20(Xtensive.Tuples.Tuple,`20)">
            <summary>
            Sets the value of field 20.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue21(Xtensive.Tuples.Tuple,`21)">
            <summary>
            Sets the value of field 21.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue22(Xtensive.Tuples.Tuple,`22)">
            <summary>
            Sets the value of field 22.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue23(Xtensive.Tuples.Tuple,`23)">
            <summary>
            Sets the value of field 23.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue24(Xtensive.Tuples.Tuple,`24)">
            <summary>
            Sets the value of field 24.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue25(Xtensive.Tuples.Tuple,`25)">
            <summary>
            Sets the value of field 25.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue26(Xtensive.Tuples.Tuple,`26)">
            <summary>
            Sets the value of field 26.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue27(Xtensive.Tuples.Tuple,`27)">
            <summary>
            Sets the value of field 27.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue28(Xtensive.Tuples.Tuple,`28)">
            <summary>
            Sets the value of field 28.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue29(Xtensive.Tuples.Tuple,`29)">
            <summary>
            Sets the value of field 29.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue30(Xtensive.Tuples.Tuple,`30)">
            <summary>
            Sets the value of field 30.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.SetValue31(Xtensive.Tuples.Tuple,`31)">
            <summary>
            Sets the value of field 31.
            </summary>
            <param name="tuple">The tuple to set field value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.Tuple`32.#ctor(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.Tuple`32.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Internals.JoinedTuple">
            <summary>
            Used to describe tuples, which length is longer then
            <see cref="F:Xtensive.Tuples.Internals.MaxGeneratedTupleLength.Value"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.JoinedTuple.FirstCount">
            <summary>
            Always equals to <see cref="F:Xtensive.Tuples.Internals.MaxGeneratedTupleLength.Value"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.JoinedTuple.First">
            <summary>
            The first tuple.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Internals.JoinedTuple.Second">
            <summary>
            The second tuple.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.SetFieldState(System.Int32,Xtensive.Tuples.TupleFieldState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Internals.JoinedTuple.#ctor(Xtensive.Tuples.TupleDescriptor,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="first">The first tuple.</param>
            <param name="second">The second tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.Internals.JoinedTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.JoinedTuple.Count">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.TupleUpdater">
            <summary>
             Helper type allowing to update tuples using functional style syntax.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleUpdater.SetValue(System.Int32,System.Object)">
            <summary>
            Updates the field of <see cref="P:Xtensive.Tuples.TupleUpdater.Tuple"/> with the specified index.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <param name="value">The new field value</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleUpdater.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="tuple">The tuple to wrap.</param>
        </member>
        <member name="P:Xtensive.Tuples.TupleUpdater.Tuple">
            <summary>
            Gets the wrapped tuple.
            </summary>
            <value>The tuple.</value>
        </member>
        <member name="T:Xtensive.Tuples.ReferencedTuple">
            <summary>
            Tuple that references another tuple by getter delegate.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.ReferencedTuple.#ctor(System.Func{Xtensive.Tuples.Tuple})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="tupleGetter">The delegate to get inner tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.ReferencedTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.TupleFieldStateExtensions">
            <summary>
            Extension methods for <see cref="T:Xtensive.Tuples.TupleFieldState"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsAvailable(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsNull(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Field value is not available.</exception>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.IsAvailableAndNull(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has both <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> and <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flags.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value has both <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> and <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flags; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFieldStateExtensions.HasValue(Xtensive.Tuples.TupleFieldState)">
            <summary>
            Checks if specified field state has <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/> flag and has no <see cref="F:Xtensive.Tuples.TupleFieldState.Null"/> flag.
            </summary>
            <param name="fieldState"><see cref="T:Xtensive.Tuples.TupleFieldState"/> to check.</param>
            <returns><see langword="true"/> if field state value is equal to <see cref="F:Xtensive.Tuples.TupleFieldState.Available"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Xtensive.Tuples.TupleFormatExtensions">
            <summary>
            Extension methods for <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.ToString(Xtensive.Tuples.Tuple,System.Boolean)">
            <summary>
            Converts the <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> to 
            its string representation.
            </summary>
            <param name="source">The tuple to convert.</param>
            <param name="format">Indicates whether to use <see cref="M:Xtensive.Tuples.TupleFormatExtensions.Format(Xtensive.Tuples.Tuple)"/>,
            or <see cref="M:Xtensive.Tuples.Tuple.ToString"/> method.</param>
            <returns>String representation of <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.Format(Xtensive.Tuples.Tuple)">
            <summary>
            Returns string representation of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:Xtensive.Tuples.Tuple"/> to format.</param>
            <returns>
            String representation of the specified <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleFormatExtensions.Parse(Xtensive.Tuples.TupleDescriptor,System.String)">
            <summary>
            Returns a <see cref="T:Xtensive.Tuples.Tuple"/> with specified <paramref name="descriptor"/>
            parsed from the <paramref name="source"/> string.
            </summary>
            <param name="descriptor">The descriptor of <see cref="T:Xtensive.Tuples.Tuple"/> to parse.</param>
            <param name="source">The string to parse.</param>
            <returns>A <see cref="T:Xtensive.Tuples.Tuple"/> parsed from the <paramref name="source"/> string.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> string 
            can't be parsed to a <see cref="T:Xtensive.Tuples.Tuple"/> with specified <paramref name="descriptor"/>.</exception>
        </member>
        <member name="T:Xtensive.Tuples.MergeBehavior">
            <summary>
            Possible tuple merge behaviors.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.Default">
            <summary>
            The same as <see cref="F:Xtensive.Tuples.MergeBehavior.PreferOrigin"/>
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.PreferOrigin">
            <summary>
            Origin values are preferrable.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.MergeBehavior.PreferDifference">
            <summary>
            Difference values are preferrable.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Internals.EmptyTupleDescriptor">
            <summary>
            Empty tuple descriptor.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.TupleDescriptor">
            <summary>
            Tuple descriptor.
            Provides information about <see cref="T:Xtensive.Tuples.Tuple"/> structure.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IIdentified`1">
            <summary>
            Describes an object having <see cref="P:Xtensive.Core.IIdentified`1.Identifier"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IIdentified`1.Identifier">
            <summary>
            Gets object identifier.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetCommonPartLength(Xtensive.Tuples.TupleDescriptor)">
            <summary>
            Gets the length of the common part.
            </summary>
            <param name="other">The other descriptor.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.IsValueType(System.Int32)">
            <summary>
            Determines whether the specified field is a value type field.
            </summary>
            <param name="fieldIndex">Index of the field to check.</param>
            <returns>
            <see langword="true"/> if specified field is a value type field; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.EnsureIsInitialized">
            <summary>
            Ensures the descriptor is compiled.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Equals(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.CompareTo(Xtensive.Tuples.TupleDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Type[])">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">List of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">List of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates or returns already created descriptor
            for provided set of types.
            </summary>
            <param name="fieldTypes">Enumerable of tuple field types.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Head(System.Int32)">
            <summary>
            Creates tuple descriptor containing head of the current one.
            </summary>
            <param name="headFieldCount">Head field count.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Tail(System.Int32)">
            <summary>
            Creates tuple descriptor containing tail of the current one.
            </summary>
            <param name="tailFieldCount">Tail field count.</param>
            <returns>Either new or existing tuple descriptor
            describing the specified set of fields.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``1">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T">Type of the only tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``2">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``3">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``4">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``5">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.Create``6">
            <summary>
            Creates new <see cref="T:Xtensive.Tuples.TupleDescriptor"/> by its field type(s).
            </summary>
            <typeparam name="T1">Type of the first tuple field.</typeparam>
            <typeparam name="T2">Type of the 2nd tuple field.</typeparam>
            <typeparam name="T3">Type of the 3rd tuple field.</typeparam>
            <typeparam name="T4">Type of the 4th tuple field.</typeparam>
            <typeparam name="T5">Type of the 5th tuple field.</typeparam>
            <typeparam name="T6">Type of the 6th tuple field.</typeparam>
            <returns>Newly created <see cref="T:Xtensive.Tuples.TupleDescriptor"/> object</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleDescriptor.#ctor(System.Collections.Generic.IList{System.Type})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="fieldTypes">The types of <see cref="T:Xtensive.Tuples.TupleDescriptor"/> fields.</param>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Empty">
            <summary>
            Gets the empty tuple descriptor.
            </summary>
            <value>The empty tuple descriptor.</value>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.TotalCount">
            <summary>
            Gets total count of compiled descriptors.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.IsInitialized">
            <summary>
            Indicates whether class for handling underlying 
            <see cref="T:Xtensive.Tuples.Tuple"/> is already compiled.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.TupleType">
            <summary>
            Gets the type of underlying <see cref="T:Xtensive.Tuples.Tuple"/>
            implementation. <see langword="Null"/>, if
            <see cref="P:Xtensive.Tuples.TupleDescriptor.IsInitialized"/>==<see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.TupleDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Internals.EmptyTupleDescriptor.Instance">
            <summary>
            Provides the only instance of this class.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutInTransform">
            <summary>
            Cuts in specified value to the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.MapTransform">
            <summary>
            Base class for any tuple field mapping transform.
            Maps fields of destination tuple to fields of a set of source tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TupleTransformBase">
            <summary>
            Base class for any tuple transform.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.ITupleTransform">
            <summary>
            Tuple transformation definition.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.ITupleTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="arguments">Transformation arguments.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.Descriptor">
            <summary>
            Gets <see cref="T:Xtensive.Tuples.TupleDescriptor"/> describing the tuples
            this transform may produce.
            <see langword="Null"/> means "any" (i.e. transform definition 
            is not descriptor-dependent).
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.DefaultResult">
            <summary>
            Gets the default result tuple.
            Can be used to get default values for the result tuple fields.
            Must be a read-only tuple.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.ITupleTransform.IsReadOnly">
            <summary>
            Indicates whether transform always produces read-only tuples or not.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TupleTransformBase.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TupleTransformBase.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.DefaultResult">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TupleTransformBase.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="F:Xtensive.Tuples.Transform.MapTransform.NoMapping">
            <summary>
            Means that no mapping is available for the specified field index.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple[])">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="sources">Transformation sources.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source">Transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source1">First transformation source.</param>
            <param name="source2">Second transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source1">First transformation source.</param>
            <param name="source2">Second transformation source.</param>
            <param name="source3">Third transformation source.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
            <param name="map"><see cref="P:Xtensive.Tuples.Transform.MapTransform.Map"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,System.Int32[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
            <param name="map"><see cref="P:Xtensive.Tuples.Transform.MapTransform.SingleSourceMap"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="descriptor">Initial <see cref="P:Xtensive.Tuples.Transform.TupleTransformBase.Descriptor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.MapTransform.#ctor(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.SourceCount">
            <summary>
            Gets the count of source <see cref="N:Xtensive.Tuples"/> this transform maps to the target one.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.SingleSourceMap">
            <summary>
            Gets or sets destination-to-source field map for the first source only.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.MapTransform.Map">
            <summary>
            Gets or sets destination-to-source field map.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform.#ctor(System.Boolean,System.Int32,Xtensive.Tuples.TupleDescriptor[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="index">Start index.</param>
            <param name="sources">Source tuple descriptors.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutInTransform.Index">
            <summary>
            Gets the start index at witch this transform cuts in specified value.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutInTransform.Sources">
            <summary>
            Gets tuple descriptors this transform cuts in.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutInTransform`1">
            <summary>
            Cuts in specified value to the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,`0)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutInTransform`1.#ctor(System.Boolean,System.Int32,Xtensive.Tuples.TupleDescriptor)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="index">Start index.</param>
            <param name="source1">Source tuple descriptor.</param>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CutOutTransform">
            <summary>
            Cuts out specified <see cref="P:Xtensive.Tuples.Transform.CutOutTransform.Segment"/> from the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CutOutTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Segment{System.Int32})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sourceDescriptor">Source tuple descriptor.</param>
            <param name="segment">The segment to cut out.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CutOutTransform.Segment">
            <summary>
            Gets the segment this transform cuts out.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple1">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping 1 source tuple to a single one (this).
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TransformedTuple`1">
            <summary>
            Base class for all transformed tuples.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TransformedTuple">
            <summary>
            Base class for any transformed tuples.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TransformedTuple.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Transform">
            <summary>
            Gets the transform used to produce this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Arguments">
            <summary>
            Gets a list of arguments used in <see cref="M:Xtensive.Tuples.ITupleTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])"/> method
            to produce this tuple.
            <see langword="Null"/> means arguments are unknown an this stage.
            </summary>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple.Descriptor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.TransformedTuple`1.#ctor(`0)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transform">Tuple transform.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple`1.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.TransformedTuple`1.TypedTransform">
            <summary>
            Gets or sets the transform used to produce this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transform">The transform.</param>
            <param name="source">Source tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple1.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.ReadOnlyTransform">
            <summary>
            Describes read-only tuple transformation.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Internals.DocTemplates.SingletonDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <summary>
            Typed version of <see cref="M:Xtensive.Tuples.Transform.ReadOnlyTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,System.Object[])"/>.
            </summary>
            <param name="transformType">The type of transformation to perform.</param>
            <param name="source">Transformation argument.</param>
            <returns>Transformation result - 
            either <see cref="T:Xtensive.Tuples.Transform.TransformedTuple"/> or <see cref="T:Xtensive.Tuples.Tuple"/> descendant,
            dependently on specified <paramref name="transformType"/>.</returns>
        </member>
        <member name="P:Xtensive.Tuples.Transform.ReadOnlyTransform.Instance">
            <see cref="P:Xtensive.Internals.DocTemplates.SingletonDocTemplate.Instance" copy="true"/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.ReadOnlyTransform.IsReadOnly">
            <summary>
            <inheritdoc/>
            Implementation in this class always returns <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple">
            <summary>
            A tuple wrapper for <see cref="T:Xtensive.Tuples.Transform.ReadOnlyTransform"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.WrappingTransformTupleBase">
            <summary>
            Base class for one-to-one tuple transformations.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Equals(Xtensive.Tuples.Tuple)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.WrappingTransformTupleBase.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="tuple">Tuple to provide the wrapper for.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Count">
            <inheritdoc />
        </member>
        <member name="P:Xtensive.Tuples.Transform.WrappingTransformTupleBase.Arguments">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.#ctor(Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="tuple">Tuple to provide read-only wrapper for.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.ReadOnlyTransformTuple.Arguments">
            <inheritdoc/>
            <remarks>
            This method always returns <see cref="P:Xtensive.Collections.ArrayUtils`1.EmptyArray"/> of <see cref="T:System.Object"/>s
            to block any access to the original tuple.
            </remarks>
        </member>
        <member name="T:Xtensive.Tuples.Transform.SegmentTransform">
            <summary>
            Extracts specified <see cref="P:Xtensive.Tuples.Transform.SegmentTransform.Segment"/> from the <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.SegmentTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor,Xtensive.Core.Segment{System.Int32})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sourceDescriptor">Source tuple descriptor.</param>
            <param name="segment">The segment to extract.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.SegmentTransform.Segment">
            <summary>
            Gets the segment this transform extracts.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping arbitrary count of source tuples to a single one (this).
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transform">The transform.</param>
            <param name="sources">Source tuples.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.CombineTransform">
            <summary>
            This class is used for source <see cref="T:Xtensive.Tuples.Tuple"/>s combining.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <see cref="M:Xtensive.Tuples.Transform.MapTransform.Apply(Xtensive.Tuples.Transform.TupleTransformType,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)" copy="true"/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.CombineTransform.#ctor(System.Boolean,Xtensive.Tuples.TupleDescriptor[])">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="isReadOnly"><see cref="P:Xtensive.Tuples.Transform.MapTransform.IsReadOnly"/> property value.</param>
            <param name="sources">Source tuple descriptors.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.CombineTransform.Sources">
            <summary>
            Gets tuple descriptors this transform merges.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.Transform.Internals.MapTransformTuple3">
            <summary>
            A <see cref="T:Xtensive.Tuples.Transform.MapTransform"/> result tuple mapping up to 3 source tuples to a single one (this).
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.GetFieldState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.GetValue(System.Int32,Xtensive.Tuples.TupleFieldState@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.SetValue(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transform">The transform.</param>
            <param name="source1">First source tuple.</param>
            <param name="source2">2nd source tuple.</param>
        </member>
        <member name="M:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.#ctor(Xtensive.Tuples.Transform.MapTransform,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transform">The transform.</param>
            <param name="source1">First source tuple.</param>
            <param name="source2">2nd source tuple.</param>
            <param name="source3">3rd source tuple.</param>
        </member>
        <member name="P:Xtensive.Tuples.Transform.Internals.MapTransformTuple3.Arguments">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Tuples.Transform.TupleTransformType">
            <summary>
            Enumerates possible tuple transformation types.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Default">
            <summary>
            Default transform type (<see cref="F:Xtensive.Tuples.Transform.TupleTransformType.Auto"/>).
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Auto">
            <summary>
            Transform type is detected automatically based on sources.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.TransformedTuple">
            <summary>
            <see cref="F:Xtensive.Tuples.Transform.TupleTransformType.TransformedTuple"/> must be returned.
            A wrapper performing specified transform on-the-fly is returned.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.Transform.TupleTransformType.Tuple">
            <summary>
            <see cref="T:Xtensive.Tuples.RegularTuple"/> must be returned.
            Transform is performed right now and a newly created tuple is returned.
            </summary>
        </member>
        <member name="T:Xtensive.Tuples.TupleExtensions">
            <summary>
            Various extension methods for <see cref="T:Xtensive.Tuples.Tuple"/> and <see cref="T:Xtensive.Tuples.Tuple"/> types.
            </summary>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified source index 
            and pastes them to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified target index. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
            <param name="targetStartIndex">The index in the <paramref name="target"/> tuple at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the specified source index 
            and pastes them to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32)">
            <summary>
            Copies a range of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the <paramref name="startIndex"/>
            and pastes them into <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element. 
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="startIndex">The index in the <paramref name="source"/> tuple at which copying begins.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Copies all the elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element
            and pastes them into <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            starting at the first element.
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32[])">
            <summary>
            Copies a set of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/> 
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="source">Source tuple to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Tuples.Tuple[],Xtensive.Tuples.Tuple,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            Copies a set of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/>s
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="source">Source tuples to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.CopyTo(Xtensive.Collections.FixedList3{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple,Xtensive.Core.Pair{System.Int32,System.Int32}[])">
            <summary>
            Copies a set of elements from <paramref name="source"/> <see cref="T:Xtensive.Tuples.Tuple"/>s
            to <paramref name="target"/> <see cref="T:Xtensive.Tuples.Tuple"/> using 
            specified target-to-source field index <paramref name="map"/>.
            </summary>
            <param name="source">Source tuples to copy.</param>
            <param name="target">Tuple that receives the data.</param>
            <param name="map">Target-to-source field index map.
            Negative value in this map means "skip this element".</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.Combine(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Combines the <paramref name="left"/> with <paramref name="right"/>.
            </summary>
            <param name="left">The first <see cref="T:Xtensive.Tuples.Tuple"/> to combine.</param>
            <param name="right">The second <see cref="T:Xtensive.Tuples.Tuple"/> to combine.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.GetSegment(Xtensive.Tuples.Tuple,Xtensive.Core.Segment{System.Int32})">
            <summary>
            Cuts out <paramref name="segment"/> from <paramref name="tuple"/> <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The <see cref="T:Xtensive.Tuples.Tuple"/> to get segment from.</param>
            <param name="segment">The <see cref="T:Xtensive.Core.Segment`1"/> to cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the specified
            <paramref name="behavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="length">The number of elements to process.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptors mismatch.</exception>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,System.Int32)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="length">The number of elements to process.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the specified
            <paramref name="behavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Int32)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="startIndex">The index in the <paramref name="difference"/> tuple at which merging begins.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,Xtensive.Tuples.MergeBehavior)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
            <param name="behavior">The merge behavior that will be used to resolve conflicts when both values 
            from <paramref name="difference"/> and <paramref name="origin"/> are available.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.MergeWith(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
            <summary>
            Merges a range of fields from <paramref name="difference"/>
            <see cref="T:Xtensive.Tuples.Tuple"/> starting at the specified index with the fields from
            <paramref name="origin"/> <see cref="T:Xtensive.Tuples.Tuple"/> with the default value of <see cref="T:Xtensive.Tuples.MergeBehavior"/>.
            </summary>
            <param name="origin">Tuple containing original values and receiving the data.</param>
            <param name="difference">Tuple with differences to merge with.</param>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToRegular(Xtensive.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Tuples.RegularTuple"/> instance "filled" with the same field values
            as the specified <paramref name="source"/> tuple.
            </summary>
            <param name="source">The tuple to clone as <see cref="T:Xtensive.Tuples.RegularTuple"/>.</param>
            <returns>A new instance of <see cref="T:Xtensive.Tuples.RegularTuple"/> with the same field values
            as the specified <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToReadOnly(Xtensive.Tuples.Tuple,Xtensive.Tuples.Transform.TupleTransformType)">
            <summary>
            Converts <paramref name="source"/> tuple to read-only one.
            </summary>
            <param name="source">The tuple to convert to read-only.</param>
            <param name="transformType">The type of transformation to perform.</param>
            <returns>Read-only version of <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.ToFastReadOnly(Xtensive.Tuples.Tuple)">
            <summary>
            Converts <paramref name="source"/> tuple to fast read-only one.
            </summary>
            <param name="source">The tuple to convert to fast read-only.</param>
            <returns>Fast read-only version of <paramref name="source"/> tuple.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.GetFieldStateMap(Xtensive.Tuples.Tuple,Xtensive.Tuples.TupleFieldState)">
            <summary>
            Gets the field state map of the specified <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Tuples.Tuple"/> to inspect.</param>
            <param name="requestedState">The state to compare with.</param>
            <returns>Newly created <see cref="T:System.Collections.BitArray"/> instance which holds inspection result.</returns>
        </member>
        <member name="M:Xtensive.Tuples.TupleExtensions.Initialize(Xtensive.Tuples.Tuple,System.Collections.BitArray)">
            <summary>
            Initializes the specified <see cref="T:Xtensive.Tuples.Tuple"/> with default values.
            </summary>
            <param name="target">Tuple to initialize.</param>
            <param name="nullableMap"><see cref="T:System.Collections.BitArray"/> instance that flags that field should have null value.</param>
            <exception cref="T:System.ArgumentException">Tuple descriptor field count is not equal to <paramref name="nullableMap"/> count.</exception>
        </member>
        <member name="T:Xtensive.Tuples.TupleFieldState">
            <summary>
            Defines field state that can be set or get for each field in <see cref="T:Xtensive.Tuples.Tuple"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Default">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Available">
            <summary>
            Field value is available in tuple.
            </summary>
        </member>
        <member name="F:Xtensive.Tuples.TupleFieldState.Null">
            <summary>
            Field has null value.
            Used with both nullable and non-nullable fields.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Pair`2">
            <summary>
            A pair of two values.
            </summary>
            <typeparam name="TFirst">The <see cref="T:System.Type"/> of first value.</typeparam>
            <typeparam name="TSecond">The <see cref="T:System.Type"/> of second value.</typeparam>
        </member>
        <member name="F:Xtensive.Core.Pair`2.First">
            <summary>
            A first value.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Pair`2.Second">
            <summary>
            A second value.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Pair`2.Equals(Xtensive.Core.Pair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.CompareTo(Xtensive.Core.Pair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.op_Equality(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.op_Inequality(Xtensive.Core.Pair{`0,`1},Xtensive.Core.Pair{`0,`1})">
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)"/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="first">A first value in pair.</param>
            <param name="second">A second value in pair.</param>
        </member>
        <member name="T:Xtensive.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ActualTargetModel">
            <summary>
              Looks up a localized string similar to Actual target model.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.AnyCulture">
            <summary>
              Looks up a localized string similar to *.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.BoxFormat">
            <summary>
              Looks up a localized string similar to Box({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.CachedFormat">
            <summary>
              Looks up a localized string similar to Cached({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ComparisonRuleFormat">
            <summary>
              Looks up a localized string similar to ComparisonRule({0}, {1}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ComparisonRulesFormat">
            <summary>
              Looks up a localized string similar to ComparisonRules({0}, [{1}]).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ComprehensiveLogFormat">
            <summary>
              Looks up a localized string similar to {0,6:F2}s @{1,-5} {2,5} {3,-24} {4}{5}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.Difference">
            <summary>
              Looks up a localized string similar to Difference.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.DifferenceFormat">
            <summary>
              Looks up a localized string similar to &quot;{1}&quot; != &quot;{2}&quot; ({0}): {3}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.DifferencePropertyNamePrefix">
            <summary>
              Looks up a localized string similar to +{0}: .
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.EmptyString">
            <summary>
              Looks up a localized string similar to &apos;&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.EntireFormat">
            <summary>
              Looks up a localized string similar to Entire({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExAccessedMemberIsNotProperty">
            <summary>
              Looks up a localized string similar to The accessed member is not a property..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExActualConjunctionOperandCountGreaterThanExpected">
            <summary>
              Looks up a localized string similar to Actual conjunction operand count greater than MaxConjunctionOperandCount..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExAlreadyDisposed">
            <summary>
              Looks up a localized string similar to Object is already disposed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExAlreadyInitialized">
            <summary>
              Looks up a localized string similar to Instance is already initialized..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentCannotBeEmptyString">
            <summary>
              Looks up a localized string similar to Argument can&apos;t be an empty string..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentMustBeGreaterThanX">
            <summary>
              Looks up a localized string similar to Argument must be greater than &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentMustBeGreaterThatOrEqualX">
            <summary>
              Looks up a localized string similar to Argument must be greater that or equal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentMustBeLessThanOrEqualX">
            <summary>
              Looks up a localized string similar to Argument must be less than or equal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentMustBeLessThanX">
            <summary>
              Looks up a localized string similar to Argument must be less than &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentMustnotBeOfTypeX">
            <summary>
              Looks up a localized string similar to The argument must not be of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentShouldBeInRange">
            <summary>
              Looks up a localized string similar to Argument should be in range [{0}...{1}]..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentValueMustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Argument value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentValueMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Argument value must be greater than zero..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArgumentXIsLessThanArgumentY">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is less than the argument &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArrayDoesNotHaveZeroBasedIndexing">
            <summary>
              Looks up a localized string similar to Array does not have zero-based indexing..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExArrayIsMultidimensional">
            <summary>
              Looks up a localized string similar to Array is multidimentional..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExASetOfExceptionsIsCaught">
            <summary>
              Looks up a localized string similar to A set of exceptions is caught..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExBindingFailedForX">
            <summary>
              Looks up a localized string similar to Binding has failed for {0}. Check property declaration..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExBothMeasurementsHaveNoValue">
            <summary>
              Looks up a localized string similar to Both measurements have no value..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExBothSourceAndTargetAreNull">
            <summary>
              Looks up a localized string similar to Both Source and Target are null..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCannotActivateServiceXErrorY">
            <summary>
              Looks up a localized string similar to Can&apos;t activate service &apos;{0}&apos;. Error: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCannotActivateServiceXWithKeyYErrorZ">
            <summary>
              Looks up a localized string similar to Can&apos;t activate service &apos;{0}&apos; with name &quot;{1}&quot;. Error: {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCannotFindConstructorToExecuteX">
            <summary>
              Looks up a localized string similar to Can&apos;t find a constructor to execute {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCannotParseCallToComparisonMethod">
            <summary>
              Looks up a localized string similar to Can&apos;t parse the call to the comparison method..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCantCreateAssociateForGenericTypeDefinitions">
            <summary>
              Looks up a localized string similar to Can&apos;t create associates for generic type definitions (type &apos;{0}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCantFindAssociate">
            <summary>
              Looks up a localized string similar to Can&apos;t find associated {0} of type &apos;{1}&apos; for type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCantFindAssociate2">
            <summary>
              Looks up a localized string similar to Can&apos;t find associated {0} of type &apos;{1}&apos; for type &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCantPassNoInfinityToThisConstructor">
            <summary>
              Looks up a localized string similar to InfinityType.None can&apos;t be passed to this constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionAlreadyContainsItemWithSpecifiedKey">
            <summary>
              Looks up a localized string similar to Collection already contains item with the specified key..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionAlreadyContainsSpecifiedItem">
            <summary>
              Looks up a localized string similar to Collecton already contains specified item..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionHasBeenChanged">
            <summary>
              Looks up a localized string similar to Collection has been changed during the enumeration..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionHasBeenModified">
            <summary>
              Looks up a localized string similar to Collection has been modified..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to Collection is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionOrCoutableExcpected">
            <summary>
              Looks up a localized string similar to Item should be either an ICollection or ICountable..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCollectionPropertyXIsBoundToPropertyYThatIsNotCollection">
            <summary>
              Looks up a localized string similar to The collection property {0} is bound to the property {1} that isn&apos;t collection..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExContainerTypeDoesNotProvideASuitableConstructor">
            <summary>
              Looks up a localized string similar to Container type does not provide a suitable constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExContainerTypeMustImplementX">
            <summary>
              Looks up a localized string similar to Container type must implement {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExContextRequired">
            <summary>
              Looks up a localized string similar to {0} is required. Use {1} to set it..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCopyToMustOperateWithDifferentStreams">
            <summary>
              Looks up a localized string similar to Unable to copy a part of the stream to itself. Use StreamExtensions.Copy method instead..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCouldNotLoadTypesFromAssembly">
            <summary>
              Looks up a localized string similar to Could not load types from the assembly &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExCultureOfAppliedRuleShouldBeEitherNullOrTheSameAsOnTarget">
            <summary>
              Looks up a localized string similar to Culture of the applied rule should either be undefined (null), or be the same as on target rule..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDependencyOperationIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Dependency operation with full name &quot;{0}&quot; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDescriptorIsInInvalidState">
            <summary>
              Looks up a localized string similar to Descriptor is in invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDeserializationErrorUnrecognizedSlotsAreFound">
            <summary>
              Looks up a localized string similar to Deserialization error: some SerializationData slots were not recognized, thus the format of the serialized data differs from the supported one..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDeserializationStreamLengthIncorrect">
            <summary>
              Looks up a localized string similar to Stream length not enough to deserialize object of specified type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDestionationArrayIsTooSmall">
            <summary>
              Looks up a localized string similar to Destionation array is too small..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDetectionOfChangesInUserStructureCollectionIsNotSupported">
            <summary>
              Looks up a localized string similar to The detection of changes in user structure collection isn&apos;t supported..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDifferenceRelatedToXTypeIsNotFoundOnTheUpgradeContextStack">
            <summary>
              Looks up a localized string similar to Difference related to {0} type is not found on the UpgradeContext stack..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExDifferentTupleDescriptors">
            <summary>
              Looks up a localized string similar to Different TupleDescriptors are not valid here: {0} and {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExEndPointOrderMustBeEqual">
            <summary>
              Looks up a localized string similar to EndPoints order of both ranges must be equal..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExEnumerationIsAlreadyFinished">
            <summary>
              Looks up a localized string similar to Enumeration is already finished..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExEscapeCharacterMustDifferFromDelimiterCharacter">
            <summary>
              Looks up a localized string similar to Escape character must differ from delimiter character..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExceptionWasThrownDuringTaskExecution">
            <summary>
              Looks up a localized string similar to The exception was thrown during the task&apos;s execution..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpectedValueOfParameterIsAlreadySet">
            <summary>
              Looks up a localized string similar to The expected value of the parameter is already set..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpression0MustReferenceField">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; must reference field..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpression0MustReferenceProperty">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; must reference property..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpressionHavingDifferentNormalFormMustNotBeRoot">
            <summary>
              Looks up a localized string similar to The expression having the different normal form must not be a root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpressionHavingEqualNormalFormMustBeRoot">
            <summary>
              Looks up a localized string similar to The expression having the equal normal form must be a root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExExpressionMustReturnValueOfTypeX">
            <summary>
              Looks up a localized string similar to The expression must return a value of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExFieldIsInfinite">
            <summary>
              Looks up a localized string similar to Field with index &apos;{0}&apos; is infinitу..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExGenericParameterShouldBeOfTypeT">
            <summary>
              Looks up a localized string similar to Generic parameter &apos;{0}&apos; should be of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExGivenKeyNotPresent">
            <summary>
              Looks up a localized string similar to The given key was not present in the dictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInadmissibleTypeConversion">
            <summary>
              Looks up a localized string similar to Conversion from type {0} to type {1} is inadmissible..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExIncompatibleArrayType">
            <summary>
              Looks up a localized string similar to Incompatible array type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInconsistentComparisons">
            <summary>
              Looks up a localized string similar to The two collections cannot be combined because they use different comparison operations..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index is out of range..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExIndexShouldBeInNMRange">
            <summary>
              Looks up a localized string similar to Index should be in [{0}...{1}] range..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInstanceIsLocked">
            <summary>
              Looks up a localized string similar to Instance is locked..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInstanceMustHaveSyncRoot">
            <summary>
              Looks up a localized string similar to A instance must have non-null IHasSyncRoot.SyncRoot property value..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInternalError">
            <summary>
              Looks up a localized string similar to Internal error: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidActiveScope">
            <summary>
              Looks up a localized string similar to Active scope is invalid - it differs from the expected one. Probably you have forgot to dispose some nested scope..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidAfterPathPropertyValue">
            <summary>
              Looks up a localized string similar to Invalid AfterPath property value..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidArgumentType">
            <summary>
              Looks up a localized string similar to Invalid argument type: expected type is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidCapacity">
            <summary>
              Looks up a localized string similar to The specified capacity value is less than collection count..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidCast">
            <summary>
              Looks up a localized string similar to Cast from &apos;{0}&apos; to &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidContextActivationSequence">
            <summary>
              Looks up a localized string similar to Invalid context activation sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidContextDeactivationSequence">
            <summary>
              Looks up a localized string similar to Invalid context deactivation sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidFieldMapSizeExpectedX">
            <summary>
              Looks up a localized string similar to Invalid field map size. Expected {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidFormatterProcessType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; formatter process type is invalid for the current operation..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidNestingOfNodeX">
            <summary>
              Looks up a localized string similar to Invalid Nesting of node &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidNodeState">
            <summary>
              Looks up a localized string similar to Invalid node state..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidObjectSerializerSimilarValueSerializerExists">
            <summary>
              Looks up a localized string similar to Object serializer is invalid, since similar value serializer exists..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidParentValue">
            <summary>
              Looks up a localized string similar to Invalid Parent value..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidRecordType">
            <summary>
              Looks up a localized string similar to Record with invalid (possibly - unspecified) type is found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidSerializerBehaviorMustNotBeReferable">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; can&apos;t be an IsReferable serializer, since it serializes IReference type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidSerializerType">
            <summary>
              Looks up a localized string similar to Generic parameter T is resolved to associated &apos;{0}&apos;, although &apos;{1}&apos; is expected..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidTransactionState">
            <summary>
              Looks up a localized string similar to Invalid transaction state (&apos;{0}&apos;). Expected state(s) is (are) &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidTupleDescriptorExpectedDescriptorIs">
            <summary>
              Looks up a localized string similar to Invalid TupleDescriptor. Expected descriptor is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExInvalidUrl">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is invalid URL..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemAlreadyExists">
            <summary>
              Looks up a localized string similar to Item already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemCantBeCachedIncompatibleType">
            <summary>
              Looks up a localized string similar to The specified item cannot be cached because its type is incompatible with underlying storage format..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemCantBeComparedIncompatibleType">
            <summary>
              Looks up a localized string similar to The specified item cannot be cached because its type is incompatible with ITuple..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemIsInUse">
            <summary>
              Looks up a localized string similar to Specified item is already in use..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemIsNotInUse">
            <summary>
              Looks up a localized string similar to Specified item is not in use..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemIsNotPooled">
            <summary>
              Looks up a localized string similar to Specified item isn&apos;t pooled..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemNotFound">
            <summary>
              Looks up a localized string similar to Specified item isn&apos;t found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemWithNameWasNotFound">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemWithNameXIsNotFound">
            <summary>
              Looks up a localized string similar to Item with Name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExItemWithTheSameKeyHasBeenAdded">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExKeyAlreadyExists">
            <summary>
              Looks up a localized string similar to Key already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExKeyXIsNotFound">
            <summary>
              Looks up a localized string similar to Key {0} is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExLambdaParameterXIsOutOfScope">
            <summary>
              Looks up a localized string similar to Lambda parameter &apos;{0}&apos; is out of scope..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExLimitOfGraphDepthIsExceeded">
            <summary>
              Looks up a localized string similar to The limit of the graph depth is exceeded..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExLinkedOperationMissingFormat">
            <summary>
              Looks up a localized string similar to Linked operation for property {0} missing..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExLoopInActionDependencyChain">
            <summary>
              Looks up a localized string similar to Loop in action dependency chain is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMappingForPropertyXHasAlreadyBeenRegistered">
            <summary>
              Looks up a localized string similar to The mapping for the property {0} has already been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMaxItemCountIsN">
            <summary>
              Looks up a localized string similar to Maximal item count is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMeasurementIsAlreadyCompleted">
            <summary>
              Looks up a localized string similar to Measurement is already completed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMeasurementMustHaveValue">
            <summary>
              Looks up a localized string similar to Measurement &apos;{0}&apos; must have value..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMemberIsNotPublicPropertyOrField">
            <summary>
              Looks up a localized string similar to Member: &apos;{0}&apos; is not a Public Property or Field of Type: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMergeOperationRequireIntersectionOfOperands">
            <summary>
              Looks up a localized string similar to Merge operation require intersection of operands..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMinMaxValuesAreNotSupportedForTupleFieldAdvancedComparer">
            <summary>
              Looks up a localized string similar to MinMaxValues aren&apos;t supported for TupleFieldAdvancedComparer..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExModelObjectCannotBeRemoved">
            <summary>
              Looks up a localized string similar to Model object cannot be removed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMultipleAssociatesMatch">
            <summary>
              Looks up a localized string similar to Multiple associates match type &apos;{0}&apos; by its interfaces (at least &apos;{1}&apos; and &apos;{2}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMultipleAttributesOfTypeXAreNotAllowedHere">
            <summary>
              Looks up a localized string similar to {0}: multiple attributes of type &apos;{1}&apos; are not allowed here..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMultipleHintsFound">
            <summary>
              Looks up a localized string similar to Multiple hints found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExMultipleServicesMatchToTheSpecifiedArguments">
            <summary>
              Looks up a localized string similar to Multiple services match to the specified arguments..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNestedCollectionIsNotSupported">
            <summary>
              Looks up a localized string similar to Nested collection is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNoAvailableItems">
            <summary>
              Looks up a localized string similar to There are no more available items..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNoCurrentComparer">
            <summary>
              Looks up a localized string similar to Comparer.Current is null..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNoCurrentUpgrader">
            <summary>
              Looks up a localized string similar to Upgarder.Current is null..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNodeXMustBeProcessedBeforeBeingComparedAsReferenceValueOfYZ">
            <summary>
              Looks up a localized string similar to Node &quot;{0}&quot; must be processed before being compared as reference (value of &quot;{1}&quot;.{2})..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNoNesting">
            <summary>
              Looks up a localized string similar to Nesting must be created for any node..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNoObjectWithSpecifiedKey">
            <summary>
              Looks up a localized string similar to There is no object with specified key..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNotInitialized">
            <summary>
              Looks up a localized string similar to Instance is not initialized (or not initialized properly)..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExNullablePropertyXIsBoundToPropertyYThatIsNotNullable">
            <summary>
              Looks up a localized string similar to The nullable property {0} is bound to the property {1} that isn&apos;t nullable..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExObjectIsReadOnly">
            <summary>
              Looks up a localized string similar to Object is read-only..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOnlyBreakableNodesSadSmile">
            <summary>
              Looks up a localized string similar to Only breakable nodes :(.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOnlyNormalizedExpressionCanBeAddedAsChildToRoot">
            <summary>
              Looks up a localized string similar to Only the normalized expression having the different normal form can be added as the immediate descendant to the root expression..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOnlyOneAncestorOfEachInstanceOfThisGenericTypeIsAllowed">
            <summary>
              Looks up a localized string similar to Only one ancestor of each instance of this generic type is allowed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOperationLinkTypeUndefined">
            <summary>
              Looks up a localized string similar to Operation LinkType should be defined before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOperationMustBeLocked">
            <summary>
              Looks up a localized string similar to Operation must be locked before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExOperationPropertyNameUndefined">
            <summary>
              Looks up a localized string similar to Operation PropertyName must be specified before it can be registered in OperationDictionary..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPathXNotFound">
            <summary>
              Looks up a localized string similar to Node with path &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExpectedTargetModel">
            <summary>
              Looks up a localized string similar to Expected target model.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPoolMustBeSyncronized">
            <summary>
              Looks up a localized string similar to Pool should be in syncronized mode to utilize AutoCleanup feature..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPoolWrongKey">
            <summary>
              Looks up a localized string similar to Item already exists in the pool with another key..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPortOutOfRange">
            <summary>
              Looks up a localized string similar to Port value must be in [0,65535] range..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPrimitivePropertyXIsBoundToPropertyYThatIsNotPrimitive">
            <summary>
              Looks up a localized string similar to The primitive property {0} is bound to the property {1} that isn&apos;t primitive..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertiesXAndYHaveDifferentPrimitiveTypes">
            <summary>
              Looks up a localized string similar to The properties {0} and {1} have different primitive types..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertiesXAndYHaveIncompatibleTypes">
            <summary>
              Looks up a localized string similar to The properties &quot;{0}&quot; and &quot;{1}&quot; have incompatible types..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyDoesNotHaveGetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of type &apos;{1}&apos; does not have public get accessor..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyDoesNotHaveSetter">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of type &apos;{1}&apos; does not have public set accessor..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyIsAlreadyInitialized">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is already initialized..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyIsNotInitialized">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not initialized (or not initialized properly)..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyValueMustBelongToTheSameModel">
            <summary>
              Looks up a localized string similar to Property value must belong to the same Model..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExPropertyXYIsNotFound">
            <summary>
              Looks up a localized string similar to Property &quot;{0}.{1}&quot; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExRangeIsEmpty">
            <summary>
              Looks up a localized string similar to Range is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExRecursiveAssociateLookupDetected">
            <summary>
              Looks up a localized string similar to Recursive associate lookup is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExRecursiveConstructorParemeterDependencyIsDetected">
            <summary>
              Looks up a localized string similar to Recursive constructor paremeter dependency is detected..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExReferenceIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Reference &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExReferenceIsNotResolvedYet">
            <summary>
              Looks up a localized string similar to Reference &apos;{0}&apos; is not resolved yet..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExReferenceIsNull">
            <summary>
              Looks up a localized string similar to Reference points to null..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExReferencePropertyXIsBoundToPropertyYThatIsNotReference">
            <summary>
              Looks up a localized string similar to The reference property {0} is bound to the property {1} that isn&apos;t reference..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExResourcePropertyXIsNotOfStringType">
            <summary>
              Looks up a localized string similar to Resource property {0} is not of string type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExScopeBoundTransactionCanBeCommittedOnlyByItsScope">
            <summary>
              Looks up a localized string similar to Scope-bound transaction can be committed only by its scope. Use TransactionScopeBase.Complete() \  Dispose() methods of  appropriate TransactionScopeBase descendant instance to do this..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExScopeCantBeDisposed">
            <summary>
              Looks up a localized string similar to Scope can&apos;t be disposed. Most likely it is bound to a different thread..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExScopeRequired">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSegmentIsOutOfRange">
            <summary>
              Looks up a localized string similar to Segment is out of range..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExServiceNotFound">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExServiceOfTypeXIsNotAvailable">
            <summary>
              Looks up a localized string similar to Service of type &apos;{0}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExServiceWithNameXOfTypeYIsNotAvailable">
            <summary>
              Looks up a localized string similar to Service with name &quot;{0}&quot; of type &apos;{1}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSomeOperandsAreNotExpressionsOfTypeBoolean">
            <summary>
              Looks up a localized string similar to Some operands are not Expressions  of type &apos;System.Boolean&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSpecifiedCapacityIsLessThenCollectionCount">
            <summary>
              Looks up a localized string similar to The specified capacity value is less than collection count..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSpecifiedExpressionCanNotBeParsed">
            <summary>
              Looks up a localized string similar to The specified expression can&apos;t be parsed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSpecifiedExpressionIsNotMemberExpression">
            <summary>
              Looks up a localized string similar to The specified expression is not a MemberExpression..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSpecifiedTypeShouldBeGeneratedTupleDescriptorOrItsDescendant">
            <summary>
              Looks up a localized string similar to Specified type should be either GeneratedTupleDescriptor or its descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExStringDoesNotCorrespondToDescriptor">
            <summary>
              Looks up a localized string similar to String does not correspond to the specified descriptor..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExSystemTimeChanged">
            <summary>
              Looks up a localized string similar to System date \ time has been changed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTargetObjectExistsX">
            <summary>
              Looks up a localized string similar to Target object already exists: &quot;{0}&quot;. To assign a new one, you must remove the old one first..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTheNumberOfSourcesIsTooSmallExpected">
            <summary>
              Looks up a localized string similar to The number of sources is too small. Expected number is {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExThisOperationIsNotAllowedForParameterContextOperatingWithExpectedValuesOfParameters">
            <summary>
              Looks up a localized string similar to This operation is not allowed for the parameter context operating with expected values of parameters..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTransactionIsAlreadyActivated">
            <summary>
              Looks up a localized string similar to Transaction is already activated..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTransactionScopeIsCompletedCanNotBeSetToFalse">
            <summary>
              Looks up a localized string similar to TransactionScope.IsCompleted can not be set to &apos;false&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeIsNotSupportedByBinaryPrimitiveSerializer">
            <summary>
              Looks up a localized string similar to Type is not supported by BinaryPrimitiveSerializer..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeOfXPropertyMustBeY">
            <summary>
              Looks up a localized string similar to Type of {0} property must be {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXCanNotBeTransformed">
            <summary>
              Looks up a localized string similar to The type {0} can&apos;t be transformed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXDoesNotHavePropertyY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have property &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXHasAlreadyBeenRegistered">
            <summary>
              Looks up a localized string similar to The type {0} has already been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXHasNotBeenRegistered">
            <summary>
              Looks up a localized string similar to The type {0} hasn&apos;t been registered..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXIsNotSubclassOfTypeY">
            <summary>
              Looks up a localized string similar to The type {0} isn&apos;t a subclass of the type {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXMustBeNonAbstractType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must be non-abstract type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXMustBeReferenceType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must be reference type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXMustImplementY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must implement &apos;{1}&apos;, or must be its descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExTypeXShouldNotBeGeneric">
            <summary>
              Looks up a localized string similar to Type {0} should not be generic..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUnableToBindParametersToLambdaXParametersCountIsIncorrect">
            <summary>
              Looks up a localized string similar to Unable to bind parameters to lambda {0}. Parameters count is incorrect..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUnableToCastNullValueToXUseXInstead">
            <summary>
              Looks up a localized string similar to Unable to cast null value to {0}; use {0}? instead..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUnableToCreateProviderInstance">
            <summary>
              Looks up a localized string similar to Unable to create provider instance. Check if provider&apos;s class has static &quot;Instance&quot; property..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUnableToUseExpressionXAsXParameterOfLambdaXBecauseOfTypeMistmatch">
            <summary>
              Looks up a localized string similar to Unable to use expression {0} as {1} parameter of lambda {2} because of type mistmatch..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUnknownExpressionType">
            <summary>
              Looks up a localized string similar to Unknown expression type: &apos;{0} ({1})&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUpgradeSequenceValidationFailure">
            <summary>
              Looks up a localized string similar to Upgrade sequence validation failure..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUseLogCaptureScopeConstructorInstead">
            <summary>
              Looks up a localized string similar to Use LogCaptureScope constructor instead..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExUseLogIndentScopeConstructorInstead">
            <summary>
              Looks up a localized string similar to Use LogIndentScope constructor instead..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExValueForParameterXIsNotSet">
            <summary>
              Looks up a localized string similar to Value for parameter &apos;{0}&apos; is not set..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExValueIsNotAvailable">
            <summary>
              Looks up a localized string similar to Value is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExValueWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Value with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExValueWithNameXIsNotFound">
            <summary>
              Looks up a localized string similar to Value with name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExValueXIsNotAllowedHere">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed or invalid here..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExWrongSourceCollectionElementType">
            <summary>
              Looks up a localized string similar to Source collection contains at least one item of type &quot;{0}&quot;, that cannot be cast to the item type of the destination collection..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ExXIsNeitherClassNorValueType">
            <summary>
              Looks up a localized string similar to The {0} is neither class nor value type..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.HasVersionFormat">
            <summary>
              Looks up a localized string similar to {0} (v{1}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.InfinitesimalFormat">
            <summary>
              Looks up a localized string similar to {0}{1}d.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.Infinity">
            <summary>
              Looks up a localized string similar to inf.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ItemChangeCountFormat">
            <summary>
              Looks up a localized string similar to {0} change(s).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ItemChangeFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogAttemptToUseDisposedInstance">
            <summary>
              Looks up a localized string similar to Attempt to use disposed instance of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogAutomaticUpgradeSequenceValidation">
            <summary>
              Looks up a localized string similar to Automatic upgrade sequence validation.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogCantFindAssociateFor">
            <summary>
              Looks up a localized string similar to Can&apos;t find {0} (&apos;{1}&apos;) for type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogException">
            <summary>
              Looks up a localized string similar to Exception!.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogGenericAssociateCreationHasFailedFor">
            <summary>
              Looks up a localized string similar to &apos;{0}&lt;{1}, {2}&gt;&apos; creation has failed for &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogGenericAssociateIsUsedFor">
            <summary>
              Looks up a localized string similar to &apos;{0}&lt;{1}, {2}&gt;&apos; was used for &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogItemFormat">
            <summary>
              Looks up a localized string similar to {0}:.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogRegionBegin">
            <summary>
              Looks up a localized string similar to {0}: started..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogRegionEnd">
            <summary>
              Looks up a localized string similar to {0}: completed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogSafeDisposeFailing">
            <summary>
              Looks up a localized string similar to Safe dispose of &apos;{0}&apos; failing..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogScopeDisposeError">
            <summary>
              Looks up a localized string similar to Scope dispose error..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogUnableToGetDefaultHasherForTypeXxx">
            <summary>
              Looks up a localized string similar to Unable to get default hasher for type {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.LogValidationFailed">
            <summary>
              Looks up a localized string similar to Validation failed..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.NodeInfoFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.NotAvailable">
            <summary>
              Looks up a localized string similar to n\a.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.Null">
            <summary>
              Looks up a localized string similar to null.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.OriginalExceptions">
            <summary>
              Looks up a localized string similar to Original exception(s).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.PairFormat">
            <summary>
              Looks up a localized string similar to ({0}, {1}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.PropertyChangeFormat">
            <summary>
              Looks up a localized string similar to +{0}: {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReadOnly">
            <summary>
              Looks up a localized string similar to read-only.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReadOnlyShort">
            <summary>
              Looks up a localized string similar to r/o.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReadWrite">
            <summary>
              Looks up a localized string similar to read-write.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReadWriteShort">
            <summary>
              Looks up a localized string similar to r/w.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.Recursive">
            <summary>
              Looks up a localized string similar to recursive.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReferenceFormat">
            <summary>
              Looks up a localized string similar to #({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReleaseLogFormat">
            <summary>
              Looks up a localized string similar to {6:s} @{1,-5} {2,5} {3,-24} {4}{5}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ReversedFormat">
            <summary>
              Looks up a localized string similar to Reversed({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.SegmentFormat">
            <summary>
              Looks up a localized string similar to [{0} ... {1}].
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.SerializationDataFormat">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, #=&apos;{1}&apos; ({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.SimpleLogFormat">
            <summary>
              Looks up a localized string similar to {3}: {5}.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.ThreadSafeCachedFormat">
            <summary>
              Looks up a localized string similar to ThreadSafeCached({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.TransformedTupleFormat">
            <summary>
              Looks up a localized string similar to {0}: {1} of ({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.TripletFormat">
            <summary>
              Looks up a localized string similar to ({0}, {1}, {2}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.TupleDescriptorFormat">
            <summary>
              Looks up a localized string similar to TupleDescriptor({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.TupleFormat">
            <summary>
              Looks up a localized string similar to ({0}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.TupleTransformFormat">
            <summary>
              Looks up a localized string similar to {0}({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.UnableToDisposeItemWhenContainerIsNotDisposed">
            <summary>
              Looks up a localized string similar to Unable to dispose an item when disposable container has an invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.UpgradeSequence">
            <summary>
              Looks up a localized string similar to Upgrade sequence.
            </summary>
        </member>
        <member name="P:Xtensive.Resources.Strings.XInY">
            <summary>
              Looks up a localized string similar to {0} in {1}.
            </summary>
        </member>
        <member name="T:Xtensive.Collections.ISet">
            <summary>
            Set of items.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ISet.Add(System.Object)">
            <summary>
            Adds the specified element to the <see cref="T:Xtensive.Collections.ISet"/>.
            </summary>
            <param name="item">Item to add to the set.</param>
            <returns><see langword="true"/>if the element is added to the <see cref="T:Xtensive.Collections.ISet"/> object; false if the element is already present.</returns>
        </member>
        <member name="M:Xtensive.Collections.ISet.Remove(System.Object)">
            <summary>
            Removes the specified item from this instance.
            </summary>
            <param name="item">The item.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ISet.RemoveWhere(System.Predicate{System.Object})">
            <summary>
            Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:Xtensive.Collections.ISet"/> collection.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements that were removed from the <see cref="T:Xtensive.Collections.ISet"/> collection.</returns>
        </member>
        <member name="M:Xtensive.Collections.ISet.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Collections.ISet.Contains(System.Object)">
            <summary>
            Determines whether this instance contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <see langword="true"/> if this instance contains the specified item; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Collections.ISet.IsDisjointWith(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is disjoint with the specified set.
            </summary>
            <param name="other">Set to check disjointness with.</param>
            <returns><see langword="true"/> if the two sets are disjoint; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
            <remarks>Two sets are disjoint if no item from one set is equal to any item from the other set.</remarks>
        </member>
        <member name="M:Xtensive.Collections.ISet.SetEquals(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is equal to another set. This set is equal to otherSet if they contain the same items.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this set is equal to otherSet; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.ISet.IsProperSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is a proper subset of the specified set.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this instance is a proper subset of <paramref name="other"/> set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
            <remarks>One set is a subset of second set if every element in first set is also contained in second set. 
            Additionally, first set must have strictly fewer items than second set.</remarks>
        </member>
        <member name="M:Xtensive.Collections.ISet.IsProperSupersetOf(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is a proper superset of the specified set.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this instance is the proper superset of the specified set; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
            <remarks>One set is the proper superset of second set if every element in second set is also contained in the first set. 
            Additionally, first set must have strictly more items than second set.</remarks>
        </member>
        <member name="M:Xtensive.Collections.ISet.IsSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is a subset of the specified set.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this instance is a proper subset of <paramref name="other"/> set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
            <remarks>One set is a subset of second set if every element in first set is also contained in second set.</remarks>
        </member>
        <member name="M:Xtensive.Collections.ISet.IsSupersetOf(System.Collections.IEnumerable)">
            <summary>
            Determines if this instance is a superset of the specified set.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this instance is the proper superset of the specified set; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
            <remarks>One set is the proper superset of second set if every element in second set is also contained in the first set.</remarks>
        </member>
        <member name="M:Xtensive.Collections.ISet.Overlaps(System.Collections.IEnumerable)">
            <summary>
            Determines whether this instance overlaps the specified collection.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <returns><see langword="true"/> if this instance and <paramref name="other"/> share at least one common element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Collections.ISet.UnionWith(System.Collections.IEnumerable)">
            <summary>
            Modifies this instance to contain all elements that are present in both itself and in the specified collection.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.ISet.IntersectWith(System.Collections.IEnumerable)">
            <summary>
            Modifies this instance to contain only elements that are present in itself and in the specified collection.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.ISet.ExceptWith(System.Collections.IEnumerable)">
            <summary>
            Removes all elements in the specified collection from this instance.
            </summary>
            <param name="other">The collection of items to remove from this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xtensive.Collections.ISet.SymmetricExceptWith(System.Collections.IEnumerable)">
            <summary>
            Modifies this instance to contain only elements that are present in either itself, or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="P:Xtensive.Collections.ISet.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified item.
            </summary>
        </member>
        <member name="P:Xtensive.Collections.ISet.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.IEqualityComparer"/> object that is used to determine equality for the values in this instance.
            </summary>
            <value>The <see cref="T:System.Collections.IEqualityComparer"/> object that is used to determine equality for the values in this instance.</value>
        </member>
        <member name="T:Xtensive.Core.IHasVersion">
            <summary>
            Allows to track changes in object by its <see cref="P:Xtensive.Core.IHasVersion.Version"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Core.IHasVersion.Version">
            <summary>
            Gets object version.
            Object isn't changed, while its
            <c>oldVersion.Equals(newVersion)</c>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.IHasVersion`1">
            <summary>
            Allows to track changes in object by its <see cref="P:Xtensive.Core.IHasVersion`1.Version"/>.
            </summary>
            <typeparam name="T">The type <see cref="P:Xtensive.Core.IHasVersion`1.Version"/> property.</typeparam>
        </member>
        <member name="P:Xtensive.Core.IHasVersion`1.Version">
            <summary>
            Gets object version.
            Object isn't changed, while its
            <c>oldVersion.Equals(newVersion)</c>.
            </summary>
        </member>
        <member name="T:Xtensive.Caching.MfLruCache`2">
            <summary>
            A set of items limited by the maximal count of them.
            Stores as many most recently and frequently accessed items in memory as long as it is possible.
            </summary>
            <typeparam name="TKey">The key of the item.</typeparam>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="F:Xtensive.Caching.MfLruCache`2.DefaultEfficiencyFactor">
            <summary>
            Default <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> value.
            Value is <see langword="4"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Caching.MfLruCache`2.NoGcCount">
            <summary>
            Minimal <see cref="P:Xtensive.Caching.MfLruCache`2.Count"/> value, until which <see cref="M:Xtensive.Caching.MfLruCache`2.CollectGarbage"/> doesn't start at all.
            Value is <see langword="1024"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.TryGetItem(`0,System.Boolean,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Add(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Add(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.RemoveKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.CollectGarbage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Int32,System.Converter{`1,`0})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="efficiencyFactor">The <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.MfLruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="M:Xtensive.Caching.MfLruCache`2.#ctor(System.Int32,System.Int32,System.Int32,System.Converter{`1,`0},Xtensive.Caching.ICache{`0,`1})">
            <summary>
            <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="lruCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> property value.</param>
            <param name="mfuCapacity">The <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/> property value.</param>
            <param name="efficiencyFactor">The <see cref="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor"/> property value.</param>
            <param name="keyExtractor"><see cref="P:Xtensive.Caching.MfLruCache`2.KeyExtractor"/> property value.</param>
            <param name="chainedCache"><see cref="P:Xtensive.Caching.MfLruCache`2.ChainedCache"/> property value.</param>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.KeyExtractor">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.ChainedCache">
            <summary>
            Gets chained cache.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.LruCapacity">
            <summary>
            Gets the Least Recently Used capacity.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.MfuCapacity">
            <summary>
            Gets the Most Frequently Used capacity.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Capacity">
            <summary>
            Gets the total capacity (<see cref="P:Xtensive.Caching.MfLruCache`2.LruCapacity"/> + <see cref="P:Xtensive.Caching.MfLruCache`2.MfuCapacity"/>).
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.EfficiencyFactor">
            <summary>
            Gets the time shift factor offset.
            </summary>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Caching.MfLruCache`2.Item(`0,System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
