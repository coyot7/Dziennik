<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Aspects</name>
    </assembly>
    <members>
        <member name="T:Xtensive.Aspects.ErrorLog">
            <summary>
            Error log used by aspects.
            </summary>
        </member>
        <member name="M:Xtensive.Aspects.ErrorLog.Write(PostSharp.MessageLocation,PostSharp.Extensibility.SeverityType,Xtensive.Aspects.Helpers.AspectMessageType,System.Object[])">
            <summary>
            Writes the standard message to the underlying PostSharp <see cref="F:Xtensive.Aspects.ErrorLog.messageSource"/>.
            </summary>
            <param name="severity">The severity type.</param>
            <param name="messageType">The standard message type.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Xtensive.Aspects.ErrorLog.Write(PostSharp.MessageLocation,PostSharp.Extensibility.SeverityType,System.String,System.Object[])">
            <summary>
            Writes the message to the underlying PostSharp <see cref="F:Xtensive.Aspects.ErrorLog.messageSource"/>.
            </summary>
            <param name="severity">The severity type.</param>
            <param name="format">The message format string.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="T:Xtensive.Aspects.Helpers.AspectHelper">
            <summary>
            Helps to validate common aspect application errors.
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectHelper.AspectedFactoryMethodName">
            <summary>
            Gets name of factory method generated by <see cref="T:Xtensive.Aspects.ImplementFactoryMethod"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectHelper.CtorName">
            <summary>
            Gets name of any constructor.
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectHelper.GetterPrefix">
            <summary>
            Gets prefix of "get" accessor.
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectHelper.SetterPrefix">
            <summary>
            Gets prefix of "set" accessor.
            </summary>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.FormatType(System.Type)">
            <summary>
            Formats the type.
            </summary>
            <param name="type">The type to format.</param>
            <returns>String representation of the type.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.FormatConstructor(System.Type,System.Type,System.Type[])">
            <summary>
            Formats the method.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the constructed value.</param>
            <param name="parameterTypes">The method parameter types.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.FormatMethod(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Formats the method.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the return value.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The method parameter types.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.FormatMember(System.Type,System.Type,System.String)">
            <summary>
            Formats the member (field or property).
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the member.</param>
            <param name="name">Name of the member.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.FormatMember(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Formats the member name.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null" /> means no type name must be included into the format string.</param>
            <param name="member">The member to format.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.GetStandardMessage(Xtensive.Aspects.Helpers.AspectMessageType)">
            <summary>
            Gets the standard localized message.
            </summary>
            <param name="messageType">Type of the message to get.</param>
            <returns>Standard localized message.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="messageType"/> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.ValidateMemberType(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.MemberInfo,System.Boolean,System.Reflection.MemberTypes)">
            <summary>
            Validates the type of the member.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Aspects.ErrorLog"/>.</param>
            <param name="member">The member to validate the type of.</param>
            <param name="containsFlags">If set to <see langword="true"/>, member type 
            must contain <paramref name="memberTypes"/> flags;
            otherwise, it must not contain them.</param>
            <param name="memberTypes">Expected (or not) type(s) of the member.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.ValidateBaseType(System.Attribute,PostSharp.Extensibility.SeverityType,System.Type,System.Boolean,System.Type)">
            <summary>
            Validates the implementation of <paramref name="baseType"/> 
            (e.g. interface) on the <paramref name="type"/>.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Aspects.ErrorLog"/>.</param>
            <param name="type">The type to validate for the implementation of <paramref name="baseType"/>.</param>
            <param name="mustImplement">If set to <see langword="true"/>, type 
            must implement <paramref name="baseType"/>;
            otherwise, it must not implement it.</param>
            <param name="baseType">The base type to validate the implementation of.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.ValidateMethodAttributes(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.MethodBase,System.Boolean,System.Reflection.MethodAttributes)">
            <summary>
            Validates the attributes of the method.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Aspects.ErrorLog"/>.</param>
            <param name="method">The method to validate the attributes of.</param>
            <param name="containsFlags">If set to <see langword="true"/>, method attributes
            must contain <paramref name="methodAttributes"/> flags;
            otherwise, it must not contain them.</param>
            <param name="methodAttributes">Expected (or not) attributes of the method.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.ValidateMethod(System.Attribute,PostSharp.Extensibility.SeverityType,System.Type,System.Boolean,System.Reflection.BindingFlags,System.Type,System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Validates the presence of specified method on the <paramref name="type"/>.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Aspects.ErrorLog"/>.</param>
            <param name="type">The type to get the method of.</param>
            <param name="mustHave">If set to <see langword="true"/>, type
            must have specified method;
            otherwise, it must not have it.</param>
            <param name="bindingFlags">Binding flags.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The types of method arguments.</param>
            <param name="method">The found method, or <see langword="null"/> if specified method was not found.</param>
            <returns>
            <see langword="true"/> if validation has passed; otherwise, <see langword="false"/>.    
            </returns>
        </member>
        <member name="M:Xtensive.Aspects.Helpers.AspectHelper.IsInfrastructureMethod(System.Reflection.MethodBase)">
            <summary>
            Determines whether the specified method is infrastructure method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is infrastructure method; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Aspects.Helpers.AspectMessageType">
            <summary>
            Defines standard aspect message types.
            </summary>  
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.AspectPossiblyMissapplied">
            <summary>
            "[{0}] attribute is possibly wrongly applied to '{1}'."
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.AspectRequiresToBe">
            <summary>
            "[{0}] attribute requires '{1}' to {2}be {3}."
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.AspectRequiresToHave">
            <summary>
            "[{0}] attribute requires '{1}' to {2}have {3}."
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.AspectMustBeSingle">
            <summary>
            "Multiple [{0}] attributes are applied to '{1}', but there must be a single one."
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.AutoProperty">
            <summary>
            "auto-property"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.PropertyAccessor">
            <summary>
            "property accessor"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.Getter">
            <summary>
            "getter"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.Setter">
            <summary>
            "setter"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.Public">
            <summary>
            "public"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.NonPublic">
            <summary>
            "non-public"
            </summary>
        </member>
        <member name="F:Xtensive.Aspects.Helpers.AspectMessageType.Not">
            <summary>
            "not "
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.ImplementFactoryMethod">
            <summary>
            Implements static factory method that calls the specified constructor found by its signature.
            </summary>
            <remarks>
            If you're really interested in actual behavior, we recommend you to
            study the decompiled MSIL code of class having this attribute applied 
            using .NET Reflector.
            </remarks>
        </member>
        <member name="M:Xtensive.Aspects.ImplementFactoryMethod.CompileTimeValidate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Aspects.ImplementFactoryMethod.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.ImplementFactoryMethod"/> class.
            </summary>
            <param name="parameterTypes"><see cref="P:Xtensive.Aspects.ImplementFactoryMethod.ParameterTypes"/> property value.</param>
        </member>
        <member name="P:Xtensive.Aspects.ImplementFactoryMethod.ParameterTypes">
            <summary>
            Gets the protected constructor argument types.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.OverrideFieldNameAttribute">
            <summary>
            Overrides field name for persistence purposes. Should not be applied in end-user code.
            </summary>
        </member>
        <member name="M:Xtensive.Aspects.OverrideFieldNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.OverrideFieldNameAttribute"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.OverrideFieldNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.ReplaceAutoProperty">
            <summary>
            Replaces auto-property implementation to invocation of property get and set generic handlers.
            </summary>
            <remarks>
            If you're really interested in actual behavior, we recommend you to
            study the decompiled MSIL code of class having this attribute applied 
            using .NET Reflector.
            </remarks>
        </member>
        <member name="M:Xtensive.Aspects.ReplaceAutoProperty.CompileTimeValidate(System.Reflection.MethodBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Aspects.ReplaceAutoProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.ReplaceAutoProperty"/> class.
            </summary>
            <param name="handlerMethodSuffix"><see cref="P:Xtensive.Aspects.ReplaceAutoProperty.HandlerMethodSuffix"/> property value.</param>
        </member>
        <member name="P:Xtensive.Aspects.ReplaceAutoProperty.HandlerMethodSuffix">
            <summary>
            Gets the name suffix of handler methods.
            </summary>
            <remarks>
            If suffix is "Value", handler methods should be
            <c>T GetValue&lt;T&gt;(string name)</c> and
            <c>void SetValue&lt;T&gt;(string name, T value)</c>.
            </remarks>
        </member>
        <member name="T:Xtensive.Aspects.ImplementConstructor">
            <summary>
            Implements protected constructor with a set of specified parameter types.
            Implemented constructor will call the constructor with the same set of arguments from the base type.
            </summary>
            <remarks>
            If you're really interested in actual behavior, we recommend you to
            study the decompiled MSIL code of class having this attribute applied 
            using .NET Reflector.
            </remarks>
        </member>
        <member name="M:Xtensive.Aspects.ImplementConstructor.CompileTimeValidate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Aspects.ImplementConstructor.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.ImplementConstructor"/> class.
            </summary>
            <param name="parameterTypes"><see cref="P:Xtensive.Aspects.ImplementConstructor.ParameterTypes"/> property value.</param>
        </member>
        <member name="P:Xtensive.Aspects.ImplementConstructor.ParameterTypes">
            <summary>
            Gets the constructor parameter types.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.ImplementConstructorEpilogue">
            <summary>
            Injects epilogue method calls into the constructor.
            </summary>
            <remarks>
            If you're really interested in actual behavior, we recommend you to
            study the decompiled MSIL code of class having this attribute applied 
            using .NET Reflector.
            </remarks>
        </member>
        <member name="M:Xtensive.Aspects.ImplementConstructorEpilogue.CompileTimeValidate(System.Reflection.MethodBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Aspects.ImplementConstructorEpilogue.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.ImplementConstructorEpilogue"/> class.
            </summary>
            <param name="handlerType"><see cref="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerType"/> property value.</param>
            <param name="handlerMethodName"><see cref="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerMethodName"/> property value.</param>
        </member>
        <member name="M:Xtensive.Aspects.ImplementConstructorEpilogue.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.ImplementConstructorEpilogue"/> class.
            </summary>
            <param name="handlerType"><see cref="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerType"/> property value.</param>
            <param name="handlerMethodName"><see cref="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerMethodName"/> property value.</param>
            <param name="errorHandlerMethodName"><see cref="P:Xtensive.Aspects.ImplementConstructorEpilogue.ErrorHandlerMethodName"/> property value.</param>
        </member>
        <member name="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerType">
            <summary>
            Gets the type where epilogue method is declared.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.ImplementConstructorEpilogue.HandlerMethodName">
            <summary>
            Gets the name of the epilogue method to call.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.ImplementConstructorEpilogue.ErrorHandlerMethodName">
            <summary>
            Gets the name of the initialization error handler method to call.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.InfrastructureAttribute">
            <summary>
            Marks a method or property as infrastructure method or property.
            No any aspects will be applied to it by default.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.InitializableAttribute">
            <summary>
            Injects "initializable" aspect by modifying constructors so that
            methods with name <see cref="F:Xtensive.Aspects.InitializableAttribute.InitializeMethodName"/> and 
            <see cref="F:Xtensive.Aspects.InitializableAttribute.InitializationErrorMethodName"/> are invoked by each of them
            to ensure common post-construction initialization task is completed.
            </summary>
            <remarks>
            If you're really interested in actual behavior, we recommend you to
            study the decompiled MSIL code of class having this attribute applied 
            using .NET Reflector.
            </remarks>
        </member>
        <member name="M:Xtensive.Aspects.NotSupportedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.NotSupportedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Aspects.NotSupportedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.NotSupportedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Xtensive.Aspects.SuppressActivationAttribute">
            <summary>
            Suppresses the activation of context of specified <see cref="P:Xtensive.Aspects.SuppressActivationAttribute.ContextType"/> 
            for the method it is applied on.
            </summary>
        </member>
        <member name="M:Xtensive.Aspects.SuppressActivationAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Aspects.SuppressActivationAttribute"/> class.
            </summary>
            <param name="contextType">Type of the context to suppress activation for.</param>
        </member>
        <member name="P:Xtensive.Aspects.SuppressActivationAttribute.ContextType">
            <summary>
            Gets or sets the type of the context to suppress activation for.
            </summary>
            <remarks>If <see cref="P:Xtensive.Aspects.SuppressActivationAttribute.ContextType"/> is <see langword="null"/>
             then context activation for all contexts must be suppressed.
            </remarks>
        </member>
        <member name="T:Xtensive.Aspects.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExCannotFindLogFor">
            <summary>
              Looks up a localized string similar to Cannot find Log for type &apos;{0}&apos; in namespace &apos;{1}&apos; and above..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExMustBeSingle">
            <summary>
              Looks up a localized string similar to Multiple [{0}] attributes are applied to &apos;{1}&apos;, but there must be a single one..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExPossiblyMissapplied">
            <summary>
              Looks up a localized string similar to [{0}] attribute is possibly wrongly applied to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExRequiresToBe">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}be {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExRequiresToHave">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}have {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectExRequiresToImplement">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}implement &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AspectXCanNotBeAppliedToInfrastructureMethod">
            <summary>
              Looks up a localized string similar to Aspect {0} can not be applied to infrastructure method..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.AutoProperty">
            <summary>
              Looks up a localized string similar to auto-property.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.Getter">
            <summary>
              Looks up a localized string similar to getter.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.LogCantLogNoLogError">
            <summary>
              Looks up a localized string similar to Can&apos;t log &apos;{0}&apos; invocation: Instance property of found Log object returned an object other then ILog..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.LogCantResolveLogType">
            <summary>
              Looks up a localized string similar to [{0}] attribute: can&apos;t resolve LogType, or underlying Log has no Instance property..
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.MemberFormat">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.MethodFormat">
            <summary>
              Looks up a localized string similar to {0} {1}({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.NonPublic">
            <summary>
              Looks up a localized string similar to non-public.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.Not">
            <summary>
              Looks up a localized string similar to not .
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.PropertyAccessor">
            <summary>
              Looks up a localized string similar to property accessor.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.Public">
            <summary>
              Looks up a localized string similar to public.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.Setter">
            <summary>
              Looks up a localized string similar to setter.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.XD0001">
            <summary>
              Looks up a localized string similar to Debug: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Aspects.Resources.Strings.XW0001">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
    </members>
</doc>
